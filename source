return function()
	-- Prevent the script from running in non-exploit environments or if it's already running
	if getgenv().CoreSploitLoaded then return end
	getgenv().CoreSploitLoaded = true

	-- // SERVICES & CORE VARIABLES
	local TweenService = game:GetService("TweenService")
	local UserInputService = game:GetService("UserInputService")
	local RunService = game:GetService("RunService")
	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

	-- // ASSETS
	local Assets = {
		Checkmark = "http://www.roblox.com/asset/?id=6031094667",
		Arrow = "http://www.roblox.com/asset/?id=6034818372",
		Glow = "rbxassetid://5028859879"
	}

	-- // CONFIGURATION
	local Config = {
		Keybinds = {
			ToggleMenu = Enum.KeyCode.RightShift
		},
		Theme = {
			Accent = Color3.fromRGB(66, 255, 249),
			AccentContrast = Color3.fromRGB(17, 16, 24)
		},
		Elements = {}, -- This will be populated by the UI elements
		Defaults = {}  -- To store default values for resetting
	}

	-- // LIBRARY TABLE
	local Library = {
		Flags = {},
		Open = true,
		Dragging = false
	}
	Library.__index = Library

	-- // HELPER FUNCTIONS
	local function Create(instanceType)
		return function(props)
			local obj = Instance.new(instanceType)
			for k, v in pairs(props) do
				if type(k) == "number" then
					v.Parent = obj
				else
					obj[k] = v
				end
			end
			return obj
		end
	end

	local function Tween(instance, properties, duration)
		duration = duration or 0.2
		TweenService:Create(instance, TweenInfo.new(duration, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), properties):Play()
	end

	-- // CORE UI CREATION
	local MainGui = Create("ScreenGui"){
		Name = "CoreSploit",
		Parent = PlayerGui,
		ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	}

	local Background = Create("Frame"){
		Name = "Background",
		Parent = MainGui,
		Size = UDim2.new(0, 500, 0, 320), -- Initial size, will autoscale
		Position = UDim2.new(0.5, -250, 0.5, -160),
		BackgroundColor3 = Color3.fromRGB(17, 16, 24),
		BorderSizePixel = 0,
		ClipsDescendants = true,
		Create("UICorner"){ CornerRadius = UDim.new(0, 4) },
		Create("ImageLabel"){
			Name = "MenuGlow",
			Image = Assets.Glow,
			ImageColor3 = Config.Theme.Accent,
			SliceCenter = Rect.new(100, 100, 100, 100),
			SliceScale = 0.1,
			ScaleType = Enum.ScaleType.Slice,
			ImageTransparency = 0.85,
			Size = UDim2.new(1, 10, 1, 10),
			Position = UDim2.new(0.5, -5, 0.5, -5),
			AnchorPoint = Vector2.new(0.5, 0.5),
			ZIndex = 0,
		}
	}

	local Topbar = Create("Frame"){
		Name = "Topbar",
		Parent = Background,
		Size = UDim2.new(1, 0, 0, 40),
		BackgroundColor3 = Color3.fromRGB(28, 28, 33),
		BorderSizePixel = 0,
	}

	local TitleLabel = Create("TextLabel"){
		Name = "Title",
		Parent = Topbar,
		Size = UDim2.new(0, 200, 1, 0),
		Position = UDim2.new(0, 15, 0, 0),
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		BackgroundTransparency = 1,
		Font = Enum.Font.SourceSansBold,
		Text = "CoreSploit",
		TextColor3 = Config.Theme.Accent,
		TextSize = 16,
		TextXAlignment = Enum.TextXAlignment.Left
	}

	local TabsHolder = Create("Frame"){
		Name = "TabsHolder",
		Parent = Topbar,
		Size = UDim2.new(1, -215, 1, 0),
		Position = UDim2.new(0, 215, 0, 0),
		BackgroundTransparency = 1,
		Create("UIListLayout"){
			FillDirection = Enum.FillDirection.Horizontal,
			SortOrder = Enum.SortOrder.LayoutOrder,
			VerticalAlignment = Enum.VerticalAlignment.Bottom,
			Padding = UDim.new(0, 8)
		}
	}

	local ContentFrame = Create("Frame"){
		Name = "ContentFrame",
		Parent = Background,
		Position = UDim2.new(0, 0, 0, 40),
		Size = UDim2.new(1, 0, 1, -50),
		BackgroundTransparency = 1
	}

	local UnderBar = Create("Frame"){
		Name = "UnderBar",
		Parent = Background,
		AnchorPoint = Vector2.new(0, 1),
		Position = UDim2.new(0, 0, 1, 0),
		Size = UDim2.new(1, 0, 0, 10),
		BackgroundColor3 = Color3.fromRGB(28, 28, 33),
		BorderSizePixel = 0,
		Create("TextLabel"){
			Name = "GameName",
			Size = UDim2.new(0.5, 0, 1, 0),
			Position = UDim2.new(0, 15, 0, 0),
			BackgroundTransparency = 1,
			Font = Enum.Font.SourceSansSemibold,
			Text = "Blackhak Rescue Mission: 5",
			TextColor3 = Color3.fromRGB(124, 121, 125),
			TextSize = 12,
			TextXAlignment = Enum.TextXAlignment.Left,
		},
		Create("TextLabel"){
			Name = "UserStatus",
			Size = UDim2.new(0.5, -15, 1, 0),
			Position = UDim2.new(0.5, 0, 0, 0),
			BackgroundTransparency = 1,
			Font = Enum.Font.SourceSansSemibold,
			Text = "Admin",
			TextColor3 = Color3.fromRGB(124, 121, 125),
			TextSize = 12,
			TextXAlignment = Enum.TextXAlignment.Right,
		}
	}

	-- // DRAGGING LOGIC
	Topbar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			Library.Dragging = true
			local dragStart = input.Position
			local startPos = Background.Position
			local dragConn, stopConn

			dragConn = UserInputService.InputChanged:Connect(function(newInput)
				if newInput.UserInputType == UserInputService.GetLastInputType() then
					Background.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + (newInput.Position.X - dragStart.X), startPos.Y.Scale, startPos.Y.Offset + (newInput.Position.Y - dragStart.Y))
				end
			end)

			stopConn = UserInputService.InputEnded:Connect(function(endInput)
				if endInput.UserInputType == Enum.UserInputType.MouseButton1 or endInput.UserInputType == Enum.UserInputType.Touch then
					Library.Dragging = false
					dragConn:Disconnect()
					stopConn:Disconnect()
				end
			end)
		end
	end)

	-- // MENU TOGGLE
	UserInputService.InputBegan:Connect(function(input, gpe)
		if gpe then return end
		if input.KeyCode == Config.Keybinds.ToggleMenu then
			Library.Open = not Library.Open
			Tween(Background, {Position = Library.Open and UDim2.new(0.5, -Background.AbsoluteSize.X / 2, 0.5, -Background.AbsoluteSize.Y / 2) or UDim2.new(0.5, -Background.AbsoluteSize.X / 2, -1, 0)}, 0.3)
		end
	end)


	--[[ API ]]--
	function Library:CreateWindow(title)
		local Window = {}
		Window.Tabs = {}
		Window.CurrentTab = nil
		TitleLabel.Text = title

		function Window:UpdateTheme()
			TitleLabel.TextColor3 = Config.Theme.Accent
			Background.MenuGlow.ImageColor3 = Config.Theme.Accent
			if Window.CurrentTab then
				Window.CurrentTab.Button.SelectedLine.BackgroundColor3 = Config.Theme.Accent
				Window.CurrentTab.Button.TextColor3 = Config.Theme.Accent
			end
			-- Propagate theme updates to all elements
			for _, flag in pairs(Library.Flags) do
				if flag.UpdateTheme then
					flag:UpdateTheme()
				end
			end
		end

		function Window:AddTab(name)
			local Tab = {}
			Tab.Name = name
			Tab.Sections = {}

			local TabButton = Create("TextButton"){
				Name = name,
				Parent = TabsHolder,
				Size = UDim2.new(0, 0, 0, 30), -- AutoSized by UIListLayout
				AutomaticSize = Enum.AutomaticSize.X,
				BackgroundTransparency = 1,
				Font = Enum.Font.SourceSansSemibold,
				Text = "  " .. name .. "  ",
				TextColor3 = Color3.fromRGB(124, 121, 125),
				TextSize = 15,
			}
			Tab.Button = TabButton

			local SelectedLine = Create("Frame"){
				Name = "SelectedLine",
				Parent = TabButton,
				Size = UDim2.new(1, 0, 0, 2),
				Position = UDim2.new(0, 0, 1, -2),
				BackgroundColor3 = Config.Theme.Accent,
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				ZIndex = 2
			}

			local TabPage = Create("Frame"){
				Name = name .. "Page",
				Parent = ContentFrame,
				Size = UDim2.new(1, 0, 1, 0),
				BackgroundTransparency = 1,
				Visible = false,
			}
			Tab.Page = TabPage

			local PageContent = Create("Frame"){
				Parent = TabPage,
				Size = UDim2.new(1, -30, 0, 0),
				Position = UDim2.new(0, 15, 0, 15),
				BackgroundTransparency = 1,
				Create("UIListLayout"){
					Name = "VerticalLayout",
					FillDirection = Enum.FillDirection.Vertical,
					SortOrder = Enum.SortOrder.LayoutOrder,
					Padding = UDim.new(0, 20),
				}
			}
			Tab.Content = PageContent

			RunService:BindToRenderStep("AutoSize", 2000, function()
				local requiredHeight = PageContent.VerticalLayout.AbsoluteContentSize.Y + 30 + 40 + 10 -- Content + Padding + TopBar + UnderBar
				if requiredHeight > Background.AbsoluteSize.Y then
					Tween(Background, {Size = UDim2.new(0, Background.AbsoluteSize.X, 0, requiredHeight)}, 0.2)
				end
			end)

			function Tab:SetActive()
				if Window.CurrentTab == self then return end

				if Window.CurrentTab then
					Window.CurrentTab.Page.Visible = false
					Tween(Window.CurrentTab.Button, {TextColor3 = Color3.fromRGB(124, 121, 125)}, 0.2)
					Tween(Window.CurrentTab.Button.SelectedLine, {BackgroundTransparency = 1}, 0.2)
				end

				self.Page.Visible = true
				Tween(self.Button, {TextColor3 = Config.Theme.Accent}, 0.2)
				Tween(self.Button.SelectedLine, {BackgroundTransparency = 0}, 0.2)

				Window.CurrentTab = self

				-- Trigger resize check
				local requiredHeight = self.Content.VerticalLayout.AbsoluteContentSize.Y + 30 + 40 + 10
				Tween(Background, {Size = UDim2.new(0, Background.AbsoluteSize.X, 0, requiredHeight)}, 0.2)
			end

			TabButton.MouseButton1Click:Connect(function() self:SetActive() end)
			table.insert(Window.Tabs, Tab)

			function Tab:AddSection(title)
				local Section = {}
				Section.Name = title
				Section.Elements = {}
				local sectionIdentifier = (Tab.Name .. "_" .. title):gsub("%s+", "")

				local SectionFrame = Create("Frame"){
					Name = title,
					Parent = PageContent,
					Size = UDim2.new(1, 0, 0, 100), -- Auto-sizes
					AutomaticSize = Enum.AutomaticSize.Y,
					BackgroundTransparency = 1,
					Create("UIListLayout"){
						Padding = UDim.new(0, 10),
					}
				}

				local TitleFrame = Create("Frame"){
					Name = "TitleFrame",
					Parent = SectionFrame,
					Size = UDim2.new(1, 0, 0, 25),
					BackgroundTransparency = 1,
					Create("TextLabel"){
						Name = "Title",
						Size = UDim2.new(1, 0, 1, 0),
						BackgroundTransparency = 1,
						Font = Enum.Font.SourceSansBold,
						Text = title,
						TextColor3 = Color3.fromRGB(255, 255, 255),
						TextSize = 16,
						TextXAlignment = Enum.TextXAlignment.Left,
					},
					Create("Frame"){ -- Divider
						Name = "Divider",
						AnchorPoint = Vector2.new(0, 1),
						Position = UDim2.new(0, 0, 1, 3),
						Size = UDim2.new(1, 0, 0, 1),
						BackgroundColor3 = Color3.fromRGB(40, 40, 48),
						BorderSizePixel = 0,
					}
				}
				
				local Container = Create("Frame"){
					Name = "Container",
					Parent = SectionFrame,
					Size = UDim2.new(1, 0, 0, 0),
					AutomaticSize = Enum.AutomaticSize.Y,
					BackgroundTransparency = 1,
					Create("UIListLayout"){
						Padding = UDim.new(0, 8),
					}
				}
				Section.Container = Container

				-- Component functions go here
				function Section:AddToggle(id, options)
					options = options or {}
					local identifier = sectionIdentifier .. "_" .. id
					Config.Defaults[identifier] = options.Default or false
					Config.Elements[identifier] = Config.Elements[identifier] or Config.Defaults[identifier]

					local Flag = {Value = Config.Elements[identifier]}
					Library.Flags[identifier] = Flag

					local Frame = Create("Frame"){
						Name = id,
						Parent = Container,
						Size = UDim2.new(1, 0, 0, 20),
						BackgroundTransparency = 1,
					}

					local Checkbox = Create("TextButton"){
						Name = "Checkbox",
						Parent = Frame,
						Size = UDim2.new(0, 18, 0, 18),
						Position = UDim2.new(0, 0, 0.5, -9),
						BackgroundColor3 = Flag.Value and Config.Theme.Accent or Color3.fromRGB(40, 40, 48),
						Text = "",
						AutoButtonColor = false,
						Create("UICorner"){ CornerRadius = UDim.new(0, 4)},
						Create("ImageLabel"){
							Name = "Checkmark",
							Parent = self,
							Size = UDim2.new(1, -4, 1, -4),
							Position = UDim2.new(0.5, -0.5, 0.5, -0.5),
							AnchorPoint = Vector2.new(0.5, 0.5),
							Image = Assets.Checkmark,
							ImageColor3 = Config.Theme.AccentContrast,
							ImageTransparency = Flag.Value and 0 or 1,
							BackgroundTransparency = 1,
						}
					}
					
					local Title = Create("TextLabel"){
						Name = "Title",
						Parent = Frame,
						Size = UDim2.new(1, -25, 1, 0),
						Position = UDim2.new(0, 25, 0, 0),
						BackgroundTransparency = 1,
						Font = Enum.Font.SourceSansSemibold,
						Text = options.Text or id,
						TextColor3 = Color3.fromRGB(200, 200, 200),
						TextSize = 15,
						TextXAlignment = Enum.TextXAlignment.Left,
					}
					
					function Flag:UpdateTheme()
						if self.Value then
							Checkbox.BackgroundColor3 = Config.Theme.Accent
							Checkbox.Checkmark.ImageColor3 = Config.Theme.AccentContrast
						end
					end

					function Flag:Set(value)
						self.Value = value
						Config.Elements[identifier] = value
						Tween(Checkbox, {BackgroundColor3 = self.Value and Config.Theme.Accent or Color3.fromRGB(40, 40, 48)}, 0.15)
						Tween(Checkbox.Checkmark, {ImageTransparency = self.Value and 0 or 1}, 0.15)
						if options.Callback then
							task.spawn(options.Callback, self.Value)
						end
					end

					Checkbox.MouseButton1Click:Connect(function() Flag:Set(not Flag.Value) end)
				end

				function Section:AddSlider(id, options)
					options = options or {}
					local identifier = sectionIdentifier .. "_" .. id
					Config.Defaults[identifier] = options.Default or options.Min or 0
					Config.Elements[identifier] = Config.Elements[identifier] or Config.Defaults[identifier]

					local Flag = {Value = Config.Elements[identifier]}
					Library.Flags[identifier] = Flag

					local Frame = Create("Frame"){
						Name = id,
						Parent = Container,
						Size = UDim2.new(1, 0, 0, 40),
						BackgroundTransparency = 1,
					}

					local Title = Create("TextLabel"){
						Parent = Frame,
						Size = UDim2.new(0.5, 0, 0, 20),
						BackgroundTransparency = 1,
						Font = Enum.Font.SourceSansSemibold,
						Text = options.Text or id,
						TextColor3 = Color3.fromRGB(200, 200, 200),
						TextSize = 15,
						TextXAlignment = Enum.TextXAlignment.Left,
					}
					
					local ValueBox = Create("TextBox"){
						Parent = Frame,
						Size = UDim2.new(0.5, -10, 0, 20),
						Position = UDim2.new(0.5, 10, 0, 0),
						BackgroundTransparency = 1,
						Font = Enum.Font.SourceSansSemibold,
						Text = tostring(Flag.Value),
						TextColor3 = Color3.fromRGB(150, 150, 150),
						TextSize = 14,
						TextXAlignment = Enum.TextXAlignment.Right,
						ClearTextOnFocus = false,
					}
					
					local SliderTrack = Create("Frame"){
						Parent = Frame,
						Size = UDim2.new(1, 0, 0, 4),
						Position = UDim2.new(0, 0, 0, 25),
						BackgroundColor3 = Color3.fromRGB(40, 40, 48),
						Create("UICorner"){CornerRadius = UDim.new(1, 0)}
					}
					
					local Filler = Create("Frame"){
						Parent = SliderTrack,
						BackgroundColor3 = Config.Theme.Accent,
						Size = UDim2.new(0, 0, 1, 0), -- Set in Set()
						Create("UICorner"){CornerRadius = UDim.new(1, 0)}
					}
					
					local SliderHead = Create("Frame"){
						Parent = SliderTrack,
						Size = UDim2.new(0, 12, 0, 12),
						AnchorPoint = Vector2.new(0.5, 0.5),
						Position = UDim2.new(0, 0, 0.5, 0),
						BackgroundColor3 = Config.Theme.Accent,
						Create("UICorner"){CornerRadius = UDim.new(1, 0)},
					}

					local min, max, precise = options.Min or 0, options.Max or 100, options.Precision or 0
					
					function Flag:UpdateTheme()
						Filler.BackgroundColor3 = Config.Theme.Accent
						SliderHead.BackgroundColor3 = Config.Theme.Accent
					end

					function Flag:Set(value)
						value = math.clamp(value, min, max)
						local roundedValue = tonumber(string.format("%." .. precise .. "f", value))
						self.Value = roundedValue
						Config.Elements[identifier] = roundedValue
						ValueBox.Text = tostring(roundedValue)

						local percentage = (self.Value - min) / (max - min)
						Tween(Filler, {Size = UDim2.new(percentage, 0, 1, 0)}, 0.05)
						Tween(SliderHead, {Position = UDim2.new(percentage, 0, 0.5, 0)}, 0.05)

						if options.Callback then
							task.spawn(options.Callback, self.Value)
						end
					end
					
					local function onDrag(input)
						local mouseX = input.Position.X
						local startX = SliderTrack.AbsolutePosition.X
						local width = SliderTrack.AbsoluteSize.X
						local percentage = math.clamp((mouseX - startX) / width, 0, 1)
						local value = min + (max - min) * percentage
						Flag:Set(value)
					end

					SliderTrack.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							onDrag(input)
							local moveConn, upConn
							moveConn = UserInputService.InputChanged:Connect(function(i) if i.UserInputType == Enum.UserInputType.MouseMovement then onDrag(i) end end)
							upConn = UserInputService.InputEnded:Connect(function(i) if i.UserInputType == Enum.UserInputType.MouseButton1 then moveConn:Disconnect() upConn:Disconnect() end end)
						end
					end)

					ValueBox.FocusLost:Connect(function(enter)
						if enter then
							local newValue = tonumber(ValueBox.Text)
							if newValue then Flag:Set(newValue) else ValueBox.Text = tostring(Flag.Value) end
						end
					end)

					Flag:Set(Flag.Value) -- Initialize
				end

				function Section:AddDropdown(id, options)
					options = options or {}
					local identifier = sectionIdentifier .. "_" .. id
					Config.Defaults[identifier] = options.Default or options.Values[1]
					Config.Elements[identifier] = Config.Elements[identifier] or Config.Defaults[identifier]

					local Flag = {Value = Config.Elements[identifier], IsOpen = false}
					Library.Flags[identifier] = Flag

					local Frame = Create("Frame"){
						Name = id,
						Parent = Container,
						Size = UDim2.new(1, 0, 0, 45),
						BackgroundTransparency = 1,
						ZIndex = 2
					}

					local Title = Create("TextLabel"){
						Parent = Frame,
						Size = UDim2.new(1, 0, 0, 20),
						BackgroundTransparency = 1,
						Font = Enum.Font.SourceSansSemibold,
						Text = options.Text or id,
						TextColor3 = Color3.fromRGB(200, 200, 200),
						TextSize = 15,
						TextXAlignment = Enum.TextXAlignment.Left,
					}
					
					local DropdownButton = Create("TextButton"){
						Parent = Frame,
						Size = UDim2.new(1, 0, 0, 25),
						Position = UDim2.new(0,0,0,20),
						BackgroundColor3 = Color3.fromRGB(28, 28, 33),
						Text = "",
						AutoButtonColor = false,
						Create("UICorner"){CornerRadius = UDim.new(0, 4)},
					}
					
					local SelectedLabel = Create("TextLabel"){
						Parent = DropdownButton,
						Size = UDim2.new(1, -30, 1, 0),
						Position = UDim2.new(0, 10, 0, 0),
						BackgroundTransparency = 1,
						Font = Enum.Font.SourceSansSemibold,
						Text = tostring(Flag.Value),
						TextColor3 = Color3.fromRGB(240, 240, 240),
						TextSize = 14,
						TextXAlignment = Enum.TextXAlignment.Left,
					}

					local Arrow = Create("ImageLabel"){
						Parent = DropdownButton,
						Size = UDim2.new(0, 20, 0, 20),
						Position = UDim2.new(1, -25, 0.5, -10),
						AnchorPoint = Vector2.new(0.5, 0.5),
						BackgroundTransparency = 1,
						Image = Assets.Arrow,
						ImageColor3 = Color3.fromRGB(150, 150, 150),
					}
					
					local DropdownList = Create("Frame"){
						Parent = Frame,
						ClipsDescendants = true,
						Position = UDim2.new(0, 0, 1, 5),
						Size = UDim2.new(1, 0, 0, 0), -- Closed by default
						BackgroundColor3 = Color3.fromRGB(28, 28, 33),
						BorderSizePixel = 0,
						ZIndex = 3,
						Create("UICorner"){CornerRadius = UDim.new(0, 4)},
						Create("UIListLayout"){Padding = UDim.new(0, 2)},
						Create("UIPadding"){PaddingTop = UDim.new(0, 4), PaddingBottom = UDim.new(0, 4)},
					}
					
					function Flag:UpdateTheme()
						-- No accent colors in dropdown by default
					end

					function Flag:Set(value)
						self.Value = value
						Config.Elements[identifier] = value
						SelectedLabel.Text = tostring(value)
						if options.Callback then
							task.spawn(options.Callback, self.Value)
						end
						for _, btn in pairs(DropdownList:GetChildren()) do
							if btn:IsA("TextButton") then
								btn.BackgroundColor3 = (btn.Name == value) and Config.Theme.Accent or Color3.new(1,1,1)
								btn.TextColor3 = (btn.Name == value) and Config.Theme.AccentContrast or Color3.fromRGB(200, 200, 200)
							end
						end
					end

					function Flag:ToggleOpen()
						self.IsOpen = not self.IsOpen
						Tween(Arrow, {Rotation = self.IsOpen and -90 or 0}, 0.2)
						local listHeight = #options.Values * 27 + 8
						Tween(DropdownList, {Size = self.IsOpen and UDim2.new(1, 0, 0, listHeight) or UDim2.new(1, 0, 0, 0)}, 0.2)
						Frame.Size = UDim2.new(1, 0, 0, self.IsOpen and (45 + listHeight) or 45)
					end

					for _, optionName in pairs(options.Values) do
						local OptionButton = Create("TextButton"){
							Name = optionName,
							Parent = DropdownList,
							Size = UDim2.new(1, 0, 0, 25),
							BackgroundColor3 = (optionName == Flag.Value) and Config.Theme.Accent or Color3.new(1,1,1),
							BackgroundTransparency = (optionName == Flag.Value) and 0 or 1,
							Font = Enum.Font.SourceSans,
							Text = "  " .. optionName,
							TextColor3 = (optionName == Flag.Value) and Config.Theme.AccentContrast or Color3.fromRGB(200, 200, 200),
							TextSize = 14,
							TextXAlignment = Enum.TextXAlignment.Left,
						}
						OptionButton.MouseButton1Click:Connect(function()
							Flag:Set(optionName)
							Flag:ToggleOpen()
						end)
						OptionButton.MouseEnter:Connect(function() 
							if OptionButton.Name ~= Flag.Value then Tween(OptionButton, {BackgroundTransparency = 0.8}, 0.1) end
						end)
						OptionButton.MouseLeave:Connect(function() 
							if OptionButton.Name ~= Flag.Value then Tween(OptionButton, {BackgroundTransparency = 1}, 0.1) end
						end)
					end
					
					DropdownButton.MouseButton1Click:Connect(function() Flag:ToggleOpen() end)
				end

				function Section:AddButton(id, options)
					options = options or {}
					local Button = Create("TextButton"){
						Name = id,
						Parent = Container,
						Size = UDim2.new(1, 0, 0, 30),
						BackgroundColor3 = Config.Theme.Accent,
						Text = options.Text or id,
						TextColor3 = Config.Theme.AccentContrast,
						Font = Enum.Font.SourceSansBold,
						TextSize = 15,
						AutoButtonColor = false,
						Create("UICorner"){CornerRadius = UDim.new(0, 4)}
					}
					Button.MouseButton1Click:Connect(function() if options.Callback then task.spawn(options.Callback) end end)
					Button.MouseEnter:Connect(function() Tween(Button, {BackgroundColor3 = Config.Theme.Accent:Lerp(Color3.new(1,1,1), 0.2)}, 0.1) end)
					Button.MouseLeave:Connect(function() Tween(Button, {BackgroundColor3 = Config.Theme.Accent}, 0.1) end)
					
					local Flag = {}
					Library.Flags[sectionIdentifier .. "_" .. id] = Flag
					function Flag:UpdateTheme()
						Button.BackgroundColor3 = Config.Theme.Accent
						Button.TextColor3 = Config.Theme.AccentContrast
					end
				end

				function Section:AddKeybind(id, options)
					options = options or {}
					local identifier = sectionIdentifier .. "_" .. id
					Config.Defaults[identifier] = options.Default or "None"
					Config.Elements[identifier] = Config.Elements[identifier] or Config.Defaults[identifier]

					local Flag = {Value = Enum.KeyCode[Config.Elements[identifier]] or Enum.KeyCode.Unknown}
					Library.Flags[identifier] = Flag
					
					local Frame = Create("Frame"){
						Name = id,
						Parent = Container,
						Size = UDim2.new(1, 0, 0, 20),
						BackgroundTransparency = 1,
					}
					
					local Title = Create("TextLabel"){
						Parent = Frame,
						Size = UDim2.new(1, -90, 1, 0),
						BackgroundTransparency = 1,
						Font = Enum.Font.SourceSansSemibold,
						Text = options.Text or id,
						TextColor3 = Color3.fromRGB(200, 200, 200),
						TextSize = 15,
						TextXAlignment = Enum.TextXAlignment.Left,
					}
					
					local KeyButton = Create("TextButton"){
						Parent = Frame,
						Size = UDim2.new(0, 80, 1, 0),
						Position = UDim2.new(1, -80, 0, 0),
						BackgroundColor3 = Color3.fromRGB(28, 28, 33),
						Text = tostring(Config.Elements[identifier]),
						Font = Enum.Font.SourceSansSemibold,
						TextColor3 = Color3.fromRGB(220, 220, 220),
						TextSize = 14,
						AutoButtonColor = false,
						Create("UICorner"){CornerRadius = UDim.new(0, 4)}
					}

					function Flag:Set(keyCode)
						local keyName = keyCode.Name
						self.Value = keyCode
						Config.Elements[identifier] = keyName
						KeyButton.Text = keyName
						if options.Callback then
							pcall(options.Callback, keyCode)
						end
					end
					
					KeyButton.MouseButton1Click:Connect(function()
						KeyButton.Text = "..."
						local conn 
						conn = UserInputService.InputBegan:Connect(function(input, gpe)
							if gpe then return end
							if input.UserInputType == Enum.UserInputType.Keyboard then
								Flag:Set(input.KeyCode)
								conn:Disconnect()
							elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
								Flag:Set(Enum.KeyCode.MouseButton1)
								conn:Disconnect()
							elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
								Flag:Set(Enum.KeyCode.MouseButton2)
								conn:Disconnect()
							end
						end)
					end)
				end
				
				table.insert(Tab.Sections, Section)
				return Section
			end

			if not Window.CurrentTab then
				Tab:SetActive()
			end

			return Tab
		end
		
		function Window:AddConfig(Serializer)
			-- This would integrate with an external config saving/loading script
			-- For now, we use a simple clipboard-based system in the Settings tab.
		end
		
		return Window
	end

	-- // Demo of API usage to build the UI from the image
	local CoreWindow = Library:CreateWindow("o bee city")

	local PlayerTab = CoreWindow:AddTab("Player")
	do
		local PlayerSection = PlayerTab:AddSection("Player")
		PlayerSection:AddToggle("Enabled", {Text = "Enabled", Default = true})
		PlayerSection:AddToggle("ShowTeam", {Text = "Show Team", Default = false}) -- Incomplete in original
		PlayerSection:AddToggle("Box", {Text = "Box", Default = true}) -- Incomplete in original

		PlayerSection:AddDropdown("TracerOrigin", {
			Text = "Tracers", 
			Values = {"Top", "Middle", "Bottom"},
			Default = "Top"
		})
		PlayerSection:AddSlider("MaxDistance", {
			Text = "Max Distance",
			Min = 0, Max = 1000,
			Default = 150, Precision = 0
		})
		PlayerSection:AddKeybind("AutoTriggerKey", {Text = "Autotrigger", Default = "M"})
		PlayerSection:AddButton("Center Indicators", {Text = "Button Example", Callback = function() print("Button Pressed!") end})
	end
	
	local OtherTab = CoreWindow:AddTab("Other")
	do
		local OtherSection = OtherTab:AddSection("Other")
		OtherSection:AddDropdown("AimPart", {
			Values = {"Off", "Head", "Chest"},
			Default = "Off"
		})
	end
	
	local SettingsTab = CoreWindow:AddTab("Settings")
	do
		local ThemeSection = SettingsTab:AddSection("Theme")
		-- This is a more advanced component not in the original UI, but required by the prompt
		local AccentPickerFrame = Create("Frame"){ Parent = ThemeSection.Container, Size=UDim2.new(1,0,0,30), BackgroundTransparency=1 }
		local AccentTitle = Create("TextLabel"){ Parent = AccentPickerFrame, Size=UDim2.new(0.5,0,1,0), BackgroundTransparency=1, Font=Enum.Font.SourceSansSemibold, Text="Accent Color", TextColor3=Color3.fromRGB(200,200,200), TextSize=15, TextXAlignment=Enum.TextXAlignment.Left }
		local AccentColorButton = Create("TextButton"){ Parent = AccentPickerFrame, Size=UDim2.new(0,50,0,20), Position=UDim2.new(1,-50,0.5,-10), BackgroundColor3=Config.Theme.Accent, Text="", Create("UICorner"){CornerRadius=UDim.new(0,4)} }
		-- A real color picker would be implemented here. For simplicity, we cycle through colors.
		local colors = {Color3.fromRGB(66, 255, 249), Color3.fromRGB(255, 80, 80), Color3.fromRGB(80, 255, 80), Color3.fromRGB(255, 120, 255)}
		local currentColor = 1
		AccentColorButton.MouseButton1Click:Connect(function()
			currentColor = (currentColor % #colors) + 1
			Config.Theme.Accent = colors[currentColor]
			AccentColorButton.BackgroundColor3 = Config.Theme.Accent
			CoreWindow:UpdateTheme()
		end)


		local ConfigSection = SettingsTab:AddSection("Configuration")
		local ConfigBox = Create("TextBox"){
			Parent = ConfigSection.Container,
			Size = UDim2.new(1, 0, 0, 100),
			BackgroundColor3 = Color3.fromRGB(28, 28, 33),
			Font = Enum.Font.SourceSans,
			MultiLine = true,
			Text = "Paste config here...",
			TextColor3 = Color3.fromRGB(200, 200, 200),
			TextSize = 12,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextYAlignment = Enum.TextYAlignment.Top,
			ClearTextOnFocus = true,
			Create("UICorner"){CornerRadius=UDim.new(0,4)},
		}
		
		local ButtonHolder = Create("Frame"){
			Parent = ConfigSection.Container,
			Size = UDim2.new(1,0,0,30),
			BackgroundTransparency = 1,
			Create("UIListLayout"){
				FillDirection = Enum.FillDirection.Horizontal,
				HorizontalAlignment = Enum.HorizontalAlignment.Center,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Padding = UDim.new(0, 10)
			}
		}

		ConfigSection:AddButton("CopyConfig", {Text = "Copy Config", Callback = function()
			local t = {}
			for i, v in pairs(Config.Elements) do
				t[i] = v
			end
			local ser = game:GetService("HttpService"):JSONEncode(t)
			setclipboard(ser)
			ConfigBox.Text = "Config copied to clipboard!"
		end})

		ConfigSection:AddButton("LoadConfig", {Text = "Load Config", Callback = function()
			local success, decoded = pcall(function() return game:GetService("HttpService"):JSONDecode(ConfigBox.Text) end)
			if success and type(decoded) == "table" then
				for id, val in pairs(decoded) do
					if Library.Flags[id] and Library.Flags[id].Set then
						Library.Flags[id]:Set(val)
					end
				end
				ConfigBox.Text = "Config loaded successfully!"
			else
				ConfigBox.Text = "Error: Invalid config format."
			end
		end})
	end
	
	-- Set the first tab active by default
	if #CoreWindow.Tabs > 0 then
		CoreWindow.Tabs[1]:SetActive()
	end
	return Library
end
