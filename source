-- Extensive UI Library - Exact Recreation
-- Based on the provided source code and visual design

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local Player = Players.LocalPlayer

-- Library Main Table
local Library = {
    Windows = {},
    Flags = {},
    Options = {},
    Connections = {},
    CurrentColorpicker = nil,
    CurrentDropdown = nil,
    DraggingSlider = nil,
    Open = true
}

-- Theme System
Library.Theme = {
    ["Background"] = Color3.fromRGB(17, 16, 24),
    ["Topbar"] = Color3.fromRGB(28, 28, 33),
    ["Border"] = Color3.fromRGB(36, 36, 43),
    ["Accent"] = Color3.fromRGB(66, 255, 249),
    ["Text"] = Color3.fromRGB(255, 255, 255),
    ["TextDark"] = Color3.fromRGB(124, 121, 125),
    ["SectionBg"] = Color3.fromRGB(28, 28, 33),
    ["ElementBg"] = Color3.fromRGB(35, 35, 35),
    ["ElementBorder"] = Color3.fromRGB(47, 47, 47),
    ["ToggleEnabled"] = Color3.fromRGB(66, 255, 249),
    ["ToggleDisabled"] = Color3.fromRGB(255, 255, 255),
    ["DropdownBg"] = Color3.fromRGB(36, 36, 43),
    ["GameFooter"] = Color3.fromRGB(28, 28, 33)
}

-- Utility Functions
local function CreateInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties or {}) do
        pcall(function()
            instance[property] = value
        end)
    end
    return instance
end

local function Tween(obj, props, duration, style, direction)
    local tween = TweenService:Create(obj, TweenInfo.new(duration or 0.2, style or Enum.EasingStyle.Quad, direction or Enum.EasingDirection.Out), props)
    tween:Play()
    return tween
end

local function AddCorner(obj, radius)
    local corner = CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, radius or 3),
        Parent = obj
    })
    return corner
end

-- Create ScreenGui
local ScreenGui = CreateInstance("ScreenGui", {
    Name = "UILibrary",
    Parent = CoreGui,
    ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
    ResetOnSpawn = false
})

-- Main Library Functions
function Library:CreateWindow(config)
    config = config or {}
    
    local Window = {
        Name = config.Name or "UI Library",
        Size = config.Size or UDim2.new(0, 470, 0, 581),
        Position = config.Position or UDim2.new(0.5, -235, 0.5, -290),
        Tabs = {},
        CurrentTab = nil,
        Elements = {},
        Dragging = false,
        DragStart = nil,
        StartPos = nil
    }
    
    -- Main Background
    Window.Background = CreateInstance("Frame", {
        Name = "Background",
        Parent = ScreenGui,
        BackgroundColor3 = Library.Theme.Background,
        BorderSizePixel = 0,
        Position = Window.Position,
        Size = Window.Size,
        ClipsDescendants = true
    })
    AddCorner(Window.Background, 3)
    
    -- Topbar
    Window.Topbar = CreateInstance("Frame", {
        Name = "Topbar",
        Parent = Window.Background,
        BackgroundColor3 = Library.Theme.Topbar,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 6),
        Size = UDim2.new(1, 0, 0, 30)
    })
    
    -- Topbar Filler (for rounded corners)
    Window.TopbarFiller = CreateInstance("Frame", {
        Name = "TopbarFiller",
        Parent = Window.Topbar,
        BackgroundColor3 = Library.Theme.Topbar,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, -6),
        Size = UDim2.new(1, 0, 0, 10),
        ZIndex = -1
    })
    AddCorner(Window.TopbarFiller, 3)
    
    -- Title
    Window.Title = CreateInstance("TextLabel", {
        Name = "Title",
        Parent = Window.Topbar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, -6),
        Size = UDim2.new(0, 120, 0, 32),
        Font = Enum.Font.SourceSansBold,
        Text = Window.Name,
        TextColor3 = Library.Theme.Accent,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Tabs Holder
    Window.TabsHolder = CreateInstance("Frame", {
        Name = "TabsHolder",
        Parent = Window.Topbar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0.506, 0, 0, -5),
        Size = UDim2.new(0, 232, 0, 36)
    })
    
    CreateInstance("UIListLayout", {
        Parent = Window.TabsHolder,
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8)
    })
    
    -- Separator Line
    Window.Separator = CreateInstance("Frame", {
        Name = "Separator",
        Parent = Window.Background,
        BackgroundColor3 = Library.Theme.Border,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 37),
        Size = UDim2.new(1, 0, 0, 1)
    })
    
    -- Content Areas
    Window.Section1 = CreateInstance("ScrollingFrame", {
        Name = "Section1",
        Parent = Window.Background,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 5, 0, 42),
        Size = UDim2.new(0, 225, 1, -85),
        ScrollBarThickness = 0,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y
    })
    
    CreateInstance("UIListLayout", {
        Parent = Window.Section1,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10)
    })
    
    Window.Section2 = CreateInstance("ScrollingFrame", {
        Name = "Section2",
        Parent = Window.Background,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -230, 0, 42),
        Size = UDim2.new(0, 225, 1, -85),
        ScrollBarThickness = 0,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y
    })
    
    CreateInstance("UIListLayout", {
        Parent = Window.Section2,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10)
    })
    
    -- Footer
    Window.Footer = CreateInstance("Frame", {
        Name = "Footer",
        Parent = Window.Background,
        BackgroundColor3 = Library.Theme.GameFooter,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 1, 1, -21),
        Size = UDim2.new(1, -2, 0, 21)
    })
    
    Window.GameName = CreateInstance("TextLabel", {
        Name = "GameName",
        Parent = Window.Footer,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 150, 1, 0),
        Font = Enum.Font.SourceSansSemibold,
        Text = "Game Name Here",
        TextColor3 = Library.Theme.Accent,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    Window.UserStatus = CreateInstance("TextLabel", {
        Name = "UserStatus",
        Parent = Window.Footer,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -94, 0, 0),
        Size = UDim2.new(0, 94, 1, 0),
        Font = Enum.Font.SourceSansSemibold,
        Text = "Premium",
        TextColor3 = Library.Theme.Accent,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Right
    })
    
    -- Dragging functionality
    local function UpdateDrag(input)
        if Window.Dragging then
            local delta = input.Position - Window.DragStart
            Window.Background.Position = UDim2.new(Window.StartPos.X.Scale, Window.StartPos.X.Offset + delta.X, 
                                                 Window.StartPos.Y.Scale, Window.StartPos.Y.Offset + delta.Y)
        end
    end
    
    Window.Topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Window.Dragging = true
            Window.DragStart = input.Position
            Window.StartPos = Window.Background.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(UpdateDrag)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Window.Dragging = false
        end
    end)
    
    -- Tab Functions
    function Window:CreateTab(name)
        local Tab = {
            Name = name,
            Button = nil,
            Selected = false,
            Sections = {}
        }
        
        -- Tab Button
        Tab.Button = CreateInstance("TextButton", {
            Name = "TabButton",
            Parent = Window.TabsHolder,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 50, 0, 32),
            Font = Enum.Font.SourceSansSemibold,
            Text = name,
            TextColor3 = Library.Theme.TextDark,
            TextSize = 14,
            AutoButtonColor = false
        })
        
        -- Selected Line
        Tab.SelectedLine = CreateInstance("Frame", {
            Name = "SelectedLine",
            Parent = Tab.Button,
            BackgroundColor3 = Library.Theme.Accent,
            BorderSizePixel = 0,
            Position = UDim2.new(0, -3, 1, 0),
            Size = UDim2.new(1, 6, 0, 2),
            Visible = false
        })
        
        -- Line Glow
        Tab.LineGlow = CreateInstance("Frame", {
            Name = "LineGlow",
            Parent = Tab.Button,
            BackgroundColor3 = Library.Theme.Accent,
            BackgroundTransparency = 0.9,
            BorderSizePixel = 0,
            Position = UDim2.new(0, -3, 0, -1),
            Size = UDim2.new(1, 6, 1, 0),
            Visible = false
        })
        
        CreateInstance("UIGradient", {
            Parent = Tab.LineGlow,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Accent),
                ColorSequenceKeypoint.new(1, Library.Theme.Accent)
            },
            Rotation = 90,
            Transparency = NumberSequence.new{
                NumberSequenceKeypoint.new(0, 1),
                NumberSequenceKeypoint.new(0.5, 0),
                NumberSequenceKeypoint.new(1, 1)
            }
        })
        
        Tab.Button.MouseButton1Click:Connect(function()
            Window:SelectTab(Tab)
        end)
        
        Tab.Button.MouseEnter:Connect(function()
            if not Tab.Selected then
                Tween(Tab.Button, {TextColor3 = Library.Theme.Text}, 0.15)
            end
        end)
        
        Tab.Button.MouseLeave:Connect(function()
            if not Tab.Selected then
                Tween(Tab.Button, {TextColor3 = Library.Theme.TextDark}, 0.15)
            end
        end)
        
        function Tab:CreateSection(name, side)
            local Section = {
                Name = name,
                Side = side or "Left",
                Elements = {}
            }
            
            local parent = Section.Side == "Left" and Window.Section1 or Window.Section2
            
            -- Section Frame
            Section.Frame = CreateInstance("Frame", {
                Name = "Section",
                Parent = parent,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 100),
                AutomaticSize = Enum.AutomaticSize.Y,
                LayoutOrder = #Tab.Sections + 1
            })
            
            -- Section Background
            Section.Background = CreateInstance("Frame", {
                Name = "Background",
                Parent = Section.Frame,
                BackgroundColor3 = Library.Theme.SectionBg,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 9),
                Size = UDim2.new(1, 0, 1, -9)
            })
            AddCorner(Section.Background, 3)
            
            -- Title Background
            Section.TitleBg = CreateInstance("Frame", {
                Name = "TitleBg",
                Parent = Section.Frame,
                BackgroundColor3 = Library.Theme.SectionBg,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 15)
            })
            
            -- Title Filler
            Section.TitleFiller = CreateInstance("Frame", {
                Name = "TitleFiller",
                Parent = Section.TitleBg,
                BackgroundColor3 = Library.Theme.SectionBg,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, -10),
                Size = UDim2.new(1, 0, 0, 10)
            })
            AddCorner(Section.TitleFiller, 3)
            
            -- Section Title
            Section.Title = CreateInstance("TextLabel", {
                Name = "Title",
                Parent = Section.TitleBg,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 7, 0, -7),
                Size = UDim2.new(0, 200, 0, 22),
                Font = Enum.Font.SourceSansSemibold,
                Text = name,
                TextColor3 = Library.Theme.Accent,
                TextSize = 15,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            -- Content Holder
            Section.Content = CreateInstance("Frame", {
                Name = "Content",
                Parent = Section.Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 3, 0, 37),
                Size = UDim2.new(1, -6, 1, -40),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            CreateInstance("UIListLayout", {
                Parent = Section.Content,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 7)
            })
            
            -- Element Functions
            function Section:CreateToggle(config)
                config = config or {}
                local name = config.Name or "Toggle"
                local default = config.Default or false
                local flag = config.Flag
                local callback = config.Callback or function() end
                
                local Toggle = {
                    Enabled = default,
                    Flag = flag
                }
                
                -- Toggle Frame
                Toggle.Frame = CreateInstance("Frame", {
                    Name = "Toggle",
                    Parent = Section.Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 18)
                })
                
                -- Toggle Button
                Toggle.Button = CreateInstance("TextButton", {
                    Name = "Button",
                    Parent = Toggle.Frame,
                    BackgroundColor3 = Toggle.Enabled and Library.Theme.ToggleEnabled or Library.Theme.ToggleDisabled,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 6, 0, 0),
                    Size = UDim2.new(0, 18, 0, 18),
                    Text = "",
                    AutoButtonColor = false
                })
                AddCorner(Toggle.Button, 3)
                
                -- Checkmark
                Toggle.Checkmark = CreateInstance("ImageLabel", {
                    Name = "Checkmark",
                    Parent = Toggle.Button,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 2, 0, 2),
                    Size = UDim2.new(0, 13, 0, 13),
                    Image = "http://www.roblox.com/asset/?id=6031094667",
                    ImageColor3 = Color3.fromRGB(0, 0, 0),
                    Visible = Toggle.Enabled
                })
                
                -- Toggle Label
                Toggle.Label = CreateInstance("TextLabel", {
                    Name = "Label",
                    Parent = Toggle.Frame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 32, 0, -1),
                    Size = UDim2.new(1, -32, 1, 0),
                    Font = Enum.Font.SourceSansSemibold,
                    Text = name,
                    TextColor3 = Toggle.Enabled and Library.Theme.Text or Library.Theme.TextDark,
                    TextSize = 15,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                function Toggle:SetValue(value)
                    self.Enabled = value
                    
                    Tween(self.Button, {
                        BackgroundColor3 = value and Library.Theme.ToggleEnabled or Library.Theme.ToggleDisabled
                    }, 0.15)
                    
                    Tween(self.Label, {
                        TextColor3 = value and Library.Theme.Text or Library.Theme.TextDark
                    }, 0.15)
                    
                    self.Checkmark.Visible = value
                    
                    if self.Flag then
                        Library.Flags[self.Flag] = value
                    end
                    
                    callback(value)
                end
                
                Toggle.Button.MouseButton1Click:Connect(function()
                    Toggle:SetValue(not Toggle.Enabled)
                end)
                
                if flag then
                    Library.Flags[flag] = Toggle.Enabled
                    Library.Options[flag] = Toggle
                end
                
                table.insert(Section.Elements, Toggle)
                return Toggle
            end
            
            function Section:CreateSlider(config)
                config = config or {}
                local name = config.Name or "Slider"
                local min = config.Min or 0
                local max = config.Max or 100
                local default = config.Default or min
                local increment = config.Increment or 1
                local suffix = config.Suffix or ""
                local flag = config.Flag
                local callback = config.Callback or function() end
                
                local Slider = {
                    Value = default,
                    Min = min,
                    Max = max,
                    Increment = increment,
                    Suffix = suffix,
                    Flag = flag,
                    Dragging = false
                }
                
                -- Slider Frame
                Slider.Frame = CreateInstance("Frame", {
                    Name = "Slider",
                    Parent = Section.Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 32)
                })
                
                -- Slider Label
                Slider.Label = CreateInstance("TextLabel", {
                    Name = "Label",
                    Parent = Slider.Frame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 2, 0, 1),
                    Size = UDim2.new(1, -50, 0, 19),
                    Font = Enum.Font.SourceSansSemibold,
                    Text = name,
                    TextColor3 = Library.Theme.TextDark,
                    TextSize = 15,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextYAlignment = Enum.TextYAlignment.Top
                })
                
                -- Slider Track
                Slider.Track = CreateInstance("Frame", {
                    Name = "Track",
                    Parent = Slider.Frame,
                    BackgroundColor3 = Library.Theme.ToggleDisabled,
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 1, -6),
                    Size = UDim2.new(1, -4, 0, 2)
                })
                
                -- Slider Fill
                Slider.Fill = CreateInstance("Frame", {
                    Name = "Fill",
                    Parent = Slider.Track,
                    BackgroundColor3 = Library.Theme.Accent,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 3),
                    Size = UDim2.new(0.3, 0, 0, 4),
                    ZIndex = 2
                })
                AddCorner(Slider.Fill, 2)
                
                -- Slider Head
                Slider.Head = CreateInstance("TextButton", {
                    Name = "Head",
                    Parent = Slider.Fill,
                    BackgroundColor3 = Color3.fromRGB(54, 54, 54),
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -5, 0, -3),
                    Size = UDim2.new(0, 10, 0, 10),
                    Text = "",
                    AutoButtonColor = false
                })
                AddCorner(Slider.Head, 10)
                
                -- Slider Value
                Slider.ValueBox = CreateInstance("TextBox", {
                    Name = "ValueBox",
                    Parent = Slider.Frame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -50, 0, 0),
                    Size = UDim2.new(0, 50, 0, 19),
                    Font = Enum.Font.SourceSansSemibold,
                    PlaceholderColor3 = Library.Theme.TextDark,
                    PlaceholderText = tostring(default) .. suffix,
                    Text = "",
                    TextColor3 = Library.Theme.TextDark,
                    TextSize = 16,
                    TextXAlignment = Enum.TextXAlignment.Right
                })
                
                function Slider:SetValue(value, nocallback)
                    value = math.clamp(math.floor((value / self.Increment) + 0.5) * self.Increment, self.Min, self.Max)
                    self.Value = value
                    
                    local percentage = (value - self.Min) / (self.Max - self.Min)
                    
                    Tween(self.Fill, {Size = UDim2.new(percentage, 0, 0, 4)}, 0.1)
                    
                    self.ValueBox.Text = tostring(value) .. self.Suffix
                    
                    if self.Flag then
                        Library.Flags[self.Flag] = value
                    end
                    
                    if not nocallback then
                        callback(value)
                    end
                end
                
                local function UpdateSlider(input)
                    if Slider.Dragging then
                        local percentage = math.clamp((input.Position.X - Slider.Track.AbsolutePosition.X) / Slider.Track.AbsoluteSize.X, 0, 1)
                        local value = Slider.Min + (Slider.Max - Slider.Min) * percentage
                        Slider:SetValue(value)
                    end
                end
                
                Slider.Head.MouseButton1Down:Connect(function()
                    Slider.Dragging = true
                    Library.DraggingSlider = Slider
                end)
                
                Slider.Track.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Slider.Dragging = true
                        Library.DraggingSlider = Slider
                        UpdateSlider(input)
                    end
                end)
                
                UserInputService.InputChanged:Connect(UpdateSlider)
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Slider.Dragging = false
                        Library.DraggingSlider = nil
                    end
                end)
                
                Slider.ValueBox.FocusLost:Connect(function()
                    local newValue = tonumber(Slider.ValueBox.Text:gsub(Slider.Suffix, ""))
                    if newValue then
                        Slider:SetValue(newValue)
                    else
                        Slider.ValueBox.Text = tostring(Slider.Value) .. Slider.Suffix
                    end
                end)
                
                Slider:SetValue(default, true)
                
                if flag then
                    Library.Flags[flag] = Slider.Value
                    Library.Options[flag] = Slider
                end
                
                table.insert(Section.Elements, Slider)
                return Slider
            end
            
            function Section:CreateDropdown(config)
                config = config or {}
                local name = config.Name or "Dropdown"
                local options = config.Options or {}
                local default = config.Default or "None"
                local flag = config.Flag
                local callback = config.Callback or function() end
                
                local Dropdown = {
                    Selected = default,
                    Options = options,
                    Flag = flag,
                    Open = false
                }
                
                -- Dropdown Frame
                Dropdown.Frame = CreateInstance("Frame", {
                    Name = "Dropdown",
                    Parent = Section.Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 40),
                    ClipsDescendants = true
                })
                
                -- Dropdown Label
                Dropdown.Label = CreateInstance("TextLabel", {
                    Name = "Label",
                    Parent = Dropdown.Frame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 2, 0, 2),
                    Size = UDim2.new(1, -4, 0, 16),
                    Font = Enum.Font.SourceSansSemibold,
                    Text = name,
                    TextColor3 = Library.Theme.TextDark,
                    TextSize = 15,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                -- Dropdown Button
                Dropdown.Button = CreateInstance("TextButton", {
                    Name = "Button",
                    Parent = Dropdown.Frame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 20),
                    Size = UDim2.new(1, -4, 0, 20),
                    Font = Enum.Font.SourceSansSemibold,
                    Text = " " .. default,
                    TextColor3 = Library.Theme.TextDark,
                    TextSize = 15,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    AutoButtonColor = false
                })
                
                -- Arrow
                Dropdown.Arrow = CreateInstance("ImageLabel", {
                    Name = "Arrow",
                    Parent = Dropdown.Button,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -20, 0, 0),
                    Size = UDim2.new(0, 20, 0, 20),
                    Image = "http://www.roblox.com/asset/?id=6034818372",
                    ImageColor3 = Library.Theme.TextDark
                })
                
                -- Dropdown List
                Dropdown.List = CreateInstance("Frame", {
                    Name = "List",
                    Parent = Dropdown.Frame,
                    BackgroundColor3 = Library.Theme.DropdownBg,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 40),
                    Size = UDim2.new(1, -4, 0, 0),
                    Visible = false,
                    ZIndex = 5
                })
                AddCorner(Dropdown.List, 2)
                
                CreateInstance("UIListLayout", {
                    Parent = Dropdown.List,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 1)
                })
                
                function Dropdown:CreateOption(optionName)
                    local Option = CreateInstance("TextButton", {
                        Name = "Option",
                        Parent = self.List,
                        BackgroundTransparency = optionName == self.Selected and 1 or 0,
                        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
                        BorderSizePixel = 0,
                        Size = UDim2.new(1, 0, 0, 16),
                        Font = Enum.Font.SourceSansSemibold,
                        Text = "       " .. optionName,
                        TextColor3 = optionName == self.Selected and Library.Theme.Accent or Library.Theme.TextDark,
                        TextSize = 14,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        AutoButtonColor = false
                    })
                    
                    Option.MouseButton1Click:Connect(function()
                        self:SetValue(optionName)
                        self:Close()
                    end)
                    
                    return Option
                end
                
                function Dropdown:SetValue(value)
                    self.Selected = value
                    self.Button.Text = " " .. value
                    
                    for _, option in pairs(self.List:GetChildren()) do
                        if option:IsA("TextButton") then
                            local optionText = option.Text:gsub("       ", "")
                            option.BackgroundTransparency = optionText == value and 1 or 0
                            option.TextColor3 = optionText == value and Library.Theme.Accent or Library.Theme.TextDark
                        end
                    end
                    
                    if self.Flag then
                        Library.Flags[self.Flag] = value
                    end
                    
                    callback(value)
                end
                
                function Dropdown:Open()
                    self.Open = true
                    local listHeight = #self.Options * 17
                    self.List.Visible = true
                    
                    Tween(self.Frame, {Size = UDim2.new(1, 0, 0, 40 + listHeight)}, 0.15)
                    Tween(self.List, {Size = UDim2.new(1, -4, 0, listHeight)}, 0.15)
                end
                
                function Dropdown:Close()
                    self.Open = false
                    
                    Tween(self.Frame, {Size = UDim2.new(1, 0, 0, 40)}, 0.15)
                    local tween = Tween(self.List, {Size = UDim2.new(1, -4, 0, 0)}, 0.15)
                    tween.Completed:Connect(function()
                        self.List.Visible = false
                    end)
                end
                
                Dropdown.Button.MouseButton1Click:Connect(function()
                    if Dropdown.Open then
                        Dropdown:Close()
                    else
                        if Library.CurrentDropdown and Library.CurrentDropdown ~= Dropdown then
                            Library.CurrentDropdown:Close()
                        end
                        Library.CurrentDropdown = Dropdown
                        Dropdown:Open()
                    end
                end)
                
                -- Create options
                for _, option in pairs(options) do
                    Dropdown:CreateOption(option)
                end
                
                if flag then
                    Library.Flags[flag] = Dropdown.Selected
                    Library.Options[flag] = Dropdown
                end
                
                table.insert(Section.Elements, Dropdown)
                return Dropdown
            end
            
            function Section:CreateColorpicker(config)
                config = config or {}
                local name = config.Name or "Color"
                local default = config.Default or Color3.fromRGB(0, 251, 255)
                local flag = config.Flag
                local callback = config.Callback or function() end
                
                local Colorpicker = {
                    Color = default,
                    Flag = flag
                }
                
                -- Colorpicker Frame
                Colorpicker.Frame = CreateInstance("Frame", {
                    Name = "Colorpicker",
                    Parent = Section.Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20)
                })
                
                -- Colorpicker Label
                Colorpicker.Label = CreateInstance("TextLabel", {
                    Name = "Label",
                    Parent = Colorpicker.Frame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 2, 0, 2),
                    Size = UDim2.new(1, -50, 1, 0),
                    Font = Enum.Font.SourceSansSemibold,
                    Text = name,
                    TextColor3 = Library.Theme.TextDark,
                    TextSize = 15,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                -- Color Display
                Colorpicker.Display = CreateInstance("TextButton", {
                    Name = "Display",
                    Parent = Colorpicker.Frame,
                    BackgroundColor3 = default,
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -35, 0, 3),
                    Size = UDim2.new(0, 32, 0, 13),
                    Text = "",
                    AutoButtonColor = false
                })
                AddCorner(Colorpicker.Display, 3)
                
                function Colorpicker:SetValue(color)
                    self.Color = color
                    self.Display.BackgroundColor3 = color
                    
                    if self.Flag then
                        Library.Flags[self.Flag] = color
                    end
                    
                    callback(color)
                end
                
                Colorpicker.Display.MouseButton1Click:Connect(function()
                    -- Simple color cycling for demo (you'd implement a proper color picker)
                    local colors = {
                        Color3.fromRGB(255, 0, 0),
                        Color3.fromRGB(0, 255, 0),
                        Color3.fromRGB(0, 0, 255),
                        Color3.fromRGB(255, 255, 0),
                        Color3.fromRGB(255, 0, 255),
                        Color3.fromRGB(0, 255, 255),
                        Color3.fromRGB(255, 255, 255)
                    }
                    
                    local currentIndex = 1
                    for i, color in pairs(colors) do
                        if color == Colorpicker.Color then
                            currentIndex = i
                            break
                        end
                    end
                    
                    currentIndex = currentIndex % #colors + 1
                    Colorpicker:SetValue(colors[currentIndex])
                end)
                
                if flag then
                    Library.Flags[flag] = Colorpicker.Color
                    Library.Options[flag] = Colorpicker
                end
                
                table.insert(Section.Elements, Colorpicker)
                return Colorpicker
            end
            
            function Section:CreateLabel(config)
                config = config or {}
                local text = config.Text or "Label"
                
                local Label = CreateInstance("TextLabel", {
                    Name = "Label",
                    Parent = Section.Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Enum.Font.SourceSansSemibold,
                    Text = text,
                    TextColor3 = Library.Theme.TextDark,
                    TextSize = 15,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                return {
                    SetText = function(newText)
                        Label.Text = newText
                    end
                }
            end
            
            function Section:CreateButton(config)
                config = config or {}
                local name = config.Name or "Button"
                local callback = config.Callback or function() end
                
                local Button = CreateInstance("TextButton", {
                    Name = "Button",
                    Parent = Section.Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30),
                    Font = Enum.Font.SourceSansSemibold,
                    Text = name,
                    TextColor3 = Library.Theme.Text,
                    TextSize = 15,
                    AutoButtonColor = false
                })
                
                Button.MouseButton1Click:Connect(callback)
                
                Button.MouseEnter:Connect(function()
                    Tween(Button, {TextColor3 = Library.Theme.Accent}, 0.15)
                end)
                
                Button.MouseLeave:Connect(function()
                    Tween(Button, {TextColor3 = Library.Theme.Text}, 0.15)
                end)
                
                return {
                    SetText = function(text)
                        Button.Text = text
                    end
                }
            end
            
            table.insert(Tab.Sections, Section)
            return Section
        end
        
        table.insert(Window.Tabs, Tab)
        
        -- Select first tab by default
        if #Window.Tabs == 1 then
            Window:SelectTab(Tab)
        end
        
        return Tab
    end
    
    function Window:SelectTab(tab)
        -- Hide all tabs
        for _, t in pairs(self.Tabs) do
            t.Selected = false
            t.Button.TextColor3 = Library.Theme.TextDark
            t.SelectedLine.Visible = false
            t.LineGlow.Visible = false
            
            -- Hide sections
            for _, section in pairs(t.Sections) do
                section.Frame.Visible = false
            end
        end
        
        -- Show selected tab
        tab.Selected = true
        tab.Button.TextColor3 = Library.Theme.Accent
        tab.SelectedLine.Visible = true
        tab.LineGlow.Visible = true
        
        -- Show sections
        for _, section in pairs(tab.Sections) do
            section.Frame.Visible = true
        end
        
        self.CurrentTab = tab
    end
    
    function Window:SetVisible(visible)
        self.Background.Visible = visible
    end
    
    function Window:Destroy()
        self.Background:Destroy()
    end
    
    table.insert(Library.Windows, Window)
    return Window
end

function Library:GetFlag(flag)
    return self.Flags[flag]
end

function Library:SetFlag(flag, value)
    if self.Options[flag] and self.Options[flag].SetValue then
        self.Options[flag]:SetValue(value)
    else
        self.Flags[flag] = value
    end
end

function Library:Destroy()
    ScreenGui:Destroy()
    for _, connection in pairs(self.Connections) do
        connection:Disconnect()
    end
    table.clear(self.Windows)
    table.clear(self.Flags)
    table.clear(self.Options)
    table.clear(self.Connections)
end

return Library
