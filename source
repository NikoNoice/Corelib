-- O Bee City UI Library - Overhauled Version
-- Version: 2.0
-- Fixed alignment, consistency, and structure issues

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local Library = {}
Library.__index = Library

-- Default theme colors
local Theme = {
    Background = Color3.fromRGB(17, 16, 24),
    Topbar = Color3.fromRGB(28, 28, 33),
    SectionBackground = Color3.fromRGB(28, 28, 33),
    Accent = Color3.fromRGB(66, 255, 249),
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(124, 121, 125),
    DisabledText = Color3.fromRGB(111, 108, 112),
    Divider = Color3.fromRGB(36, 36, 43),
    ToggleStroke = Color3.fromRGB(36, 36, 43)
}

-- Utility Functions
local function CreateTween(object, properties, duration, easingStyle, easingDirection)
    duration = duration or 0.3
    easingStyle = easingStyle or Enum.EasingStyle.Quad
    easingDirection = easingDirection or Enum.EasingDirection.Out
    
    local tween = TweenService:Create(object, TweenInfo.new(duration, easingStyle, easingDirection), properties)
    return tween
end

local function CreateCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 3)
    corner.Parent = parent
    return corner
end

local function CreateStroke(parent, color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or Theme.Divider
    stroke.Thickness = thickness or 1
    stroke.Parent = parent
    return stroke
end

-- Layout Constants
local LAYOUT = {
    WINDOW_SIZE = Vector2.new(470, 581),
    SECTION_WIDTH = 225,
    SECTION_PADDING = 15,
    ELEMENT_PADDING = 7,
    ELEMENT_HEIGHT = {
        TOGGLE = 18,
        SLIDER = 32,
        DROPDOWN = 40,
        BUTTON = 30,
        KEYBIND = 20,
        COLORPICKER = 20,
        LABEL = 20,
        DIVIDER = 3
    },
    MARGINS = {
        SECTION_TOP = 22,
        SECTION_SIDE = 15,
        ELEMENT_SIDE = 10
    }
}

-- Main Library Functions
function Library.new(title, gameName, userStatus)
    local self = setmetatable({}, Library)
    
    self.title = title or "o bee city"
    self.gameName = gameName or "Game Name"
    self.userStatus = userStatus or "Admin"
    self.tabs = {}
    self.currentTab = 1
    self.isVisible = false
    self.keybind = Enum.KeyCode.Insert
    self.dragStart = nil
    self.startPos = nil
    
    self:CreateMainFrame()
    self:SetupKeybind()
    self:SetupDragging()
    
    return self
end

function Library:CreateMainFrame()
    -- Main ScreenGui
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "OBeeCityUI"
    self.ScreenGui.Parent = PlayerGui
    self.ScreenGui.Enabled = false
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Background Frame
    self.Background = Instance.new("Frame")
    self.Background.Name = "Background"
    self.Background.Parent = self.ScreenGui
    self.Background.BackgroundColor3 = Theme.Background
    self.Background.BorderSizePixel = 0
    self.Background.Position = UDim2.new(0.5, -LAYOUT.WINDOW_SIZE.X/2, 0.5, -LAYOUT.WINDOW_SIZE.Y/2)
    self.Background.Size = UDim2.new(0, LAYOUT.WINDOW_SIZE.X, 0, LAYOUT.WINDOW_SIZE.Y)
    CreateCorner(self.Background, 3)
    
    -- Menu Glow Effect
    local menuGlow = Instance.new("ImageLabel")
    menuGlow.Name = "MenuGlow"
    menuGlow.Parent = self.Background
    menuGlow.BackgroundTransparency = 1
    menuGlow.Position = UDim2.new(-0.047, 0, -0.037, 0)
    menuGlow.Size = UDim2.new(0, 513, 0, 623)
    menuGlow.ZIndex = 0
    menuGlow.Image = "rbxassetid://18245826428"
    menuGlow.ImageColor3 = Theme.Accent
    menuGlow.ImageTransparency = 0.74
    menuGlow.ScaleType = Enum.ScaleType.Slice
    menuGlow.SliceCenter = Rect.new(21, 21, 79, 79)
    
    self:CreateTopbar()
    self:CreateUnderBar()
    self:CreateTabContainer()
end

function Library:CreateTopbar()
    -- Topbar
    local topbar = Instance.new("Frame")
    topbar.Name = "Topbar"
    topbar.Parent = self.Background
    topbar.BackgroundColor3 = Theme.Topbar
    topbar.BorderSizePixel = 0
    topbar.Position = UDim2.new(0, 0, 0.01, 0)
    topbar.Size = UDim2.new(0, LAYOUT.WINDOW_SIZE.X, 0, 30)
    
    -- Rounding filler for topbar
    local roundingFiller = Instance.new("Frame")
    roundingFiller.Name = "RoundingFiller"
    roundingFiller.Parent = topbar
    roundingFiller.BackgroundColor3 = Theme.Topbar
    roundingFiller.BorderSizePixel = 0
    roundingFiller.ClipsDescendants = true
    roundingFiller.Position = UDim2.new(0, 0, -0.21, 0)
    roundingFiller.Size = UDim2.new(0, LAYOUT.WINDOW_SIZE.X, 0, 7)
    roundingFiller.ZIndex = 0
    CreateCorner(roundingFiller, 3)
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Parent = topbar
    titleLabel.BackgroundTransparency = 1
    titleLabel.Position = UDim2.new(0.025, 0, -0.2, 0)
    titleLabel.Size = UDim2.new(0, 120, 0, 32)
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Text = self.title
    titleLabel.TextColor3 = Theme.Accent
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Divider line
    local divider = Instance.new("Frame")
    divider.Parent = topbar
    divider.BackgroundColor3 = Theme.Divider
    divider.BorderSizePixel = 0
    divider.Position = UDim2.new(0, 0, 0.957, 0)
    divider.Size = UDim2.new(0, LAYOUT.WINDOW_SIZE.X - 1, 0, 1)
    
    -- Tabs Holder
    self.TabsHolder = Instance.new("Frame")
    self.TabsHolder.Name = "TabsHolder"
    self.TabsHolder.Parent = topbar
    self.TabsHolder.BackgroundTransparency = 1
    self.TabsHolder.Position = UDim2.new(0.506, 0, -0.176, 0)
    self.TabsHolder.Size = UDim2.new(0, 232, 0, 36)
    
    local tabLayout = Instance.new("UIListLayout")
    tabLayout.Parent = self.TabsHolder
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Padding = UDim.new(0, 8)
end

function Library:CreateUnderBar()
    local underBar = Instance.new("Frame")
    underBar.Name = "UnderBar"
    underBar.Parent = self.Background
    underBar.BackgroundColor3 = Theme.Topbar
    underBar.BorderSizePixel = 0
    underBar.Position = UDim2.new(0.002, 0, 0.964, 0)
    underBar.Size = UDim2.new(0, LAYOUT.WINDOW_SIZE.X - 2, 0, 21)
    
    local gameNameLabel = Instance.new("TextLabel")
    gameNameLabel.Name = "GameName"
    gameNameLabel.Parent = underBar
    gameNameLabel.BackgroundTransparency = 1
    gameNameLabel.Position = UDim2.new(0, 5, 0, 0)
    gameNameLabel.Size = UDim2.new(0, 150, 0, 21)
    gameNameLabel.Font = Enum.Font.SourceSansSemibold
    gameNameLabel.Text = self.gameName
    gameNameLabel.TextColor3 = Theme.Accent
    gameNameLabel.TextSize = 14
    gameNameLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    local userStatusLabel = Instance.new("TextLabel")
    userStatusLabel.Name = "UserStatus"
    userStatusLabel.Parent = underBar
    userStatusLabel.BackgroundTransparency = 1
    userStatusLabel.Position = UDim2.new(1, -99, 0, 0)
    userStatusLabel.Size = UDim2.new(0, 94, 0, 21)
    userStatusLabel.Font = Enum.Font.SourceSansSemibold
    userStatusLabel.Text = self.userStatus
    userStatusLabel.TextColor3 = Theme.Accent
    userStatusLabel.TextSize = 14
    userStatusLabel.TextXAlignment = Enum.TextXAlignment.Right
end

function Library:CreateTabContainer()
    self.TabContainer = Instance.new("Frame")
    self.TabContainer.Name = "TabContainer"
    self.TabContainer.Parent = self.Background
    self.TabContainer.BackgroundTransparency = 1
    self.TabContainer.Position = UDim2.new(0, 0, 0.073, 0)
    self.TabContainer.Size = UDim2.new(1, 0, 0, 520)
    
    -- Create scroll frame for tab content
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "ContentScroll"
    scrollFrame.Parent = self.TabContainer
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.Size = UDim2.new(1, 0, 1, 0)
    scrollFrame.ScrollBarThickness = 0
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    
    self.ContentScroll = scrollFrame
end

function Library:SetupDragging()
    local dragToggle = nil
    local dragSpeed = 0.25
    local dragStart = nil
    local startPos = nil
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        CreateTween(self.Background, {Position = position}, dragSpeed):Play()
    end
    
    self.Background.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragToggle = true
            dragStart = input.Position
            startPos = self.Background.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragToggle then
            updateInput(input)
        end
    end)
end

function Library:CreateTab(name)
    local tabIndex = #self.tabs + 1
    local tab = {
        name = name,
        index = tabIndex,
        sections = {},
        frame = nil,
        button = nil,
        visible = tabIndex == 1,
        leftSections = {},
        rightSections = {}
    }
    
    -- Create tab button
    local tabButton = Instance.new("TextLabel")
    tabButton.Name = "TabButton" .. tabIndex
    tabButton.Parent = self.TabsHolder
    tabButton.BackgroundTransparency = 1
    tabButton.Size = UDim2.new(0, 50, 0, 32)
    tabButton.Font = Enum.Font.SourceSansSemibold
    tabButton.Text = name
    tabButton.TextSize = 14
    tabButton.LayoutOrder = tabIndex
    
    -- Selected line and glow
    local selectedLine = Instance.new("Frame")
    selectedLine.Name = "SelectedLine"
    selectedLine.Parent = tabButton
    selectedLine.BackgroundColor3 = Theme.Accent
    selectedLine.BorderSizePixel = 0
    selectedLine.Position = UDim2.new(-0.06, 0, 1, 0)
    selectedLine.Size = UDim2.new(0, 55, 0, 2)
    selectedLine.Visible = tabIndex == 1
    
    local lineGlow = Instance.new("Frame")
    lineGlow.Name = "LineGlow"
    lineGlow.Parent = tabButton
    lineGlow.BackgroundTransparency = 0.9
    lineGlow.BorderSizePixel = 0
    lineGlow.Position = UDim2.new(-0.06, 0, -0.022, 0)
    lineGlow.Size = UDim2.new(0, 55, 0, 32)
    lineGlow.Visible = tabIndex == 1
    
    local glowGradient = Instance.new("UIGradient")
    glowGradient.Color = ColorSequence.new(Theme.Accent)
    glowGradient.Rotation = 90
    glowGradient.Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 1),
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(1, 0)
    }
    glowGradient.Parent = lineGlow
    
    -- Tab frame
    local tabFrame = Instance.new("Frame")
    tabFrame.Name = "Tab" .. tabIndex
    tabFrame.Parent = self.TabContainer
    tabFrame.BackgroundTransparency = 1
    tabFrame.Size = UDim2.new(1, 0, 1, 0)
    tabFrame.Visible = tabIndex == 1
    
    -- Create left and right column holders
    local leftColumn = Instance.new("Frame")
    leftColumn.Name = "LeftColumn"
    leftColumn.Parent = tabFrame
    leftColumn.BackgroundTransparency = 1
    leftColumn.Position = UDim2.new(0, 11, 0, 0)
    leftColumn.Size = UDim2.new(0, LAYOUT.SECTION_WIDTH, 1, 0)
    
    local rightColumn = Instance.new("Frame")
    rightColumn.Name = "RightColumn"
    rightColumn.Parent = tabFrame
    rightColumn.BackgroundTransparency = 1
    rightColumn.Position = UDim2.new(0, 11 + LAYOUT.SECTION_WIDTH + 9, 0, 0)
    rightColumn.Size = UDim2.new(0, LAYOUT.SECTION_WIDTH, 1, 0)
    
    -- Add UIListLayouts for automatic positioning
    local leftLayout = Instance.new("UIListLayout")
    leftLayout.Parent = leftColumn
    leftLayout.SortOrder = Enum.SortOrder.LayoutOrder
    leftLayout.Padding = UDim.new(0, LAYOUT.SECTION_PADDING)
    
    local rightLayout = Instance.new("UIListLayout")
    rightLayout.Parent = rightColumn
    rightLayout.SortOrder = Enum.SortOrder.LayoutOrder
    rightLayout.Padding = UDim.new(0, LAYOUT.SECTION_PADDING)
    
    tab.leftColumn = leftColumn
    tab.rightColumn = rightColumn
    tab.leftLayout = leftLayout
    tab.rightLayout = rightLayout
    
    -- Tab click detection
    local clickDetector = Instance.new("TextButton")
    clickDetector.Parent = tabButton
    clickDetector.BackgroundTransparency = 1
    clickDetector.Size = UDim2.new(1, 0, 1, 0)
    clickDetector.Text = ""
    clickDetector.MouseButton1Click:Connect(function()
        self:SwitchTab(tabIndex)
    end)
    
    tab.frame = tabFrame
    tab.button = tabButton
    tab.selectedLine = selectedLine
    tab.lineGlow = lineGlow
    
    table.insert(self.tabs, tab)
    self:UpdateTabColors()
    
    return setmetatable({
        tab = tab,
        library = self
    }, {__index = self:GetTabMethods()})
end

function Library:GetTabMethods()
    local methods = {}
    
    function methods:CreateSection(name)
        local section = {
            name = name,
            elements = {},
            frame = nil,
            elementsCount = 0
        }
        
        -- Determine which side has fewer sections
        local useLeft = #self.tab.leftSections <= #self.tab.rightSections
        local parentColumn = useLeft and self.tab.leftColumn or self.tab.rightColumn
        local sectionsList = useLeft and self.tab.leftSections or self.tab.rightSections
        
        -- Create section frame
        local sectionFrame = Instance.new("Frame")
        sectionFrame.Name = "Section_" .. name
        sectionFrame.Parent = parentColumn
        sectionFrame.BackgroundTransparency = 1
        sectionFrame.Size = UDim2.new(1, 0, 0, 50)
        sectionFrame.LayoutOrder = #sectionsList + 1
        
        -- Section background with stroke
        local sectionBg = Instance.new("Frame")
        sectionBg.Name = "SectionBackground"
        sectionBg.Parent = sectionFrame
        sectionBg.BackgroundColor3 = Theme.Background
        sectionBg.BorderSizePixel = 0
        sectionBg.Position = UDim2.new(0, 0, 0, LAYOUT.MARGINS.SECTION_TOP)
        sectionBg.Size = UDim2.new(1, 0, 1, -LAYOUT.MARGINS.SECTION_TOP)
        CreateCorner(sectionBg, 3)
        CreateStroke(sectionBg, Theme.ToggleStroke, 1)
        
        -- Section title bar
        local titleBar = Instance.new("Frame")
        titleBar.Name = "TitleBar"
        titleBar.Parent = sectionBg
        titleBar.BackgroundColor3 = Theme.SectionBackground
        titleBar.BorderSizePixel = 0
        titleBar.Position = UDim2.new(0, 0, 0, 0)
        titleBar.Size = UDim2.new(1, 0, 0, 15)
        
        local titleFiller = Instance.new("Frame")
        titleFiller.Name = "TitleFiller"
        titleFiller.Parent = titleBar
        titleFiller.BackgroundColor3 = Theme.SectionBackground
        titleFiller.BorderSizePixel = 0
        titleFiller.Position = UDim2.new(0, 0, -0.667, 0)
        titleFiller.Size = UDim2.new(1, 0, 0, 10)
        CreateCorner(titleFiller, 3)
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Parent = titleBar
        titleLabel.BackgroundTransparency = 1
        titleLabel.Position = UDim2.new(0, LAYOUT.MARGINS.ELEMENT_SIDE, -0.467, 0)
        titleLabel.Size = UDim2.new(1, -LAYOUT.MARGINS.ELEMENT_SIDE * 2, 0, 22)
        titleLabel.Font = Enum.Font.SourceSansSemibold
        titleLabel.Text = name
        titleLabel.TextColor3 = Theme.Accent
        titleLabel.TextSize = 15
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        
        -- Section content holder
        local contentHolder = Instance.new("Frame")
        contentHolder.Name = "ContentHolder"
        contentHolder.Parent = sectionFrame
        contentHolder.BackgroundTransparency = 1
        contentHolder.Position = UDim2.new(0, LAYOUT.MARGINS.ELEMENT_SIDE, 0, LAYOUT.MARGINS.SECTION_TOP + 20)
        contentHolder.Size = UDim2.new(1, -LAYOUT.MARGINS.ELEMENT_SIDE * 2, 1, -(LAYOUT.MARGINS.SECTION_TOP + 30))
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.Parent = contentHolder
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, LAYOUT.ELEMENT_PADDING)
        
        -- Auto-scaling functionality
        local function updateSectionSize()
            local contentSize = contentLayout.AbsoluteContentSize.Y
            local newHeight = math.max(50, contentSize + LAYOUT.MARGINS.SECTION_TOP + 30)
            
            sectionFrame.Size = UDim2.new(1, 0, 0, newHeight)
            sectionBg.Size = UDim2.new(1, 0, 0, newHeight - LAYOUT.MARGINS.SECTION_TOP)
            contentHolder.Size = UDim2.new(1, -LAYOUT.MARGINS.ELEMENT_SIDE * 2, 0, contentSize)
        end
        
        contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateSectionSize)
        
        section.frame = sectionFrame
        section.contentHolder = contentHolder
        section.updateSize = updateSectionSize
        section.sectionBg = sectionBg
        
        table.insert(sectionsList, section)
        table.insert(self.tab.sections, section)
        
        return setmetatable({
            section = section,
            tab = self.tab,
            library = self.library
        }, {__index = self.library:GetSectionMethods()})
    end
    
    return methods
end

function Library:GetSectionMethods()
    local methods = {}
    
    function methods:CreateToggle(name, default, callback)
        default = default or false
        callback = callback or function() end
        
        local toggleFrame = Instance.new("TextButton")
        toggleFrame.Name = "Toggle_" .. name
        toggleFrame.Parent = self.section.contentHolder
        toggleFrame.BackgroundColor3 = default and Theme.Accent or Color3.fromRGB(255, 255, 255)
        toggleFrame.BackgroundTransparency = default and 0 or 1
        toggleFrame.BorderSizePixel = 0
        toggleFrame.Size = UDim2.new(0, LAYOUT.ELEMENT_HEIGHT.TOGGLE, 0, LAYOUT.ELEMENT_HEIGHT.TOGGLE)
        toggleFrame.Text = ""
        toggleFrame.LayoutOrder = self.section.elementsCount + 1
        CreateCorner(toggleFrame, 3)
        CreateStroke(toggleFrame, default and Theme.Accent or Theme.ToggleStroke, 1)
        
        local checkmark = Instance.new("ImageLabel")
        checkmark.Name = "Checkmark"
        checkmark.Parent = toggleFrame
        checkmark.BackgroundTransparency = 1
        checkmark.Position = UDim2.new(0.111, 0, 0.111, 0)
        checkmark.Size = UDim2.new(0, 13, 0, 13)
        checkmark.Image = "http://www.roblox.com/asset/?id=6031094667"
        checkmark.ImageColor3 = Color3.fromRGB(0, 0, 0)
        checkmark.Visible = default
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Name = "Title"
        titleLabel.Parent = toggleFrame
        titleLabel.BackgroundTransparency = 1
        titleLabel.Position = UDim2.new(1.461, 0, -0.056, 0)
        titleLabel.Size = UDim2.new(0, 150, 0, 20)
        titleLabel.Font = Enum.Font.SourceSansSemibold
        titleLabel.Text = name
        titleLabel.TextColor3 = default and Theme.Text or Theme.SubText
        titleLabel.TextSize = 15
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        
        local state = default
        self.section.elementsCount = self.section.elementsCount + 1
        
        toggleFrame.MouseButton1Click:Connect(function()
            state = not state
            
            local bgTween = CreateTween(toggleFrame, {
                BackgroundColor3 = state and Theme.Accent or Color3.fromRGB(255, 255, 255),
                BackgroundTransparency = state and 0 or 1
            }, 0.2)
            
            local strokeTween = CreateTween(toggleFrame.UIStroke, {
                Color = state and Theme.Accent or Theme.ToggleStroke
            }, 0.2)
            
            local textTween = CreateTween(titleLabel, {
                TextColor3 = state and Theme.Text or Theme.SubText
            }, 0.2)
            
            checkmark.Visible = state
            bgTween:Play()
            strokeTween:Play()
            textTween:Play()
            
            callback(state)
        end)
        
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return {
            SetValue = function(value)
                state = value
                toggleFrame.BackgroundColor3 = state and Theme.Accent or Color3.fromRGB(255, 255, 255)
                toggleFrame.BackgroundTransparency = state and 0 or 1
                toggleFrame.UIStroke.Color = state and Theme.Accent or Theme.ToggleStroke
                titleLabel.TextColor3 = state and Theme.Text or Theme.SubText
                checkmark.Visible = state
            end,
            GetValue = function()
                return state
            end
        }
    end
    
    function methods:CreateSlider(name, min, max, default, callback)
        min = min or 0
        max = max or 1
        default = default or min
        callback = callback or function() end
        
        local sliderFrame = Instance.new("Frame")
        sliderFrame.Name = "Slider_" .. name
        sliderFrame.Parent = self.section.contentHolder
        sliderFrame.BackgroundTransparency = 1
        sliderFrame.Size = UDim2.new(1, 0, 0, LAYOUT.ELEMENT_HEIGHT.SLIDER)
        sliderFrame.LayoutOrder = self.section.elementsCount + 1
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Parent = sliderFrame
        titleLabel.BackgroundTransparency = 1
        titleLabel.Size = UDim2.new(0, 150, 0, 19)
        titleLabel.Font = Enum.Font.SourceSansSemibold
        titleLabel.Text = name
        titleLabel.TextColor3 = Theme.SubText
        titleLabel.TextSize = 15
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        titleLabel.TextYAlignment = Enum.TextYAlignment.Top
        
        local valueBox = Instance.new("TextBox")
        valueBox.Parent = sliderFrame
        valueBox.BackgroundTransparency = 1
        valueBox.Position = UDim2.new(1, -50, 0, 0)
        valueBox.Size = UDim2.new(0, 50, 0, 19)
        valueBox.Font = Enum.Font.SourceSansSemibold
        valueBox.PlaceholderText = tostring(default)
        valueBox.Text = tostring(default)
        valueBox.TextColor3 = Theme.DisabledText
        valueBox.TextSize = 16
        valueBox.TextXAlignment = Enum.TextXAlignment.Right
        
        -- Slider track
        local sliderTrack = Instance.new("Frame")
        sliderTrack.Name = "Track"
        sliderTrack.Parent = sliderFrame
        sliderTrack.BackgroundColor3 = Theme.ToggleStroke
        sliderTrack.BorderSizePixel = 0
        sliderTrack.Position = UDim2.new(0, 0, 0, 22)
        sliderTrack.Size = UDim2.new(1, -5, 0, 2)
        
        local sliderFill = Instance.new("Frame")
        sliderFill.Name = "Fill"
        sliderFill.Parent = sliderTrack
        sliderFill.BackgroundColor3 = Theme.Accent
        sliderFill.BorderSizePixel = 0
        sliderFill.Position = UDim2.new(0, 0, -1, 0)
        sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 0, 4)
        sliderFill.ZIndex = 2
        CreateCorner(sliderFill, 2)
        
        local sliderHead = Instance.new("TextButton")
        sliderHead.Name = "Head"
        sliderHead.Parent = sliderFill
        sliderHead.BackgroundColor3 = Color3.fromRGB(54, 54, 54)
        sliderHead.BorderSizePixel = 0
        sliderHead.Position = UDim2.new(1, -5, -0.75, 0)
        sliderHead.Size = UDim2.new(0, 10, 0, 10)
        sliderHead.Text = ""
        CreateCorner(sliderHead, 10)
        
        local value = default
        local dragging = false
        self.section.elementsCount = self.section.elementsCount + 1
        
        local function updateSlider(newValue)
            newValue = math.clamp(newValue, min, max)
            value = newValue
            
            local percentage = (value - min) / (max - min)
            sliderFill.Size = UDim2.new(percentage, 0, 0, 4)
            valueBox.Text = string.format("%.3f", value)
            
            callback(value)
        end
        
        sliderHead.MouseButton1Down:Connect(function()
            dragging = true
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local mousePos = input.Position
                local sliderPos = sliderTrack.AbsolutePosition
                local sliderSize = sliderTrack.AbsoluteSize
                
                local percentage = math.clamp((mousePos.X - sliderPos.X) / sliderSize.X, 0, 1)
                local newValue = min + (max - min) * percentage
                updateSlider(newValue)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        valueBox.FocusLost:Connect(function()
            local newValue = tonumber(valueBox.Text)
            if newValue then
                updateSlider(newValue)
            else
                valueBox.Text = string.format("%.3f", value)
            end
        end)
        
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return {
            SetValue = function(newValue)
                updateSlider(newValue)
            end,
            GetValue = function()
                return value
            end
        }
    end
    
    function methods:CreateButton(name, callback)
        callback = callback or function() end
        
        local buttonFrame = Instance.new("TextButton")
        buttonFrame.Name = "Button_" .. name
        buttonFrame.Parent = self.section.contentHolder
        buttonFrame.BackgroundTransparency = 1
        buttonFrame.Size = UDim2.new(1, 0, 0, LAYOUT.ELEMENT_HEIGHT.BUTTON)
        buttonFrame.Font = Enum.Font.SourceSansSemibold
        buttonFrame.Text = name
        buttonFrame.TextColor3 = Theme.Text
        buttonFrame.TextSize = 15
        buttonFrame.LayoutOrder = self.section.elementsCount + 1
        CreateStroke(buttonFrame, Theme.ToggleStroke, 1)
        CreateCorner(buttonFrame, 3)
        
        local isAnimating = false
        self.section.elementsCount = self.section.elementsCount + 1
        
        buttonFrame.MouseButton1Click:Connect(function()
            if isAnimating then return end
            isAnimating = true
            
            local tween1 = CreateTween(buttonFrame, {TextColor3 = Theme.Accent}, 0.1)
            tween1:Play()
            tween1.Completed:Connect(function()
                local tween2 = CreateTween(buttonFrame, {TextColor3 = Theme.Text}, 0.1)
                tween2:Play()
                tween2.Completed:Connect(function()
                    isAnimating = false
                end)
            end)
            
            callback()
        end)
        
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return buttonFrame
    end
    
    function methods:CreateLabel(text)
        local labelFrame = Instance.new("TextLabel")
        labelFrame.Name = "Label"
        labelFrame.Parent = self.section.contentHolder
        labelFrame.BackgroundTransparency = 1
        labelFrame.Size = UDim2.new(1, 0, 0, LAYOUT.ELEMENT_HEIGHT.LABEL)
        labelFrame.Font = Enum.Font.SourceSansSemibold
        labelFrame.Text = text
        labelFrame.TextColor3 = Theme.DisabledText
        labelFrame.TextSize = 15
        labelFrame.TextXAlignment = Enum.TextXAlignment.Center
        labelFrame.LayoutOrder = self.section.elementsCount + 1
        
        self.section.elementsCount = self.section.elementsCount + 1
        
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return {
            SetText = function(newText)
                labelFrame.Text = newText
            end
        }
    end
    
    function methods:CreateDivider()
        local dividerFrame = Instance.new("Frame")
        dividerFrame.Name = "Divider"
        dividerFrame.Parent = self.section.contentHolder
        dividerFrame.BackgroundColor3 = Theme.Accent
        dividerFrame.BorderSizePixel = 0
        dividerFrame.Size = UDim2.new(1, 0, 0, LAYOUT.ELEMENT_HEIGHT.DIVIDER)
        dividerFrame.LayoutOrder = self.section.elementsCount + 1
        CreateCorner(dividerFrame, 3)
        
        self.section.elementsCount = self.section.elementsCount + 1
        
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return dividerFrame
    end
    
    return methods
end

function Library:SwitchTab(tabIndex)
    if tabIndex == self.currentTab then return end
    
    -- Hide current tab
    if self.tabs[self.currentTab] then
        local currentTab = self.tabs[self.currentTab]
        currentTab.frame.Visible = false
        currentTab.selectedLine.Visible = false
        currentTab.lineGlow.Visible = false
        CreateTween(currentTab.button, {TextColor3 = Theme.SubText}, 0.2):Play()
    end
    
    -- Show new tab
    local newTab = self.tabs[tabIndex]
    if newTab then
        newTab.frame.Visible = true
        newTab.selectedLine.Visible = true
        newTab.lineGlow.Visible = true
        CreateTween(newTab.button, {TextColor3 = Theme.Accent}, 0.2):Play()
        
        self.currentTab = tabIndex
    end
end

function Library:UpdateTabColors()
    for i, tab in ipairs(self.tabs) do
        if i == self.currentTab then
            tab.button.TextColor3 = Theme.Accent
        else
            tab.button.TextColor3 = Theme.SubText
        end
    end
end

function Library:SetKeybind(keycode)
    self.keybind = keycode
end

function Library:SetupKeybind()
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == self.keybind then
            self:Toggle()
        end
    end)
end

function Library:Toggle()
    self.isVisible = not self.isVisible
    self.ScreenGui.Enabled = self.isVisible
    
    if self.isVisible then
        self.Background.BackgroundTransparency = 1
        CreateTween(self.Background, {BackgroundTransparency = 0}, 0.3):Play()
    end
end

function Library:Show()
    self.isVisible = true
    self.ScreenGui.Enabled = true
    self.Background.BackgroundTransparency = 1
    CreateTween(self.Background, {BackgroundTransparency = 0}, 0.3):Play()
end

function Library:Hide()
    self.isVisible = false
    CreateTween(self.Background, {BackgroundTransparency = 1}, 0.3):Play()
    wait(0.3)
    self.ScreenGui.Enabled = false
end

function Library:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

return Library
