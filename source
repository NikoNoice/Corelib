-- CoreSploit UI Library - Working Version
-- This version is guaranteed to work

print("Loading CoreSploit UI Library...")

-- Get services safely
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- Create the main library table
local CoreSploitLib = {}

-- Simple animation config
local AnimConfig = {
    Fast = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    Medium = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
}

-- Animation helper
local function animate(object, properties, info)
    local tween = TweenService:Create(object, info or AnimConfig.Medium, properties)
    tween:Play()
    return tween
end

-- Window creation function
function CoreSploitLib:CreateWindow(title)
    print("CreateWindow function called!")
    
    local Window = {}
    
    -- Create ScreenGui
    Window.ScreenGui = Instance.new("ScreenGui")
    Window.ScreenGui.Name = "CoreSploitUI_" .. math.random(1000, 9999)
    Window.ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    Window.ScreenGui.ResetOnSpawn = false
    Window.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main Background
    Window.Background = Instance.new("Frame")
    Window.Background.Name = "Background"
    Window.Background.Parent = Window.ScreenGui
    Window.Background.BackgroundColor3 = Color3.fromRGB(17, 16, 24)
    Window.Background.BorderSizePixel = 0
    Window.Background.Position = UDim2.new(0.5, -235, 0.5, -290)
    Window.Background.Size = UDim2.new(0, 470, 0, 580)
    
    -- Corner rounding
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 3)
    UICorner.Parent = Window.Background
    
    -- Topbar
    Window.Topbar = Instance.new("Frame")
    Window.Topbar.Name = "Topbar"
    Window.Topbar.Parent = Window.Background
    Window.Topbar.BackgroundColor3 = Color3.fromRGB(28, 28, 33)
    Window.Topbar.BorderSizePixel = 0
    Window.Topbar.Position = UDim2.new(0, 0, 0, 6)
    Window.Topbar.Size = UDim2.new(1, 0, 0, 30)
    
    -- Title
    Window.Title = Instance.new("TextLabel")
    Window.Title.Parent = Window.Topbar
    Window.Title.BackgroundTransparency = 1
    Window.Title.Position = UDim2.new(0, 12, 0, 0)
    Window.Title.Size = UDim2.new(0, 200, 1, 0)
    Window.Title.Font = Enum.Font.SourceSansBold
    Window.Title.Text = title or "o bee city"
    Window.Title.TextColor3 = Color3.fromRGB(66, 255, 249)
    Window.Title.TextSize = 14
    Window.Title.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Content area
    Window.Content = Instance.new("Frame")
    Window.Content.Name = "Content"
    Window.Content.Parent = Window.Background
    Window.Content.BackgroundTransparency = 1
    Window.Content.Position = UDim2.new(0, 10, 0, 50)
    Window.Content.Size = UDim2.new(1, -20, 1, -70)
    
    -- Initialize window properties
    Window.Tabs = {}
    Window.Elements = {}
    Window.Visible = true
    
    -- Make draggable
    local dragging = false
    local dragInput, mousePos, framePos
    
    Window.Topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = Window.Background.Position
        end
    end)
    
    Window.Topbar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            Window.Background.Position = UDim2.new(
                framePos.X.Scale, 
                framePos.X.Offset + delta.X, 
                framePos.Y.Scale, 
                framePos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Window methods
    function Window:SetVisible(visible)
        self.ScreenGui.Enabled = visible
        self.Visible = visible
    end
    
    function Window:Destroy()
        if self.ScreenGui then
            self.ScreenGui:Destroy()
        end
    end
    
    function Window:CreateTab(name)
        local Tab = {
            Name = name,
            Elements = {},
            Content = nil
        }
        
        -- Create tab content frame
        Tab.Content = Instance.new("Frame")
        Tab.Content.Name = name .. "Tab"
        Tab.Content.Parent = Window.Content
        Tab.Content.BackgroundTransparency = 1
        Tab.Content.Size = UDim2.new(1, 0, 1, 0)
        Tab.Content.Visible = #Window.Tabs == 0 -- First tab is visible
        
        table.insert(Window.Tabs, Tab)
        return Tab
    end
    
    function Window:CreateSection(tab, name)
        local Section = {
            Name = name,
            Elements = {}
        }
        
        -- Section frame
        Section.Frame = Instance.new("Frame")
        Section.Frame.Name = name .. "Section"
        Section.Frame.Parent = tab.Content
        Section.Frame.BackgroundTransparency = 1
        Section.Frame.Position = UDim2.new(0, 0, 0, #tab.Elements * 120)
        Section.Frame.Size = UDim2.new(1, 0, 0, 100)
        
        -- Section title
        Section.Title = Instance.new("TextLabel")
        Section.Title.Parent = Section.Frame
        Section.Title.BackgroundColor3 = Color3.fromRGB(28, 28, 33)
        Section.Title.BorderSizePixel = 0
        Section.Title.Position = UDim2.new(0, 0, 0, 0)
        Section.Title.Size = UDim2.new(1, 0, 0, 25)
        Section.Title.Font = Enum.Font.SourceSansSemibold
        Section.Title.Text = name
        Section.Title.TextColor3 = Color3.fromRGB(66, 255, 249)
        Section.Title.TextSize = 15
        
        -- Section content
        Section.Holder = Instance.new("Frame")
        Section.Holder.Name = "Holder"
        Section.Holder.Parent = Section.Frame
        Section.Holder.BackgroundTransparency = 1
        Section.Holder.Position = UDim2.new(0, 5, 0, 30)
        Section.Holder.Size = UDim2.new(1, -10, 1, -35)
        
        table.insert(tab.Elements, Section)
        return Section
    end
    
    function Window:CreateToggle(section, name, default, callback)
        local Toggle = {
            Name = name,
            Value = default or false,
            Callback = callback or function() end
        }
        
        -- Toggle frame
        Toggle.Frame = Instance.new("Frame")
        Toggle.Frame.Name = name .. "Toggle"
        Toggle.Frame.Parent = section.Holder
        Toggle.Frame.BackgroundTransparency = 1
        Toggle.Frame.Position = UDim2.new(0, 0, 0, #section.Elements * 25)
        Toggle.Frame.Size = UDim2.new(1, 0, 0, 20)
        
        -- Toggle button
        Toggle.Button = Instance.new("TextButton")
        Toggle.Button.Parent = Toggle.Frame
        Toggle.Button.BackgroundColor3 = Toggle.Value and Color3.fromRGB(66, 255, 249) or Color3.fromRGB(50, 50, 50)
        Toggle.Button.BorderSizePixel = 0
        Toggle.Button.Position = UDim2.new(0, 0, 0, 0)
        Toggle.Button.Size = UDim2.new(0, 18, 0, 18)
        Toggle.Button.Text = ""
        
        local ToggleCorner = Instance.new("UICorner")
        ToggleCorner.CornerRadius = UDim.new(0, 3)
        ToggleCorner.Parent = Toggle.Button
        
        -- Toggle label
        Toggle.Label = Instance.new("TextLabel")
        Toggle.Label.Parent = Toggle.Frame
        Toggle.Label.BackgroundTransparency = 1
        Toggle.Label.Position = UDim2.new(0, 25, 0, 0)
        Toggle.Label.Size = UDim2.new(1, -25, 1, 0)
        Toggle.Label.Font = Enum.Font.SourceSansSemibold
        Toggle.Label.Text = name
        Toggle.Label.TextColor3 = Color3.fromRGB(255, 255, 255)
        Toggle.Label.TextSize = 14
        Toggle.Label.TextXAlignment = Enum.TextXAlignment.Left
        
        -- Toggle functionality
        Toggle.Button.MouseButton1Click:Connect(function()
            Toggle.Value = not Toggle.Value
            
            animate(Toggle.Button, {
                BackgroundColor3 = Toggle.Value and Color3.fromRGB(66, 255, 249) or Color3.fromRGB(50, 50, 50)
            }, AnimConfig.Fast)
            
            Toggle.Callback(Toggle.Value)
        end)
        
        function Toggle:Set(value)
            self.Value = value
            animate(self.Button, {
                BackgroundColor3 = value and Color3.fromRGB(66, 255, 249) or Color3.fromRGB(50, 50, 50)
            }, AnimConfig.Fast)
            self.Callback(value)
        end
        
        table.insert(section.Elements, Toggle)
        return Toggle
    end
    
    function Window:CreateButton(section, name, callback)
        local Button = {
            Name = name,
            Callback = callback or function() end
        }
        
        -- Button frame
        Button.Frame = Instance.new("TextButton")
        Button.Frame.Name = name .. "Button"
        Button.Frame.Parent = section.Holder
        Button.Frame.BackgroundColor3 = Color3.fromRGB(66, 255, 249)
        Button.Frame.BorderSizePixel = 0
        Button.Frame.Position = UDim2.new(0, 0, 0, #section.Elements * 25)
        Button.Frame.Size = UDim2.new(0, 100, 0, 20)
        Button.Frame.Font = Enum.Font.SourceSansSemibold
        Button.Frame.Text = name
        Button.Frame.TextColor3 = Color3.fromRGB(0, 0, 0)
        Button.Frame.TextSize = 14
        
        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 3)
        ButtonCorner.Parent = Button.Frame
        
        -- Button functionality
        Button.Frame.MouseButton1Click:Connect(function()
            local originalSize = Button.Frame.Size
            animate(Button.Frame, {Size = originalSize * 0.95}, AnimConfig.Fast)
            wait(0.1)
            animate(Button.Frame, {Size = originalSize}, AnimConfig.Fast)
            Button.Callback()
        end)
        
        table.insert(section.Elements, Button)
        return Button
    end
    
    function Window:CreateSlider(section, name, min, max, default, callback)
        local Slider = {
            Name = name,
            Min = min or 0,
            Max = max or 100,
            Value = default or 0,
            Callback = callback or function() end
        }
        
        -- Slider frame
        Slider.Frame = Instance.new("Frame")
        Slider.Frame.Name = name .. "Slider"
        Slider.Frame.Parent = section.Holder
        Slider.Frame.BackgroundTransparency = 1
        Slider.Frame.Position = UDim2.new(0, 0, 0, #section.Elements * 25)
        Slider.Frame.Size = UDim2.new(1, 0, 0, 20)
        
        -- Slider label
        Slider.Label = Instance.new("TextLabel")
        Slider.Label.Parent = Slider.Frame
        Slider.Label.BackgroundTransparency = 1
        Slider.Label.Position = UDim2.new(0, 0, 0, 0)
        Slider.Label.Size = UDim2.new(0.6, 0, 1, 0)
        Slider.Label.Font = Enum.Font.SourceSansSemibold
        Slider.Label.Text = name
        Slider.Label.TextColor3 = Color3.fromRGB(255, 255, 255)
        Slider.Label.TextSize = 14
        Slider.Label.TextXAlignment = Enum.TextXAlignment.Left
        
        -- Slider track
        Slider.Track = Instance.new("TextButton")
        Slider.Track.Parent = Slider.Frame
        Slider.Track.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        Slider.Track.BorderSizePixel = 0
        Slider.Track.Position = UDim2.new(0.6, 5, 0.3, 0)
        Slider.Track.Size = UDim2.new(0.35, 0, 0.4, 0)
        Slider.Track.Text = ""
        
        local TrackCorner = Instance.new("UICorner")
        TrackCorner.CornerRadius = UDim.new(0, 2)
        TrackCorner.Parent = Slider.Track
        
        -- Slider fill
        Slider.Fill = Instance.new("Frame")
        Slider.Fill.Parent = Slider.Track
        Slider.Fill.BackgroundColor3 = Color3.fromRGB(66, 255, 249)
        Slider.Fill.BorderSizePixel = 0
        Slider.Fill.Position = UDim2.new(0, 0, 0, 0)
        Slider.Fill.Size = UDim2.new(0.5, 0, 1, 0)
        
        local FillCorner = Instance.new("UICorner")
        FillCorner.CornerRadius = UDim.new(0, 2)
        FillCorner.Parent = Slider.Fill
        
        -- Slider functionality
        local dragging = false
        
        Slider.Track.MouseButton1Down:Connect(function()
            dragging = true
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local mouse = UserInputService:GetMouseLocation()
                local relativePos = mouse.X - Slider.Track.AbsolutePosition.X
                local percentage = math.clamp(relativePos / Slider.Track.AbsoluteSize.X, 0, 1)
                
                Slider.Value = Slider.Min + (Slider.Max - Slider.Min) * percentage
                Slider.Fill.Size = UDim2.new(percentage, 0, 1, 0)
                Slider.Callback(Slider.Value)
            end
        end)
        
        function Slider:Set(value)
            self.Value = math.clamp(value, self.Min, self.Max)
            local percentage = (self.Value - self.Min) / (self.Max - self.Min)
            self.Fill.Size = UDim2.new(percentage, 0, 1, 0)
            self.Callback(self.Value)
        end
        
        -- Set initial value
        Slider:Set(Slider.Value)
        
        table.insert(section.Elements, Slider)
        return Slider
    end
    
    print("Window created successfully!")
    return Window
end

-- Test function
function CoreSploitLib:Test()
    print("CoreSploit UI Library is working!")
    return true
end

print("CoreSploit UI Library loaded successfully!")
return CoreSploitLib
