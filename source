-- O Bee City UI Library
-- Version: 1.0

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local Library = {}
Library.__index = Library

-- Default theme colors
local Theme = {
    Background = Color3.fromRGB(17, 16, 24),
    Topbar = Color3.fromRGB(28, 28, 33),
    SectionBackground = Color3.fromRGB(28, 28, 33),
    Accent = Color3.fromRGB(66, 255, 249),
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(124, 121, 125),
    DisabledText = Color3.fromRGB(111, 108, 112),
    Divider = Color3.fromRGB(36, 36, 43),
    ToggleStroke = Color3.fromRGB(36, 36, 43)
}

-- Utility Functions
local function CreateTween(object, properties, duration, easingStyle, easingDirection)
    duration = duration or 0.3
    easingStyle = easingStyle or Enum.EasingStyle.Quad
    easingDirection = easingDirection or Enum.EasingDirection.Out
    
    local tween = TweenService:Create(object, TweenInfo.new(duration, easingStyle, easingDirection), properties)
    return tween
end

local function CreateCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 3)
    corner.Parent = parent
    return corner
end

local function CreateStroke(parent, color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or Theme.Divider
    stroke.Thickness = thickness or 1
    stroke.Parent = parent
    return stroke
end

-- Main Library Functions
function Library.new(title, gameName, userStatus)
    local self = setmetatable({}, Library)
    
    self.title = title or "o bee city"
    self.gameName = gameName or "Game Name"
    self.userStatus = userStatus or "Admin"
    self.tabs = {}
    self.currentTab = 1
    self.isVisible = false
    self.keybind = Enum.KeyCode.Insert
    self.colorPickerFrame = nil
    self.colorPickerTitle = nil
    self.currentColorCallback = nil
    self.dragStart = nil
    self.startPos = nil
    
    self:CreateMainFrame()
    self:SetupKeybind()
    self:SetupDragging()
    
    return self
end

function Library:CreateMainFrame()
    -- Main ScreenGui
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "CoreSploitUI"
    self.ScreenGui.Parent = PlayerGui
    self.ScreenGui.Enabled = false
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Background Frame
    self.Background = Instance.new("Frame")
    self.Background.Name = "Background"
    self.Background.Parent = self.ScreenGui
    self.Background.BackgroundColor3 = Theme.Background
    self.Background.BorderSizePixel = 0
    self.Background.Position = UDim2.new(0.5, -235, 0.5, -290)
    self.Background.Size = UDim2.new(0, 470, 0, 581)
    CreateCorner(self.Background, 3)
    
    -- Menu Glow Effect
    local menuGlow = Instance.new("ImageLabel")
    menuGlow.Name = "MenuGlow"
    menuGlow.Parent = self.Background
    menuGlow.BackgroundTransparency = 1
    menuGlow.Position = UDim2.new(-0.047, 0, -0.037, 0)
    menuGlow.Size = UDim2.new(0, 513, 0, 623)
    menuGlow.ZIndex = 0
    menuGlow.Image = "rbxassetid://18245826428"
    menuGlow.ImageColor3 = Theme.Accent
    menuGlow.ImageTransparency = 0.74
    menuGlow.ScaleType = Enum.ScaleType.Slice
    menuGlow.SliceCenter = Rect.new(21, 21, 79, 79)
    
    self:CreateTopbar()
    self:CreateUnderBar()
    self:CreateTabContainer()
    self:CreateColorPickerFrame()
end

function Library:SetupDragging()
    local dragToggle = nil
    local dragSpeed = 0.25
    local dragStart = nil
    local startPos = nil
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        CreateTween(self.Background, {Position = position}, dragSpeed):Play()
    end
    
    self.Background.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragToggle = true
            dragStart = input.Position
            startPos = self.Background.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragToggle then
            updateInput(input)
        end
    end)
end

function Library:CreateTopbar()
    -- Topbar
    local topbar = Instance.new("Frame")
    topbar.Name = "Topbar"
    topbar.Parent = self.Background
    topbar.BackgroundColor3 = Theme.Topbar
    topbar.BorderSizePixel = 0
    topbar.Position = UDim2.new(0, 0, 0.01, 0)
    topbar.Size = UDim2.new(0, 470, 0, 30)
    
    -- Rounding filler for topbar
    local roundingFiller = Instance.new("Frame")
    roundingFiller.Name = "RoundingFiller"
    roundingFiller.Parent = topbar
    roundingFiller.BackgroundColor3 = Theme.Topbar
    roundingFiller.BorderSizePixel = 0
    roundingFiller.ClipsDescendants = true
    roundingFiller.Position = UDim2.new(0, 0, -0.21, 0)
    roundingFiller.Size = UDim2.new(0, 470, 0, 7)
    roundingFiller.ZIndex = 0
    CreateCorner(roundingFiller, 3)
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Parent = topbar
    titleLabel.BackgroundTransparency = 1
    titleLabel.Position = UDim2.new(0.025, 0, -0.2, 0)
    titleLabel.Size = UDim2.new(0, 120, 0, 32)
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Text = self.title
    titleLabel.TextColor3 = Theme.Accent
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Divider line
    local divider = Instance.new("Frame")
    divider.Parent = topbar
    divider.BackgroundColor3 = Theme.Divider
    divider.BorderSizePixel = 0
    divider.Position = UDim2.new(0, 0, 0.957, 0)
    divider.Size = UDim2.new(0, 469, 0, 1)
    
    -- Tabs Holder
    self.TabsHolder = Instance.new("Frame")
    self.TabsHolder.Name = "TabsHolder"
    self.TabsHolder.Parent = topbar
    self.TabsHolder.BackgroundTransparency = 1
    self.TabsHolder.Position = UDim2.new(0.506, 0, -0.176, 0)
    self.TabsHolder.Size = UDim2.new(0, 232, 0, 36)
    
    local tabLayout = Instance.new("UIListLayout")
    tabLayout.Parent = self.TabsHolder
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Padding = UDim.new(0, 8)
end

function Library:CreateUnderBar()
    local underBar = Instance.new("Frame")
    underBar.Name = "UnderBar"
    underBar.Parent = self.Background
    underBar.BackgroundColor3 = Theme.Topbar
    underBar.BorderSizePixel = 0
    underBar.Position = UDim2.new(0.002, 0, 0.964, 0)
    underBar.Size = UDim2.new(0, 468, 0, 21)
    
    local gameNameLabel = Instance.new("TextLabel")
    gameNameLabel.Name = "GameName"
    gameNameLabel.Parent = underBar
    gameNameLabel.BackgroundTransparency = 1
    gameNameLabel.Size = UDim2.new(0, 150, 0, 21)
    gameNameLabel.Font = Enum.Font.SourceSansSemibold
    gameNameLabel.Text = self.gameName
    gameNameLabel.TextColor3 = Theme.Accent
    gameNameLabel.TextSize = 14
    gameNameLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    local userStatusLabel = Instance.new("TextLabel")
    userStatusLabel.Name = "UserStatus"
    userStatusLabel.Parent = underBar
    userStatusLabel.BackgroundTransparency = 1
    userStatusLabel.Position = UDim2.new(0.786, 0, 0, 0)
    userStatusLabel.Size = UDim2.new(0, 94, 0, 21)
    userStatusLabel.Font = Enum.Font.SourceSansSemibold
    userStatusLabel.Text = self.userStatus
    userStatusLabel.TextColor3 = Theme.Accent
    userStatusLabel.TextSize = 14
    userStatusLabel.TextXAlignment = Enum.TextXAlignment.Right
end

function Library:CreateTabContainer()
    self.TabContainer = Instance.new("Frame")
    self.TabContainer.Name = "TabContainer"
    self.TabContainer.Parent = self.Background
    self.TabContainer.BackgroundTransparency = 1
    self.TabContainer.Position = UDim2.new(0, 0, 0.073, 0)
    self.TabContainer.Size = UDim2.new(1, 0, 0, 520)
end

function Library:CreateColorPickerFrame()
    self.colorPickerFrame = Instance.new("Frame")
    self.colorPickerFrame.Name = "ColorpickerFrame"
    self.colorPickerFrame.Parent = self.ScreenGui  -- Parent to ScreenGui for proper layering
    self.colorPickerFrame.BackgroundColor3 = Theme.Background
    self.colorPickerFrame.BorderSizePixel = 0
    self.colorPickerFrame.Position = UDim2.new(0.65, 0, 0.3, 0)
    self.colorPickerFrame.Size = UDim2.new(0, 321, 0, 225)
    self.colorPickerFrame.Visible = false
    self.colorPickerFrame.ZIndex = 100
    CreateCorner(self.colorPickerFrame, 3)
    CreateStroke(self.colorPickerFrame, Theme.Divider, 1)
    
    -- Colorpicker title
    self.colorPickerTitle = Instance.new("TextLabel")
    self.colorPickerTitle.Name = "ColorpickerTitle"
    self.colorPickerTitle.Parent = self.colorPickerFrame
    self.colorPickerTitle.BackgroundTransparency = 1
    self.colorPickerTitle.Position = UDim2.new(0.031, 0, 0.013, 0)
    self.colorPickerTitle.Size = UDim2.new(0, 200, 0, 20)
    self.colorPickerTitle.Font = Enum.Font.SourceSansSemibold
    self.colorPickerTitle.Text = "Color"
    self.colorPickerTitle.TextColor3 = Theme.Accent
    self.colorPickerTitle.TextSize = 14
    self.colorPickerTitle.TextXAlignment = Enum.TextXAlignment.Left
    self.colorPickerTitle.ZIndex = 101
    
    -- Make colorpicker draggable (only from title bar area)
    local cpDragToggle = nil
    local cpDragStart = nil
    local cpStartPos = nil
    
    -- Create draggable area (title bar)
    local titleDragArea = Instance.new("Frame")
    titleDragArea.Name = "TitleDragArea"
    titleDragArea.Parent = self.colorPickerFrame
    titleDragArea.BackgroundTransparency = 1
    titleDragArea.Position = UDim2.new(0, 0, 0, 0)
    titleDragArea.Size = UDim2.new(1, 0, 0, 25)
    titleDragArea.ZIndex = 101
    
    titleDragArea.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            cpDragToggle = true
            cpDragStart = input.Position
            cpStartPos = self.colorPickerFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if cpDragToggle and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - cpDragStart
            self.colorPickerFrame.Position = UDim2.new(cpStartPos.X.Scale, cpStartPos.X.Offset + delta.X, cpStartPos.Y.Scale, cpStartPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            cpDragToggle = false
        end
    end)
    
    -- Colorpicker main area
    local colorpicker = Instance.new("Frame")
    colorpicker.Name = "Colorpicker"
    colorpicker.Parent = self.colorPickerFrame
    colorpicker.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    colorpicker.BorderSizePixel = 0
    colorpicker.Position = UDim2.new(0.034, 0, 0.111, 0)
    colorpicker.Size = UDim2.new(0, 150, 0, 150)
    colorpicker.ZIndex = 101
    CreateCorner(colorpicker, 3)
    
    -- Color gradient (using exact same image from original)
    local colorGradient = Instance.new("ImageLabel")
    colorGradient.Parent = colorpicker
    colorGradient.BackgroundTransparency = 1
    colorGradient.Size = UDim2.new(1, 0, 1, 0)
    colorGradient.Image = "rbxassetid://6976876787"
    colorGradient.ImageColor3 = Color3.fromRGB(255, 1, 1)
    colorGradient.ZIndex = 101
    CreateCorner(colorGradient, 3)
    
    -- Saturation overlay (using exact same image from original)
    local saturationOverlay = Instance.new("ImageLabel")
    saturationOverlay.Parent = colorpicker
    saturationOverlay.BackgroundTransparency = 1
    saturationOverlay.Size = UDim2.new(1, 0, 1, 0)
    saturationOverlay.ZIndex = 102
    saturationOverlay.Image = "rbxassetid://6941137543"
    saturationOverlay.ImageColor3 = Color3.fromRGB(0, 0, 0)
    CreateCorner(saturationOverlay, 3)
    
    -- Colorpicker head (draggable)
    local colorpickerHead = Instance.new("TextButton")
    colorpickerHead.Name = "ColorpickerHead"
    colorpickerHead.Parent = colorpicker
    colorpickerHead.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    colorpickerHead.BorderSizePixel = 0
    colorpickerHead.Position = UDim2.new(0.46, 0, 0.387, 0)
    colorpickerHead.Size = UDim2.new(0, 12, 0, 12)
    colorpickerHead.ZIndex = 103
    colorpickerHead.Text = ""
    CreateCorner(colorpickerHead, 12)
    
    -- Make colorpicker head draggable within bounds
    local headDragging = false
    
    colorpickerHead.MouseButton1Down:Connect(function()
        headDragging = true
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if headDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = input.Position
            local pickerPos = colorpicker.AbsolutePosition
            local pickerSize = colorpicker.AbsoluteSize
            
            local relativeX = math.clamp((mousePos.X - pickerPos.X) / pickerSize.X, 0, 1)
            local relativeY = math.clamp((mousePos.Y - pickerPos.Y) / pickerSize.Y, 0, 1)
            
            colorpickerHead.Position = UDim2.new(relativeX, -6, relativeY, -6)
            
            -- Update color based on position
            if self.currentColorCallback then
                local hue = relativeX
                local sat = 1 - relativeY
                local color = Color3.fromHSV(hue, sat, 1)
                self.currentColorCallback(color)
            end
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            headDragging = false
        end
    end)
    
    -- Right side of colorpicker - hue slider
    local hueSlider = Instance.new("Frame")
    hueSlider.Name = "HueSlider"
    hueSlider.Parent = self.colorPickerFrame
    hueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    hueSlider.BorderSizePixel = 0
    hueSlider.Position = UDim2.new(0.56, 0, 0.111, 0)
    hueSlider.Size = UDim2.new(0, 15, 0, 150)
    hueSlider.ZIndex = 101
    CreateCorner(hueSlider, 3)
    
    -- Hue gradient
    local hueGradient = Instance.new("UIGradient")
    hueGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
        ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))
    }
    hueGradient.Rotation = 90
    hueGradient.Parent = hueSlider
    
    -- Hue slider head
    local hueSliderHead = Instance.new("TextButton")
    hueSliderHead.Name = "HueSliderHead"
    hueSliderHead.Parent = hueSlider
    hueSliderHead.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    hueSliderHead.BorderSizePixel = 0
    hueSliderHead.Position = UDim2.new(-0.2, 0, 0, -2)
    hueSliderHead.Size = UDim2.new(0, 19, 0, 8)
    hueSliderHead.ZIndex = 103
    hueSliderHead.Text = ""
    CreateCorner(hueSliderHead, 2)
    CreateStroke(hueSliderHead, Theme.ToggleStroke, 1)
    
    local currentHue = 0
    local currentSat = 1
    local currentVal = 1
    local hueSliderDragging = false
    local headDragging = false
    
    -- Make hue slider draggable
    hueSliderHead.MouseButton1Down:Connect(function()
        hueSliderDragging = true
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if hueSliderDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = input.Position
            local sliderPos = hueSlider.AbsolutePosition
            local sliderSize = hueSlider.AbsoluteSize
            
            local relativeY = math.clamp((mousePos.Y - sliderPos.Y) / sliderSize.Y, 0, 1)
            hueSliderHead.Position = UDim2.new(-0.2, 0, relativeY, -4)
            
            currentHue = relativeY
            
            -- Update main color gradient
            colorGradient.ImageColor3 = Color3.fromHSV(currentHue, 1, 1)
            
            -- Update current color if callback exists
            if self.currentColorCallback then
                local color = Color3.fromHSV(currentHue, currentSat, currentVal)
                self.currentColorCallback(color)
            end
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            hueSliderDragging = false
        end
    end)
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.Parent = list
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 7)
    
    -- Rainbow toggle (off by default)
    local rainbowToggle = Instance.new("TextButton")
    rainbowToggle.Name = "RainbowToggle"
    rainbowToggle.Parent = list
    rainbowToggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    rainbowToggle.BackgroundTransparency = 1
    rainbowToggle.BorderSizePixel = 0
    rainbowToggle.Size = UDim2.new(0, 18, 0, 18)
    rainbowToggle.Text = ""
    rainbowToggle.ZIndex = 104
    rainbowToggle.LayoutOrder = 2
    CreateCorner(rainbowToggle, 3)
    CreateStroke(rainbowToggle, Theme.ToggleStroke, 1)
    
    local rainbowCheck = Instance.new("ImageLabel")
    rainbowCheck.Name = "Checkmark"
    rainbowCheck.Parent = rainbowToggle
    rainbowCheck.BackgroundTransparency = 1
    rainbowCheck.Position = UDim2.new(0.111, 0, 0.111, 0)
    rainbowCheck.Size = UDim2.new(0, 13, 0, 13)
    rainbowCheck.Image = "http://www.roblox.com/asset/?id=6031094667"
    rainbowCheck.ImageColor3 = Color3.fromRGB(0, 0, 0)
    rainbowCheck.ZIndex = 105
    rainbowCheck.Visible = false
    
    local rainbowTitle = Instance.new("TextLabel")
    rainbowTitle.Name = "Title"
    rainbowTitle.Parent = rainbowToggle
    rainbowTitle.BackgroundTransparency = 1
    rainbowTitle.Position = UDim2.new(1.461, 0, -0.056, 0)
    rainbowTitle.Size = UDim2.new(0, 100, 0, 20)
    rainbowTitle.Font = Enum.Font.SourceSansSemibold
    rainbowTitle.Text = "Rainbow"
    rainbowTitle.TextColor3 = Theme.SubText
    rainbowTitle.TextSize = 15
    rainbowTitle.TextXAlignment = Enum.TextXAlignment.Left
    rainbowTitle.ZIndex = 104
    
    local rainbowEnabled = false
    local rainbowConnection = nil
    
    rainbowToggle.MouseButton1Click:Connect(function()
        rainbowEnabled = not rainbowEnabled
        rainbowToggle.BackgroundColor3 = rainbowEnabled and Theme.Accent or Color3.fromRGB(255, 255, 255)
        rainbowToggle.BackgroundTransparency = rainbowEnabled and 0 or 1
        rainbowToggle.UIStroke.Color = rainbowEnabled and Theme.Accent or Theme.ToggleStroke
        rainbowTitle.TextColor3 = rainbowEnabled and Theme.Text or Theme.SubText
        rainbowCheck.Visible = rainbowEnabled
        
        -- Rainbow functionality with speed control
        if rainbowEnabled then
            rainbowConnection = RunService.Heartbeat:Connect(function()
                if self.currentColorCallback and rainbowEnabled then
                    local hue = (tick() * speedMultiplier) % 1  -- Use speed multiplier
                    local color = Color3.fromHSV(hue, 1, 1)
                    self.currentColorCallback(color)
                end
            end)
        else
            if rainbowConnection then
                rainbowConnection:Disconnect()
                rainbowConnection = nil
            end
        end
    end)
    
    -- Pulse toggle (off by default)
    local pulseToggle = Instance.new("TextButton")
    pulseToggle.Name = "PulseToggle"
    pulseToggle.Parent = list
    pulseToggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    pulseToggle.BackgroundTransparency = 1
    pulseToggle.BorderSizePixel = 0
    pulseToggle.Size = UDim2.new(0, 18, 0, 18)
    pulseToggle.Text = ""
    pulseToggle.ZIndex = 104
    pulseToggle.LayoutOrder = 3
    CreateCorner(pulseToggle, 3)
    CreateStroke(pulseToggle, Theme.ToggleStroke, 1)
    
    local pulseCheck = Instance.new("ImageLabel")
    pulseCheck.Name = "Checkmark"
    pulseCheck.Parent = pulseToggle
    pulseCheck.BackgroundTransparency = 1
    pulseCheck.Position = UDim2.new(0.111, 0, 0.111, 0)
    pulseCheck.Size = UDim2.new(0, 13, 0, 13)
    pulseCheck.Image = "http://www.roblox.com/asset/?id=6031094667"
    pulseCheck.ImageColor3 = Color3.fromRGB(0, 0, 0)
    pulseCheck.ZIndex = 105
    pulseCheck.Visible = false
    
    local pulseTitle = Instance.new("TextLabel")
    pulseTitle.Name = "Title"
    pulseTitle.Parent = pulseToggle
    pulseTitle.BackgroundTransparency = 1
    pulseTitle.Position = UDim2.new(1.461, 0, -0.056, 0)
    pulseTitle.Size = UDim2.new(0, 100, 0, 20)
    pulseTitle.Font = Enum.Font.SourceSansSemibold
    pulseTitle.Text = "Pulse"
    pulseTitle.TextColor3 = Theme.SubText
    pulseTitle.TextSize = 15
    pulseTitle.TextXAlignment = Enum.TextXAlignment.Left
    pulseTitle.ZIndex = 104
    
    local pulseEnabled = false
    local pulseConnection = nil
    
    pulseToggle.MouseButton1Click:Connect(function()
        pulseEnabled = not pulseEnabled
        pulseToggle.BackgroundColor3 = pulseEnabled and Theme.Accent or Color3.fromRGB(255, 255, 255)
        pulseToggle.BackgroundTransparency = pulseEnabled and 0 or 1
        pulseToggle.UIStroke.Color = pulseEnabled and Theme.Accent or Theme.ToggleStroke
        pulseTitle.TextColor3 = pulseEnabled and Theme.Text or Theme.SubText
        pulseCheck.Visible = pulseEnabled
        
        -- Pulse functionality with speed control
        if pulseEnabled then
            pulseConnection = RunService.Heartbeat:Connect(function()
                if self.currentColorCallback and pulseEnabled then
                    local brightness = (math.sin(tick() * 3 * speedMultiplier) + 1) / 2  -- Use speed multiplier
                    local color = Color3.fromHSV(currentHue, currentSat, brightness)
                    self.currentColorCallback(color)
                end
            end)
        else
            if pulseConnection then
                pulseConnection:Disconnect()
                pulseConnection = nil
            end
        end
    end)
    
    
    -- Copy and Paste buttons
    local copyButton = Instance.new("TextButton")
    copyButton.Name = "CopyButton"
    copyButton.Parent = self.colorPickerFrame
    copyButton.BackgroundTransparency = 1
    copyButton.Position = UDim2.new(0.535, 0, 0.8, 0)
    copyButton.Size = UDim2.new(0, 63, 0, 20)
    copyButton.Font = Enum.Font.SourceSansSemibold
    copyButton.Text = "Copy"
    copyButton.TextColor3 = Theme.Text
    copyButton.TextSize = 15
    copyButton.ZIndex = 102
    
    local pasteButton = Instance.new("TextButton")
    pasteButton.Name = "PasteButton"
    pasteButton.Parent = self.colorPickerFrame
    pasteButton.BackgroundTransparency = 1
    pasteButton.Position = UDim2.new(0.762, 0, 0.8, 0)
    pasteButton.Size = UDim2.new(0, 63, 0, 20)
    pasteButton.Font = Enum.Font.SourceSansSemibold
    pasteButton.Text = "Paste"
    pasteButton.TextColor3 = Theme.Text
    pasteButton.TextSize = 15
    pasteButton.ZIndex = 102
end

function Library:CreateTab(name)
    local tabIndex = #self.tabs + 1
    local tab = {
        name = name,
        index = tabIndex,
        sections = {},
        frame = nil,
        button = nil,
        visible = tabIndex == 1
    }
    
    -- Create tab button
    local tabButton = Instance.new("TextLabel")
    tabButton.Name = "TabButton" .. tabIndex
    tabButton.Parent = self.TabsHolder
    tabButton.BackgroundTransparency = 1
    tabButton.Size = UDim2.new(0, 50, 0, 32)
    tabButton.Font = Enum.Font.SourceSansSemibold
    tabButton.Text = name
    tabButton.TextSize = 14
    tabButton.LayoutOrder = tabIndex
    
    -- Selected line and glow
    local selectedLine = Instance.new("Frame")
    selectedLine.Name = "SelectedLine"
    selectedLine.Parent = tabButton
    selectedLine.BackgroundColor3 = Theme.Accent
    selectedLine.BorderSizePixel = 0
    selectedLine.Position = UDim2.new(-0.06, 0, 1, 0)
    selectedLine.Size = UDim2.new(0, 55, 0, 2)
    selectedLine.Visible = tabIndex == 1
    
    local lineGlow = Instance.new("Frame")
    lineGlow.Name = "LineGlow"
    lineGlow.Parent = tabButton
    lineGlow.BackgroundTransparency = 0.9
    lineGlow.BorderSizePixel = 0
    lineGlow.Position = UDim2.new(-0.06, 0, -0.022, 0)
    lineGlow.Size = UDim2.new(0, 55, 0, 32)
    lineGlow.Visible = tabIndex == 1
    
    local glowGradient = Instance.new("UIGradient")
    glowGradient.Color = ColorSequence.new(Theme.Accent)
    glowGradient.Rotation = 90
    glowGradient.Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 1),
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(1, 0)
    }
    glowGradient.Parent = lineGlow
    
    -- Tab frame
    local tabFrame = Instance.new("Frame")
    tabFrame.Name = "Tab" .. tabIndex
    tabFrame.Parent = self.TabContainer
    tabFrame.BackgroundTransparency = 1
    tabFrame.Size = UDim2.new(1, 0, 1, 0)
    tabFrame.Visible = tabIndex == 1
    
    -- Tab click detection
    local clickDetector = Instance.new("TextButton")
    clickDetector.Parent = tabButton
    clickDetector.BackgroundTransparency = 1
    clickDetector.Size = UDim2.new(1, 0, 1, 0)
    clickDetector.Text = ""
    clickDetector.MouseButton1Click:Connect(function()
        self:SwitchTab(tabIndex)
    end)
    
    tab.frame = tabFrame
    tab.button = tabButton
    tab.selectedLine = selectedLine
    tab.lineGlow = lineGlow
    
    table.insert(self.tabs, tab)
    self:UpdateTabColors()
    
    return setmetatable({
        tab = tab,
        library = self
    }, {__index = self:GetTabMethods()})
end

function Library:GetTabMethods()
    local methods = {}
    
    function methods:CreateSection(name)
        local section = {
            name = name,
            elements = {},
            frame = nil
        }
        
        -- Create section frame (auto-scaling)
        local sectionFrame = Instance.new("Frame")
        sectionFrame.Name = "Section_" .. name
        sectionFrame.Parent = self.tab.frame
        sectionFrame.BackgroundTransparency = 1
        sectionFrame.Size = UDim2.new(0, 225, 0, 50)  -- Start small, will auto-scale
        
        -- Position sections side by side
        local sectionCount = #self.tab.sections
        if sectionCount == 0 then
            sectionFrame.Position = UDim2.new(0.011, 0, 0, 0)
        else
            sectionFrame.Position = UDim2.new(0.498, 4, 0, 0)
        end
        
        -- Section background with stroke (properly positioned)
        local sectionBg = Instance.new("Frame")
        sectionBg.Name = "SectionBackground"
        sectionBg.Parent = sectionFrame
        sectionBg.BackgroundColor3 = Theme.Background
        sectionBg.BorderSizePixel = 0
        sectionBg.Position = UDim2.new(0, 0, 0.022, 0)
        sectionBg.Size = UDim2.new(0, 225, 0, 50)  -- Will auto-scale
        CreateCorner(sectionBg, 3)
        CreateStroke(sectionBg, Theme.ToggleStroke, 1)  -- Always visible stroke
        
        -- Section title bar - properly aligned with background
        local titleBar = Instance.new("Frame")
        titleBar.Name = "TitleBar"
        titleBar.Parent = sectionBg
        titleBar.BackgroundColor3 = Theme.SectionBackground
        titleBar.BorderSizePixel = 0
        titleBar.Position = UDim2.new(0, 0, 0, 0)
        titleBar.Size = UDim2.new(0, 225, 0, 15)
        
        local titleFiller = Instance.new("Frame")
        titleFiller.Name = "TitleFiller"
        titleFiller.Parent = titleBar
        titleFiller.BackgroundColor3 = Theme.SectionBackground
        titleFiller.BorderSizePixel = 0
        titleFiller.Position = UDim2.new(0, 0, -0.667, 0)
        titleFiller.Size = UDim2.new(0, 225, 0, 10)
        CreateCorner(titleFiller, 3)
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Parent = titleBar
        titleLabel.BackgroundTransparency = 1
        titleLabel.Position = UDim2.new(0.028, 0, -0.467, 0)
        titleLabel.Size = UDim2.new(0, 79, 0, 22)
        titleLabel.Font = Enum.Font.SourceSansSemibold
        titleLabel.Text = name
        titleLabel.TextColor3 = Theme.Accent
        titleLabel.TextSize = 15
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        
        -- Section content holder
        local contentHolder = Instance.new("Frame")
        contentHolder.Name = "ContentHolder"
        contentHolder.Parent = sectionFrame
        contentHolder.BackgroundTransparency = 1
        contentHolder.Position = UDim2.new(0.015, 0, 0.067, 0)
        contentHolder.Size = UDim2.new(0, 216, 0, 20)  -- Will auto-scale
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.Parent = contentHolder
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, 7)
        
        -- Auto-scaling functionality
        local function updateSectionSize()
            local contentSize = contentLayout.AbsoluteContentSize
            local newHeight = math.max(50, contentSize.Y + 40)  -- Minimum 50px, add padding
            
            -- Update content holder size
            contentHolder.Size = UDim2.new(0, 216, 0, contentSize.Y)
            
            -- Update section frame size
            sectionFrame.Size = UDim2.new(0, 225, 0, newHeight)
            
            -- Update section background size
            sectionBg.Size = UDim2.new(0, 225, 0, newHeight - 10)
        end
        
        -- Connect auto-scaling to content changes
        contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateSectionSize)
        
        section.frame = sectionFrame
        section.contentHolder = contentHolder
        section.updateSize = updateSectionSize
        
        table.insert(self.tab.sections, section)
        
        return setmetatable({
            section = section,
            tab = self.tab,
            library = self.library
        }, {__index = self.library:GetSectionMethods()})
    end
    
    return methods
end

function Library:GetSectionMethods()
    local methods = {}
    
    function methods:CreateToggle(name, default, callback, colorpicker)
        default = default or false
        callback = callback or function() end
        colorpicker = colorpicker or nil
        
        local toggleFrame = Instance.new("TextButton")
        toggleFrame.Name = "Toggle_" .. name
        toggleFrame.Parent = self.section.contentHolder
        toggleFrame.BackgroundColor3 = default and Theme.Accent or Color3.fromRGB(255, 255, 255)
        toggleFrame.BackgroundTransparency = default and 0 or 1
        toggleFrame.BorderSizePixel = 0
        toggleFrame.Size = UDim2.new(0, 18, 0, 18)
        toggleFrame.Text = ""
        CreateCorner(toggleFrame, 3)
        CreateStroke(toggleFrame, default and Theme.Accent or Theme.ToggleStroke, 1)  -- Always visible stroke
        
        local checkmark = Instance.new("ImageLabel")
        checkmark.Name = "Checkmark"
        checkmark.Parent = toggleFrame
        checkmark.BackgroundTransparency = 1
        checkmark.Position = UDim2.new(0.111, 0, 0.111, 0)
        checkmark.Size = UDim2.new(0, 13, 0, 13)
        checkmark.Image = "http://www.roblox.com/asset/?id=6031094667"
        checkmark.ImageColor3 = Color3.fromRGB(0, 0, 0)
        checkmark.Visible = default
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Name = "Title"
        titleLabel.Parent = toggleFrame
        titleLabel.BackgroundTransparency = 1
        titleLabel.Position = UDim2.new(1.461, 0, -0.056, 0)
        titleLabel.Size = UDim2.new(0, 150, 0, 20)
        titleLabel.Font = Enum.Font.SourceSansSemibold
        titleLabel.Text = name
        titleLabel.TextColor3 = default and Theme.Text or Theme.SubText
        titleLabel.TextSize = 15
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        
        -- Colorpicker if provided
        local colorpickerButton = nil
        if colorpicker then
            colorpickerButton = Instance.new("TextButton")
            colorpickerButton.Name = "ColorpickerBinded"
            colorpickerButton.Parent = toggleFrame
            colorpickerButton.BackgroundColor3 = colorpicker.default or Color3.fromRGB(255, 0, 0)
            colorpickerButton.BorderSizePixel = 0
            colorpickerButton.Position = UDim2.new(10.222, 0, 0.111, 0)
            colorpickerButton.Size = UDim2.new(0, 32, 0, 13)
            colorpickerButton.Text = ""
            CreateCorner(colorpickerButton, 3)
            CreateStroke(colorpickerButton, Theme.ToggleStroke, 1)  -- Always visible stroke
            
            colorpickerButton.MouseButton1Click:Connect(function()
                self.library.colorPickerFrame.Visible = not self.library.colorPickerFrame.Visible
                -- Set the title to match the toggle name
                self.library.colorPickerTitle.Text = name .. " Color"
                self.library.currentColorCallback = function(color)
                    colorpickerButton.BackgroundColor3 = color
                    if colorpicker.callback then
                        colorpicker.callback(color)
                    end
                end
            end)
        end
        
        local state = default
        
        toggleFrame.MouseButton1Click:Connect(function()
            state = not state
            
            local bgTween = CreateTween(toggleFrame, {
                BackgroundColor3 = state and Theme.Accent or Color3.fromRGB(255, 255, 255),
                BackgroundTransparency = state and 0 or 1
            }, 0.2)
            
            local strokeTween = CreateTween(toggleFrame.UIStroke, {
                Color = state and Theme.Accent or Theme.ToggleStroke  -- Color changes but stroke stays visible
            }, 0.2)
            
            local textTween = CreateTween(titleLabel, {
                TextColor3 = state and Theme.Text or Theme.SubText
            }, 0.2)
            
            checkmark.Visible = state
            bgTween:Play()
            strokeTween:Play()
            textTween:Play()
            
            callback(state)
        end)
        
        -- Trigger section auto-scaling
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return {
            SetValue = function(value)
                state = value
                toggleFrame.BackgroundColor3 = state and Theme.Accent or Color3.fromRGB(255, 255, 255)
                toggleFrame.BackgroundTransparency = state and 0 or 1
                toggleFrame.UIStroke.Color = state and Theme.Accent or Theme.ToggleStroke
                titleLabel.TextColor3 = state and Theme.Text or Theme.SubText
                checkmark.Visible = state
            end,
            GetValue = function()
                return state
            end,
            Colorpicker = colorpickerButton
        }
    end
    
    function methods:CreateSlider(name, min, max, default, callback)
        min = min or 0
        max = max or 1
        default = default or min
        callback = callback or function() end
        
        local sliderFrame = Instance.new("Frame")
        sliderFrame.Name = "Slider_" .. name
        sliderFrame.Parent = self.section.contentHolder
        sliderFrame.BackgroundTransparency = 1
        sliderFrame.Size = UDim2.new(0, 215, 0, 32)
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Parent = sliderFrame
        titleLabel.BackgroundTransparency = 1
        titleLabel.Size = UDim2.new(0, 150, 0, 19)
        titleLabel.Font = Enum.Font.SourceSansSemibold
        titleLabel.Text = name
        titleLabel.TextColor3 = Theme.SubText
        titleLabel.TextSize = 15
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        titleLabel.TextYAlignment = Enum.TextYAlignment.Top
        
        local valueBox = Instance.new("TextBox")
        valueBox.Parent = sliderFrame
        valueBox.BackgroundTransparency = 1
        valueBox.Position = UDim2.new(0.765, 0, 0, 0)
        valueBox.Size = UDim2.new(0, 50, 0, 19)
        valueBox.Font = Enum.Font.SourceSansSemibold
        valueBox.PlaceholderText = tostring(default)
        valueBox.Text = tostring(default)
        valueBox.TextColor3 = Theme.DisabledText
        valueBox.TextSize = 16
        valueBox.TextXAlignment = Enum.TextXAlignment.Right
        
        -- Slider track (just a line)
        local sliderTrack = Instance.new("Frame")
        sliderTrack.Name = "Track"
        sliderTrack.Parent = sliderFrame
        sliderTrack.BackgroundColor3 = Theme.ToggleStroke
        sliderTrack.BorderSizePixel = 0
        sliderTrack.Position = UDim2.new(0, 0, 0.8, 0)
        sliderTrack.Size = UDim2.new(0, 214, 0, 2)
        
        local sliderFill = Instance.new("Frame")
        sliderFill.Name = "Fill"
        sliderFill.Parent = sliderTrack
        sliderFill.BackgroundColor3 = Theme.Accent
        sliderFill.BorderSizePixel = 0
        sliderFill.Position = UDim2.new(0, 0, -1, 0)
        sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 0, 4)
        sliderFill.ZIndex = 2
        CreateCorner(sliderFill, 2)
        
        local sliderHead = Instance.new("TextButton")
        sliderHead.Name = "Head"
        sliderHead.Parent = sliderFill
        sliderHead.BackgroundColor3 = Color3.fromRGB(54, 54, 54)
        sliderHead.BorderSizePixel = 0
        sliderHead.Position = UDim2.new(1, -5, -0.75, 0)
        sliderHead.Size = UDim2.new(0, 10, 0, 10)
        sliderHead.Text = ""
        CreateCorner(sliderHead, 10)
        
        local value = default
        local dragging = false
        
        local function updateSlider(newValue)
            newValue = math.clamp(newValue, min, max)
            value = newValue
            
            local percentage = (value - min) / (max - min)
            sliderFill.Size = UDim2.new(percentage, 0, 0, 4)
            valueBox.Text = string.format("%.3f", value)
            
            callback(value)
        end
        
        sliderHead.MouseButton1Down:Connect(function()
            dragging = true
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local mousePos = input.Position
                local sliderPos = sliderTrack.AbsolutePosition
                local sliderSize = sliderTrack.AbsoluteSize
                
                local percentage = math.clamp((mousePos.X - sliderPos.X) / sliderSize.X, 0, 1)
                local newValue = min + (max - min) * percentage
                updateSlider(newValue)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        valueBox.FocusLost:Connect(function()
            local newValue = tonumber(valueBox.Text)
            if newValue then
                updateSlider(newValue)
            else
                valueBox.Text = string.format("%.3f", value)
            end
        end)
        
        -- Trigger section auto-scaling
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return {
            SetValue = function(newValue)
                updateSlider(newValue)
            end,
            GetValue = function()
                return value
            end
        }
    end
    
    function methods:CreateDropdown(name, options, default, callback, multiSelect)
        options = options or {}
        default = default or (options[1] or "None")
        callback = callback or function() end
        multiSelect = multiSelect or false
        
        local dropdownFrame = Instance.new("TextButton")
        dropdownFrame.Name = "Dropdown_" .. name
        dropdownFrame.Parent = self.section.contentHolder
        dropdownFrame.BackgroundTransparency = 1
        dropdownFrame.BorderSizePixel = 0
        dropdownFrame.Size = UDim2.new(0, 216, 0, 20)
        dropdownFrame.Font = Enum.Font.SourceSansSemibold
        dropdownFrame.Text = " " .. (multiSelect and table.concat(default, ", ") or default)
        dropdownFrame.TextColor3 = Theme.SubText
        dropdownFrame.TextSize = 15
        dropdownFrame.TextXAlignment = Enum.TextXAlignment.Left
        dropdownFrame.ZIndex = 1
        CreateStroke(dropdownFrame, Theme.ToggleStroke, 1)  -- Always visible stroke
        CreateCorner(dropdownFrame, 3)
        
        local arrow = Instance.new("ImageLabel")
        arrow.Name = "Arrow"
        arrow.Parent = dropdownFrame
        arrow.BackgroundTransparency = 1
        arrow.Position = UDim2.new(0.907, 0, 0, 0)
        arrow.Size = UDim2.new(0, 20, 0, 20)
        arrow.Image = "http://www.roblox.com/asset/?id=6034818372"
        arrow.ImageColor3 = Theme.DisabledText
        arrow.ZIndex = 2
        
        -- Full screen click blocker when dropdown is open
        local fullScreenBlocker = Instance.new("TextButton")  -- Changed from Frame to TextButton
        fullScreenBlocker.Name = "FullScreenBlocker"
        fullScreenBlocker.Parent = self.library.ScreenGui
        fullScreenBlocker.BackgroundTransparency = 1
        fullScreenBlocker.Position = UDim2.new(0, 0, 0, 0)
        fullScreenBlocker.Size = UDim2.new(1, 0, 1, 0)
        fullScreenBlocker.Visible = false
        fullScreenBlocker.ZIndex = 998
        fullScreenBlocker.Text = ""  -- Empty text for TextButton
        
        local dropdownHolder = Instance.new("Frame")
        dropdownHolder.Name = "DropdownHolder"
        dropdownHolder.Parent = fullScreenBlocker  -- Parent to blocker for proper layering
        dropdownHolder.BackgroundColor3 = Theme.Divider
        dropdownHolder.BorderSizePixel = 0
        dropdownHolder.Position = dropdownFrame.Position + UDim2.new(0, 0, 0, 27)  -- Position relative to dropdown
        dropdownHolder.Size = UDim2.new(0, 215, 0, #options * 17)
        dropdownHolder.Visible = false
        dropdownHolder.ZIndex = 1000
        CreateCorner(dropdownHolder, 2)
        CreateStroke(dropdownHolder, Theme.ToggleStroke, 1)  -- Always visible stroke
        
        local optionLayout = Instance.new("UIListLayout")
        optionLayout.Parent = dropdownHolder
        optionLayout.SortOrder = Enum.SortOrder.LayoutOrder
        optionLayout.Padding = UDim.new(0, 1)
        
        local selectedValue = multiSelect and (type(default) == "table" and default or {default}) or default
        local isOpen = false
        
        -- Update dropdown position when parent moves
        local function updateDropdownPosition()
            if dropdownFrame.Parent and dropdownFrame.Parent.AbsolutePosition then
                local parentPos = dropdownFrame.Parent.AbsolutePosition
                local dropdownPos = dropdownFrame.AbsolutePosition
                dropdownHolder.Position = UDim2.new(0, dropdownPos.X, 0, dropdownPos.Y + 27)
            end
        end
        
        for i, option in ipairs(options) do
            local optionButton = Instance.new("TextButton")
            optionButton.Name = "Option_" .. option
            optionButton.Parent = dropdownHolder
            optionButton.BackgroundTransparency = 1
            optionButton.Size = UDim2.new(0, 215, 0, 16)
            optionButton.Font = Enum.Font.SourceSansSemibold
            optionButton.TextSize = 14
            optionButton.TextXAlignment = Enum.TextXAlignment.Left
            optionButton.LayoutOrder = i
            optionButton.ZIndex = 1001
            
            local function updateOptionAppearance()
                if multiSelect then
                    local isSelected = false
                    for _, selected in ipairs(selectedValue) do
                        if selected == option then
                            isSelected = true
                            break
                        end
                    end
                    optionButton.Text = (isSelected and "       " or " ") .. option
                    optionButton.TextColor3 = isSelected and Theme.Accent or Theme.DisabledText
                else
                    optionButton.Text = (option == selectedValue and "       " or " ") .. option
                    optionButton.TextColor3 = option == selectedValue and Theme.Accent or Theme.DisabledText
                end
            end
            
            updateOptionAppearance()
            
            optionButton.MouseButton1Click:Connect(function()
                if multiSelect then
                    local found = false
                    for j, selected in ipairs(selectedValue) do
                        if selected == option then
                            table.remove(selectedValue, j)
                            found = true
                            break
                        end
                    end
                    if not found then
                        table.insert(selectedValue, option)
                    end
                    
                    dropdownFrame.Text = " " .. table.concat(selectedValue, ", ")
                else
                    selectedValue = option
                    dropdownFrame.Text = " " .. option
                    
                    -- Close dropdown for single select
                    fullScreenBlocker.Visible = false
                    dropdownHolder.Visible = false
                    isOpen = false
                    CreateTween(arrow, {Rotation = 0}, 0.2):Play()
                end
                
                -- Update all option appearances
                for _, child in ipairs(dropdownHolder:GetChildren()) do
                    if child:IsA("TextButton") then
                        local optName = child.Text:gsub("^%s+", "")
                        if multiSelect then
                            local isSelected = false
                            for _, selected in ipairs(selectedValue) do
                                if selected == optName then
                                    isSelected = true
                                    break
                                end
                            end
                            child.Text = (isSelected and "       " or " ") .. optName
                            child.TextColor3 = isSelected and Theme.Accent or Theme.DisabledText
                        else
                            child.Text = (optName == selectedValue and "       " or " ") .. optName
                            child.TextColor3 = optName == selectedValue and Theme.Accent or Theme.DisabledText
                        end
                    end
                end
                
                callback(selectedValue)
            end)
        end
        
        -- Close dropdown when clicking outside
        fullScreenBlocker.MouseButton1Click:Connect(function()
            fullScreenBlocker.Visible = false
            dropdownHolder.Visible = false
            isOpen = false
            CreateTween(arrow, {Rotation = 0}, 0.2):Play()
        end)
        
        dropdownFrame.MouseButton1Click:Connect(function()
            isOpen = not isOpen
            updateDropdownPosition()  -- Update position before showing
            fullScreenBlocker.Visible = isOpen
            dropdownHolder.Visible = isOpen
            
            -- Arrow rotation animation
            CreateTween(arrow, {
                Rotation = isOpen and 180 or 0
            }, 0.2):Play()
        end)
        
        -- Trigger section auto-scaling
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return {
            SetValue = function(value)
                selectedValue = value
                dropdownFrame.Text = " " .. (multiSelect and table.concat(value, ", ") or value)
                callback(value)
            end,
            GetValue = function()
                return selectedValue
            end
        }
    end
    
    function methods:CreateButton(name, callback)
        callback = callback or function() end
        
        local buttonFrame = Instance.new("TextButton")
        buttonFrame.Name = "Button_" .. name
        buttonFrame.Parent = self.section.contentHolder
        buttonFrame.BackgroundTransparency = 1
        buttonFrame.Size = UDim2.new(0, 100, 0, 30)
        buttonFrame.Font = Enum.Font.SourceSansSemibold
        buttonFrame.Text = name
        buttonFrame.TextColor3 = Theme.Text
        buttonFrame.TextSize = 15
        CreateStroke(buttonFrame, Theme.ToggleStroke, 1)
        CreateCorner(buttonFrame, 3)
        
        local isAnimating = false
        
        buttonFrame.MouseButton1Click:Connect(function()
            if isAnimating then return end
            isAnimating = true
            
            -- Button click animation
            local tween1 = CreateTween(buttonFrame, {TextColor3 = Theme.Accent}, 0.1)
            tween1:Play()
            tween1.Completed:Connect(function()
                local tween2 = CreateTween(buttonFrame, {TextColor3 = Theme.Text}, 0.1)
                tween2:Play()
                tween2.Completed:Connect(function()
                    isAnimating = false
                end)
            end)
            
            callback()
        end)
        
        -- Trigger section auto-scaling
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return buttonFrame
    end
    
    function methods:CreateKeybind(name, default, callback)
        default = default or "None"
        callback = callback or function() end
        
        local keybindFrame = Instance.new("Frame")
        keybindFrame.Name = "Keybind_" .. name
        keybindFrame.Parent = self.section.contentHolder
        keybindFrame.BackgroundTransparency = 1
        keybindFrame.Size = UDim2.new(0, 215, 0, 20)
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Parent = keybindFrame
        titleLabel.BackgroundTransparency = 1
        titleLabel.Size = UDim2.new(0, 150, 0, 20)
        titleLabel.Font = Enum.Font.SourceSansSemibold
        titleLabel.Text = name
        titleLabel.TextColor3 = Theme.SubText
        titleLabel.TextSize = 15
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        
        local keybindBox = Instance.new("TextButton")
        keybindBox.Name = "KeybindBox"
        keybindBox.Parent = keybindFrame
        keybindBox.BackgroundTransparency = 1
        keybindBox.Position = UDim2.new(0.814, 0, 0, 0)
        keybindBox.Size = UDim2.new(0, 40, 0, 20)
        keybindBox.Font = Enum.Font.SourceSansSemibold
        keybindBox.Text = default ~= "None" and default or "None"
        keybindBox.TextColor3 = Theme.Text
        keybindBox.TextSize = 15
        CreateStroke(keybindBox, Theme.ToggleStroke, 1)
        CreateCorner(keybindBox, 3)
        
        local currentKey = default
        local listening = false
        
        keybindBox.MouseButton1Click:Connect(function()
            if listening then return end
            listening = true
            keybindBox.Text = "..."
            CreateTween(keybindBox.UIStroke, {Color = Theme.Accent}, 0.2):Play()
        end)
        
        UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if listening and not gameProcessed then
                local keyName = input.KeyCode.Name
                if keyName ~= "Unknown" then
                    currentKey = keyName
                    keybindBox.Text = keyName
                    listening = false
                    CreateTween(keybindBox.UIStroke, {Color = Theme.ToggleStroke}, 0.2):Play()
                    
                    -- If this is the menu keybind, update the library's keybind
                    if name == "Menu Keybind" then
                        self.library:SetKeybind(input.KeyCode)
                    end
                    
                    callback(input.KeyCode)
                end
            end
        end)
        
        -- Trigger section auto-scaling
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return {
            SetKey = function(keyCode)
                currentKey = keyCode.Name
                keybindBox.Text = currentKey
                if name == "Menu Keybind" then
                    self.library:SetKeybind(keyCode)
                end
            end,
            GetKey = function()
                return Enum.KeyCode[currentKey]
            end
        }
    end
    
    function methods:CreateColorpicker(name, default, callback)
        default = default or Color3.fromRGB(0, 251, 255)
        callback = callback or function() end
        
        local colorpickerFrame = Instance.new("Frame")
        colorpickerFrame.Name = "Colorpicker_" .. name
        colorpickerFrame.Parent = self.section.contentHolder
        colorpickerFrame.BackgroundTransparency = 1
        colorpickerFrame.Size = UDim2.new(0, 215, 0, 20)
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Parent = colorpickerFrame
        titleLabel.BackgroundTransparency = 1
        titleLabel.Size = UDim2.new(0, 150, 0, 20)
        titleLabel.Font = Enum.Font.SourceSansSemibold
        titleLabel.Text = name
        titleLabel.TextColor3 = Theme.SubText
        titleLabel.TextSize = 15
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        
        local colorButton = Instance.new("TextButton")
        colorButton.Name = "ColorButton"
        colorButton.Parent = colorpickerFrame
        colorButton.BackgroundColor3 = default
        colorButton.BorderSizePixel = 0
        colorButton.Position = UDim2.new(0.851, 0, 0.148, 0)
        colorButton.Size = UDim2.new(0, 32, 0, 13)
        colorButton.Text = ""
        CreateCorner(colorButton, 3)
        CreateStroke(colorButton, Theme.ToggleStroke, 1)  -- Always visible stroke
        
        local currentColor = default
        
        colorButton.MouseButton1Click:Connect(function()
            self.library.colorPickerFrame.Visible = not self.library.colorPickerFrame.Visible
            -- Set the title to match the colorpicker name
            self.library.colorPickerTitle.Text = name
            self.library.currentColorCallback = function(color)
                currentColor = color
                colorButton.BackgroundColor3 = color
                callback(color)
            end
        end)
        
        -- Trigger section auto-scaling
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return {
            SetColor = function(color)
                currentColor = color
                colorButton.BackgroundColor3 = color
                callback(color)
            end,
            GetColor = function()
                return currentColor
            end
        }
    end
    
    function methods:CreateLabel(text)
        local labelFrame = Instance.new("TextLabel")
        labelFrame.Name = "Label"
        labelFrame.Parent = self.section.contentHolder
        labelFrame.BackgroundTransparency = 1
        labelFrame.Size = UDim2.new(0, 215, 0, 20)
        labelFrame.Font = Enum.Font.SourceSansSemibold
        labelFrame.Text = text
        labelFrame.TextColor3 = Theme.DisabledText
        labelFrame.TextSize = 15
        labelFrame.TextXAlignment = Enum.TextXAlignment.Center
        
        -- Trigger section auto-scaling
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return {
            SetText = function(newText)
                labelFrame.Text = newText
            end
        }
    end
    
    function methods:CreateDivider()
        local dividerFrame = Instance.new("Frame")
        dividerFrame.Name = "Divider"
        dividerFrame.Parent = self.section.contentHolder
        dividerFrame.BackgroundColor3 = Theme.Accent
        dividerFrame.BorderSizePixel = 0
        dividerFrame.Size = UDim2.new(0, 215, 0, 3)
        CreateCorner(dividerFrame, 3)
        
        -- Trigger section auto-scaling
        if self.section.updateSize then
            self.section.updateSize()
        end
        
        return dividerFrame
    end
    
    return methods
end

function Library:SwitchTab(tabIndex)
    if tabIndex == self.currentTab then return end
    
    -- Hide current tab
    if self.tabs[self.currentTab] then
        local currentTab = self.tabs[self.currentTab]
        currentTab.frame.Visible = false
        currentTab.selectedLine.Visible = false
        currentTab.lineGlow.Visible = false
        CreateTween(currentTab.button, {TextColor3 = Theme.SubText}, 0.2):Play()
    end
    
    -- Show new tab
    local newTab = self.tabs[tabIndex]
    if newTab then
        newTab.frame.Visible = true
        newTab.selectedLine.Visible = true
        newTab.lineGlow.Visible = true
        CreateTween(newTab.button, {TextColor3 = Theme.Accent}, 0.2):Play()
        
        self.currentTab = tabIndex
    end
end

function Library:UpdateTabColors()
    for i, tab in ipairs(self.tabs) do
        if i == self.currentTab then
            tab.button.TextColor3 = Theme.Accent
        else
            tab.button.TextColor3 = Theme.SubText
        end
    end
end

function Library:SetKeybind(keycode)
    self.keybind = keycode
end

function Library:SetupKeybind()
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == self.keybind then
            self:Toggle()
        end
    end)
end

function Library:Toggle()
    self.isVisible = not self.isVisible
    self.ScreenGui.Enabled = self.isVisible
    
    if self.isVisible then
        -- Fade in animation
        self.Background.BackgroundTransparency = 1
        CreateTween(self.Background, {BackgroundTransparency = 0}, 0.3):Play()
    end
end

function Library:Show()
    self.isVisible = true
    self.ScreenGui.Enabled = true
    self.Background.BackgroundTransparency = 1
    CreateTween(self.Background, {BackgroundTransparency = 0}, 0.3):Play()
end

function Library:Hide()
    self.isVisible = false
    CreateTween(self.Background, {BackgroundTransparency = 1}, 0.3):Play()
    wait(0.3)
    self.ScreenGui.Enabled = false
end

function Library:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

return Library

--[[
USAGE EXAMPLE:

local Library = require(script.UILibrary)

-- Create the main library
local ui = Library.new("o bee city", "Blackhak Rescue Mission: 5", "Admin")

-- Create tabs
local playerTab = ui:CreateTab("Tab1")
local otherTab = ui:CreateTab("Tab2")
local tab3 = ui:CreateTab("Tab3")
local tab4 = ui:CreateTab("Tab4")

-- Create sections in the player tab
local playerSection = playerTab:CreateSection("Player")

-- Add elements to the section
local enabledToggle = playerSection:CreateToggle("Enabled", true, function(value)
    print("Enabled:", value)
end)

local teamToggle = playerSection:CreateToggle("Show Team", false, function(value)
    print("Show Team:", value)
end, {
    default = Color3.fromRGB(255, 0, 0),
    callback = function(color)
        print("Team Color:", color)
    end
})

local boxToggle = playerSection:CreateToggle("Box", false, function(value)
    print("Box:", value)
end, {
    default = Color3.fromRGB(0, 251, 255),
    callback = function(color)
        print("Box Color:", color)
    end
})

local dropdown = playerSection:CreateDropdown("Target", {"Off", "Head", "Chest"}, "Off", function(value)
    print("Selected:", value)
end)

local distanceSlider = playerSection:CreateSlider("Max Distance", 0, 1, 0.150, function(value)
    print("Distance:", value)
end)

local colorpicker = playerSection:CreateColorpicker("Color", Color3.fromRGB(0, 251, 255), function(color)
    print("Color selected:", color)
end)

playerSection:CreateLabel("Text here")
playerSection:CreateDivider()

local centerButton = playerSection:CreateButton("Center Indicators", function()
    print("Center Indicators clicked!")
end)

local menuKeybind = playerSection:CreateKeybind("Menu Keybind", "None", function(key)
    print("Keybind set to:", key)
end)

local autotriggerToggle = playerSection:CreateToggle("Autotrigger", false, function(value)
    print("Autotrigger:", value)
end)

-- Create other tab content
local otherSection = otherTab:CreateSection("Other")

local otherDropdown = otherSection:CreateDropdown("Mode", {"Off", "Head", "Chest"}, "Off", function(value)
    print("Other selected:", value)
end)

local multiDropdown = otherSection:CreateDropdown("Multi Select", {"Off", "Head", "Chest"}, {"Off", "Head", "Chest"}, function(values)
    print("Multi selected:", table.concat(values, ", "))
end, true)

-- Show the UI
ui:Show()

-- Set custom keybind (optional)
ui:SetKeybind(Enum.KeyCode.Insert)
]]
