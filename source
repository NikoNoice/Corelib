local Library = {}
Library.__index = Library

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local SoundService = game:GetService("SoundService")

-- Variables
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

Library.Flags = {}
Library.Connections = {}
Library.Pages = {}
Library.CurrentPage = nil
Library.GUI = nil
Library._currentColorpicker = nil
Library._copiedColor = nil
Library.Elements = {}
Library.OpenDropdowns = {}

-- Config System Variables
Library.ConfigFolder = "obeecity"
Library.ConfigExtension = ".json"

-- Theme System
Library.Themes = {
    ["Default"] = {
        MainColor = Color3.fromRGB(66, 255, 249),
        BackgroundColor = Color3.fromRGB(17, 16, 24),
        SecondaryColor = Color3.fromRGB(28, 28, 33),
        AccentColor = Color3.fromRGB(36, 36, 43),
        TextColor = Color3.fromRGB(255, 255, 255),
        SecondaryTextColor = Color3.fromRGB(124, 121, 125),
        BorderColor = Color3.fromRGB(50, 50, 50),
        HoverColor = Color3.fromRGB(40, 40, 50),
        ClickColor = Color3.fromRGB(60, 60, 70),
    },
    ["Dark"] = {
        MainColor = Color3.fromRGB(138, 43, 226),
        BackgroundColor = Color3.fromRGB(13, 13, 13),
        SecondaryColor = Color3.fromRGB(23, 23, 23),
        AccentColor = Color3.fromRGB(33, 33, 33),
        TextColor = Color3.fromRGB(255, 255, 255),
        SecondaryTextColor = Color3.fromRGB(150, 150, 150),
        BorderColor = Color3.fromRGB(60, 60, 60),
        HoverColor = Color3.fromRGB(43, 43, 43),
        ClickColor = Color3.fromRGB(53, 53, 53),
    },
    ["Light"] = {
        MainColor = Color3.fromRGB(0, 122, 255),
        BackgroundColor = Color3.fromRGB(248, 248, 248),
        SecondaryColor = Color3.fromRGB(238, 238, 238),
        AccentColor = Color3.fromRGB(228, 228, 228),
        TextColor = Color3.fromRGB(0, 0, 0),
        SecondaryTextColor = Color3.fromRGB(100, 100, 100),
        BorderColor = Color3.fromRGB(200, 200, 200),
        HoverColor = Color3.fromRGB(218, 218, 218),
        ClickColor = Color3.fromRGB(208, 208, 208),
    },
    ["Red"] = {
        MainColor = Color3.fromRGB(255, 69, 69),
        BackgroundColor = Color3.fromRGB(20, 15, 15),
        SecondaryColor = Color3.fromRGB(30, 25, 25),
        AccentColor = Color3.fromRGB(40, 35, 35),
        TextColor = Color3.fromRGB(255, 255, 255),
        SecondaryTextColor = Color3.fromRGB(200, 150, 150),
        BorderColor = Color3.fromRGB(80, 40, 40),
        HoverColor = Color3.fromRGB(50, 45, 45),
        ClickColor = Color3.fromRGB(60, 55, 55),
    },
    ["Green"] = {
        MainColor = Color3.fromRGB(46, 204, 113),
        BackgroundColor = Color3.fromRGB(15, 20, 15),
        SecondaryColor = Color3.fromRGB(25, 30, 25),
        AccentColor = Color3.fromRGB(35, 40, 35),
        TextColor = Color3.fromRGB(255, 255, 255),
        SecondaryTextColor = Color3.fromRGB(150, 200, 150),
        BorderColor = Color3.fromRGB(40, 80, 40),
        HoverColor = Color3.fromRGB(45, 50, 45),
        ClickColor = Color3.fromRGB(55, 60, 55),
    },
    ["Orange"] = {
        MainColor = Color3.fromRGB(255, 165, 0),
        BackgroundColor = Color3.fromRGB(20, 17, 12),
        SecondaryColor = Color3.fromRGB(30, 27, 22),
        AccentColor = Color3.fromRGB(40, 37, 32),
        TextColor = Color3.fromRGB(255, 255, 255),
        SecondaryTextColor = Color3.fromRGB(200, 180, 130),
        BorderColor = Color3.fromRGB(80, 70, 30),
        HoverColor = Color3.fromRGB(50, 47, 42),
        ClickColor = Color3.fromRGB(60, 57, 52),
    }
}

Library.CurrentTheme = "Default"
Library.Settings = {
    AnimationSpeed = 0.25,
    SoundEnabled = true,
    Transparency = 0,
    Scale = 1,
    BlurEnabled = true,
    GlowEnabled = true,
    MenuKeybind = Enum.KeyCode.Insert,
    AutoSaveConfig = true,
    FadeSpeed = 0.15,
    HoverEffects = true,
    ClickEffects = true,
    RainbowMode = false,
    RainbowSpeed = 2,
}

-- Animation System
Library.Animations = {}

function Library:GetTheme()
    return self.Themes[self.CurrentTheme] or self.Themes["Default"]
end

function Library:SetTheme(themeName)
    if not self.Themes[themeName] then return end
    
    self.CurrentTheme = themeName
    self.Flags.Theme = themeName
    
    -- Update all UI elements with new theme
    self:UpdateThemeForAllElements()
    
    -- Save theme preference
    if self.Settings.AutoSaveConfig then
        self:SaveConfig("_theme_preference")
    end
end

function Library:UpdateThemeForAllElements()
    local theme = self:GetTheme()
    
    -- Update main window
    if self.GUI then
        local background = self.GUI:FindFirstChild("Background")
        if background then
            self:TweenColor(background, "BackgroundColor3", theme.BackgroundColor, 0.3)
            
            local topbar = background:FindFirstChild("Topbar")
            if topbar then
                self:TweenColor(topbar, "BackgroundColor3", theme.SecondaryColor, 0.3)
                
                local textLabel = topbar:FindFirstChild("TextLabel")
                if textLabel then
                    self:TweenColor(textLabel, "TextColor3", theme.MainColor, 0.3)
                end
            end
            
            local underBar = background:FindFirstChild("UnderBar")
            if underBar then
                self:TweenColor(underBar, "BackgroundColor3", theme.SecondaryColor, 0.3)
                
                local gameName = underBar:FindFirstChild("GameName")
                if gameName then
                    self:TweenColor(gameName, "TextColor3", theme.MainColor, 0.3)
                end
                
                local userStatus = underBar:FindFirstChild("UserStatus")
                if userStatus then
                    self:TweenColor(userStatus, "TextColor3", theme.MainColor, 0.3)
                end
            end
            
            local menuGlow = background:FindFirstChild("MenuGlow")
            if menuGlow then
                self:TweenColor(menuGlow, "ImageColor3", theme.MainColor, 0.3)
            end
        end
    end
    
    -- Update all strokes
    self:UpdateAllStrokes()
    
    -- Update all pages and sections
    for _, page in pairs(self.Pages) do
        if page.ScrollingFrame1 then
            page.ScrollingFrame1.ScrollBarImageColor3 = theme.MainColor
        end
        if page.ScrollingFrame2 then
            page.ScrollingFrame2.ScrollBarImageColor3 = theme.MainColor
        end
        -- Update section frames and their titles
        for _, section in pairs(page.Sections or {}) do
            if section.Frame then
                self:TweenColor(section.Frame, "BackgroundColor3", theme.BackgroundColor, 0.3)
                
                -- Update section title elements
                local title = section.Frame:FindFirstChild("Title")
                if title then
                    self:TweenColor(title, "BackgroundColor3", theme.SecondaryColor, 0.3)
                    
                    local titleLabel = title:FindFirstChild("TextLabel")
                    if titleLabel then
                        self:TweenColor(titleLabel, "TextColor3", theme.MainColor, 0.3)
                    end
                    
                    local roundingFiller = title:FindFirstChild("Roundingfiller")
                    if roundingFiller then
                        self:TweenColor(roundingFiller, "BackgroundColor3", theme.SecondaryColor, 0.3)
                    end
                end
            end
        end
        
        -- Update tab colors
        if page.TabButton then
            if page.Active then
                self:TweenColor(page.TabButton, "TextColor3", theme.MainColor, 0.3)
                if page.SelectedLine then
                    self:TweenColor(page.SelectedLine, "BackgroundColor3", theme.MainColor, 0.3)
                end
            else
                self:TweenColor(page.TabButton, "TextColor3", theme.SecondaryTextColor, 0.3)
            end
        end
    end
    
    -- Update all UI elements
    for _, element in pairs(self.Elements) do
        if element.SetValue and not element.SkipRefresh then
            element:SetValue(element.Value)
        end
    end
end

function Library:UpdateAllStrokes()
    local theme = self:GetTheme()
    
    local function updateStrokes(parent)
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("UIStroke") then
                self:TweenColor(child, "Color", theme.BorderColor, 0.3)
            end
            updateStrokes(child)
        end
    end
    
    if self.GUI then
        updateStrokes(self.GUI)
    end
    if self.OverlayGui then
        updateStrokes(self.OverlayGui)
    end
end

function Library:CreateSound(soundId, volume, pitch)
    -- Sounds disabled - do nothing
    return
end

-- Enhanced Tween System
function Library:TweenColor(object, property, targetColor, duration)
    local tween = TweenService:Create(object, TweenInfo.new(
        duration or self.Settings.AnimationSpeed,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    ), {[property] = targetColor})
    
    tween:Play()
    table.insert(self.Animations, tween)
    
    return tween
end

function Library:TweenSize(object, targetSize, duration)
    local tween = TweenService:Create(object, TweenInfo.new(
        duration or self.Settings.AnimationSpeed,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    ), {Size = targetSize})
    
    tween:Play()
    table.insert(self.Animations, tween)
    
    return tween
end

function Library:TweenPosition(object, targetPosition, duration)
    local tween = TweenService:Create(object, TweenInfo.new(
        duration or self.Settings.AnimationSpeed,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    ), {Position = targetPosition})
    
    tween:Play()
    table.insert(self.Animations, tween)
    
    return tween
end

function Library:TweenTransparency(object, targetTransparency, duration)
    local properties = {}
    
    if object:IsA("Frame") or object:IsA("TextLabel") or object:IsA("TextButton") then
        properties.BackgroundTransparency = targetTransparency
    end
    
    if object:IsA("TextLabel") or object:IsA("TextButton") then
        properties.TextTransparency = targetTransparency
    end
    
    if object:IsA("ImageLabel") or object:IsA("ImageButton") then
        properties.ImageTransparency = targetTransparency
    end
    
    local tween = TweenService:Create(object, TweenInfo.new(
        duration or self.Settings.FadeSpeed,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    ), properties)
    
    tween:Play()
    table.insert(self.Animations, tween)
    
    return tween
end

function Library:CreateConnection(signal, callback)
    local connection = signal:Connect(callback)
    table.insert(self.Connections, connection)
    return connection
end

function Library:Tween(object, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(duration or self.Settings.AnimationSpeed, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out)
    local tween = TweenService:Create(object, tweenInfo, properties)
    table.insert(self.Animations, tween)
    return tween
end

function Library:CreateStroke(parent, color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.Parent = parent
    stroke.Color = color or self:GetTheme().BorderColor
    stroke.Thickness = thickness or 1
    stroke.LineJoinMode = Enum.LineJoinMode.Round
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    return stroke
end

-- Enhanced Hover Effects (Simplified)
function Library:AddHoverEffect(element, hoverColor, clickColor)
    if not self.Settings.HoverEffects then return end
    
    local theme = self:GetTheme()
    local originalColor = element.BackgroundColor3
    
    -- Only add very subtle hover effects
    element.MouseEnter:Connect(function()
        if element.BackgroundTransparency < 1 then
            self:TweenColor(element, "BackgroundColor3", Color3.new(
                math.min(originalColor.R + 0.05, 1),
                math.min(originalColor.G + 0.05, 1),
                math.min(originalColor.B + 0.05, 1)
            ), 0.15)
        end
    end)
    
    element.MouseLeave:Connect(function()
        if element.BackgroundTransparency < 1 then
            self:TweenColor(element, "BackgroundColor3", originalColor, 0.15)
        end
    end)
end

-- Rainbow Mode
function Library:StartRainbowMode()
    if self.RainbowConnection then
        self.RainbowConnection:Disconnect()
    end
    
    local hue = 0
    self.RainbowConnection = self:CreateConnection(RunService.Heartbeat, function()
        if not self.Settings.RainbowMode then return end
        
        hue = (hue + (self.Settings.RainbowSpeed / 1000)) % 1
        local rainbowColor = Color3.fromHSV(hue, 1, 1)
        
        -- Update main color elements
        local theme = self:GetTheme()
        theme.MainColor = rainbowColor
        
        -- Update specific elements
        if self.GUI then
            local background = self.GUI:FindFirstChild("Background")
            if background then
                local topbar = background:FindFirstChild("Topbar")
                if topbar then
                    local textLabel = topbar:FindFirstChild("TextLabel")
                    if textLabel then
                        textLabel.TextColor3 = rainbowColor
                    end
                end
                
                local underBar = background:FindFirstChild("UnderBar")
                if underBar then
                    local gameName = underBar:FindFirstChild("GameName")
                    if gameName then
                        gameName.TextColor3 = rainbowColor
                    end
                    
                    local userStatus = underBar:FindFirstChild("UserStatus")
                    if userStatus then
                        userStatus.TextColor3 = rainbowColor
                    end
                end
                
                local menuGlow = background:FindFirstChild("MenuGlow")
                if menuGlow then
                    menuGlow.ImageColor3 = rainbowColor
                end
            end
        end
    end)
end

-- Config System Functions
function Library:InitializeConfigSystem()
    if not isfolder(self.ConfigFolder) then
        makefolder(self.ConfigFolder)
    end
end

function Library:SaveConfig(name)
    self:InitializeConfigSystem()
    
    local configData = {
        flags = {},
        settings = self.Settings,
        theme = self.CurrentTheme
    }
    
    for flag, value in pairs(self.Flags) do
        if typeof(value) == "Color3" then
            configData.flags[flag] = {value.R, value.G, value.B}
        else
            configData.flags[flag] = value
        end
    end
    
    local success, err = pcall(function()
        writefile(self.ConfigFolder .. "/" .. name .. self.ConfigExtension, HttpService:JSONEncode(configData))
    end)
    
    if success then
        return true, "Config saved successfully"
    else
        return false, err or "Unknown error occurred"
    end
end

function Library:LoadConfig(name)
    self:InitializeConfigSystem()
    
    local filePath = self.ConfigFolder .. "/" .. name .. self.ConfigExtension
    if not isfile(filePath) then
        return false, "Config file does not exist"
    end
    
    local success, result = pcall(function()
        local fileContent = readfile(filePath)
        local configData = HttpService:JSONDecode(fileContent)
        
        -- Load flags
        if configData.flags then
            for flag, value in pairs(configData.flags) do
                if type(value) == "table" and #value == 3 and type(value[1]) == "number" then
                    self.Flags[flag] = Color3.fromRGB(math.floor(value[1] * 255), math.floor(value[2] * 255), math.floor(value[3] * 255))
                else
                    self.Flags[flag] = value
                end
            end
        end
        
        -- Load settings
        if configData.settings then
            for setting, value in pairs(configData.settings) do
                self.Settings[setting] = value
            end
        end
        
        -- Load theme
        if configData.theme then
            self:SetTheme(configData.theme)
        end
        
        -- Update UI elements
        for _, element in pairs(self.Elements) do
            if element.Flag and self.Flags[element.Flag] ~= nil then
                if element.SetValue then
                    element:SetValue(self.Flags[element.Flag])
                end
            end
        end
        
        return true
    end)
    
    if success then
        return true, "Config loaded successfully"
    else
        return false, result
    end
end

function Library:DeleteConfig(name)
    local filePath = self.ConfigFolder .. "/" .. name .. self.ConfigExtension
    if isfile(filePath) then
        local success, err = pcall(function()
            delfile(filePath)
        end)
        return success
    end
    return false
end

function Library:RenameConfig(oldName, newName)
    local oldPath = self.ConfigFolder .. "/" .. oldName .. self.ConfigExtension
    local newPath = self.ConfigFolder .. "/" .. newName .. self.ConfigExtension
    
    if isfile(oldPath) and not isfile(newPath) then
        local success, err = pcall(function()
            local content = readfile(oldPath)
            writefile(newPath, content)
            delfile(oldPath)
        end)
        return success
    end
    return false
end

function Library:GetConfigs()
    self:InitializeConfigSystem()
    
    local configs = {}
    local files = listfiles(self.ConfigFolder)
    
    for _, file in ipairs(files) do
        if file:sub(-#self.ConfigExtension) == self.ConfigExtension then
            local fileName = file:match("([^/\\]+)$")
            local configName = fileName:gsub(self.ConfigExtension .. "$", "")
            if configName ~= "_theme_preference" then -- Hide internal config
                table.insert(configs, configName)
            end
        end
    end
    
    return configs
end

-- Color conversion functions
function Library:HSVtoRGB(h, s, v)
    local r, g, b
    local i = math.floor(h * 6)
    local f = h * 6 - i
    local p = v * (1 - s)
    local q = v * (1 - f * s)
    local t = v * (1 - (1 - f) * s)
    
    local imod = i % 6
    if imod == 0 then
        r, g, b = v, t, p
    elseif imod == 1 then
        r, g, b = q, v, p
    elseif imod == 2 then
        r, g, b = p, v, t
    elseif imod == 3 then
        r, g, b = p, q, v
    elseif imod == 4 then
        r, g, b = t, p, v
    elseif imod == 5 then
        r, g, b = v, p, q
    end
    
    return r, g, b
end

function Library:RGBtoHSV(r, g, b)
    local max = math.max(r, g, b)
    local min = math.min(r, g, b)
    local h, s, v = 0, 0, max
    
    local d = max - min
    s = max == 0 and 0 or d / max
    
    if max == min then
        h = 0
    else
        if max == r then
            h = (g - b) / d + (g < b and 6 or 0)
        elseif max == g then
            h = (b - r) / d + 2
        elseif max == b then
            h = (r - g) / d + 4
        end
        h = h / 6
    end
    
    return h, s, v
end

-- Enhanced Colorpicker System
function Library:CreateColorpickerWindow(colorpicker)
    if colorpicker._window then
        colorpicker._window:Destroy()
        colorpicker._window = nil
        Library._currentColorpicker = nil
        return
    end

    if Library._currentColorpicker
    and Library._currentColorpicker._window 
    and Library._currentColorpicker ~= colorpicker then
        Library._currentColorpicker._window:Destroy()
        Library._currentColorpicker._window = nil
    end
    Library._currentColorpicker = colorpicker

    if colorpicker._rainbow == nil then colorpicker._rainbow = false end
    if colorpicker._rainbowSpeed == nil then colorpicker._rainbowSpeed = 5 end

    if colorpicker._rainbowConnection then
        colorpicker._rainbowConnection:Disconnect()
        colorpicker._rainbowConnection = nil
    end
    
    local theme = self:GetTheme()
    
    local ColorpickerFrame = Instance.new("Frame")
    local UICorner = Instance.new("UICorner")
    local Colorpicker = Instance.new("Frame")
    local UICorner_2 = Instance.new("UICorner")
    local HueImage = Instance.new("ImageLabel")
    local UICorner_3 = Instance.new("UICorner")
    local SaturationImage = Instance.new("ImageLabel")
    local UICorner_4 = Instance.new("UICorner")
    local ColorpickerHead = Instance.new("Frame")
    local UICorner_5 = Instance.new("UICorner")
    local HueSlider = Instance.new("Frame")
    local UICorner_6 = Instance.new("UICorner")
    local HueGradient = Instance.new("UIGradient")
    local HueHead = Instance.new("Frame")
    local UICorner_7 = Instance.new("UICorner")
    local List = Instance.new("Frame")
    local UIListLayout = Instance.new("UIListLayout")
    local RainbowToggle = Instance.new("TextButton")
    local UICorner_8 = Instance.new("UICorner")
    local RainbowTitle = Instance.new("TextLabel")
    local RainbowCheckmark = Instance.new("ImageLabel")
    local SpeedSlider = Instance.new("TextLabel")
    local SpeedSliderBar = Instance.new("Frame")
    local SpeedFiller = Instance.new("Frame")
    local UICorner_9 = Instance.new("UICorner")
    local SpeedHead = Instance.new("TextButton")
    local UICorner_10 = Instance.new("UICorner")
    local SpeedValue = Instance.new("TextBox")
    local CopyButton = Instance.new("TextButton")
    local PasteButton = Instance.new("TextButton")
    local CloseButton = Instance.new("TextButton")
    
    -- Properties with theme colors
    ColorpickerFrame.Name = "ColorpickerFrame"
    ColorpickerFrame.Parent = Library.OverlayGui
    ColorpickerFrame.BackgroundColor3 = theme.BackgroundColor
    ColorpickerFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
    ColorpickerFrame.BorderSizePixel = 0
    ColorpickerFrame.Position = UDim2.new(0, 500, 0, 100)
    ColorpickerFrame.Size = UDim2.new(0, 321, 0, 225)
    ColorpickerFrame.ZIndex = 100
    
    -- Add fade-in animation
    ColorpickerFrame.BackgroundTransparency = 1
    self:TweenTransparency(ColorpickerFrame, 0, 0.2)
    
    UICorner.CornerRadius = UDim.new(0, 3)
    UICorner.Parent = ColorpickerFrame
    
    Library:CreateStroke(ColorpickerFrame, theme.BorderColor, 1)
    
    -- Continue with rest of colorpicker creation...
    Colorpicker.Name = "Colorpicker"
    Colorpicker.Parent = ColorpickerFrame
    Colorpicker.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Colorpicker.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Colorpicker.BorderSizePixel = 0
    Colorpicker.Position = UDim2.new(0.034, 0, 0.059, 0)
    Colorpicker.Size = UDim2.new(0, 150, 0, 150)
    Colorpicker.ZIndex = 101
    
    UICorner_2.CornerRadius = UDim.new(0, 3)
    UICorner_2.Parent = Colorpicker
    
    HueImage.Name = "HueImage"
    HueImage.Parent = Colorpicker
    HueImage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    HueImage.BackgroundTransparency = 1.000
    HueImage.BorderColor3 = Color3.fromRGB(0, 0, 0)
    HueImage.BorderSizePixel = 0
    HueImage.Size = UDim2.new(1, 0, 1, 0)
    HueImage.Image = "rbxassetid://6976876787"
    HueImage.ImageColor3 = Color3.fromRGB(255, 0, 0)
    HueImage.ZIndex = 102
    
    UICorner_3.CornerRadius = UDim.new(0, 3)
    UICorner_3.Parent = HueImage
    
    SaturationImage.Name = "SaturationImage"
    SaturationImage.Parent = Colorpicker
    SaturationImage.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    SaturationImage.BackgroundTransparency = 1.000
    SaturationImage.BorderColor3 = Color3.fromRGB(0, 0, 0)
    SaturationImage.BorderSizePixel = 0
    SaturationImage.Size = UDim2.new(1, 0, 1, 0)
    SaturationImage.ZIndex = 103
    SaturationImage.Image = "rbxassetid://6941137543"
    SaturationImage.ImageColor3 = Color3.fromRGB(0, 0, 0)
    
    UICorner_4.CornerRadius = UDim.new(0, 3)
    UICorner_4.Parent = SaturationImage
    
    ColorpickerHead.Name = "ColorpickerHead"
    ColorpickerHead.Parent = Colorpicker
    ColorpickerHead.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ColorpickerHead.BorderColor3 = Color3.fromRGB(0, 0, 0)
    ColorpickerHead.BorderSizePixel = 0
    ColorpickerHead.Position = UDim2.new(0.5, 0, 0.5, 0)
    ColorpickerHead.Size = UDim2.new(0, 12, 0, 12)
    ColorpickerHead.ZIndex = 104
    
    UICorner_5.CornerRadius = UDim.new(1, 0)
    UICorner_5.Parent = ColorpickerHead
    
    Library:CreateStroke(ColorpickerHead, Color3.fromRGB(0, 0, 0), 2)
    
    -- Hue Slider
    HueSlider.Name = "HueSlider"
    HueSlider.Parent = ColorpickerFrame
    HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    HueSlider.BorderColor3 = Color3.fromRGB(0, 0, 0)
    HueSlider.BorderSizePixel = 0
    HueSlider.Position = UDim2.new(0.034, 0, 0.82, 0)
    HueSlider.Size = UDim2.new(0, 150, 0, 10)
    HueSlider.ZIndex = 101
    
    UICorner_6.CornerRadius = UDim.new(0, 3)
    UICorner_6.Parent = HueSlider
    
    HueGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
        ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))
    }
    HueGradient.Parent = HueSlider
    
    HueHead.Name = "HueHead"
    HueHead.Parent = HueSlider
    HueHead.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    HueHead.BorderColor3 = Color3.fromRGB(0, 0, 0)
    HueHead.BorderSizePixel = 0
    HueHead.Position = UDim2.new(0, 0, -0.3, 0)
    HueHead.Size = UDim2.new(0, 4, 0, 16)
    HueHead.ZIndex = 102
    
    UICorner_7.CornerRadius = UDim.new(0, 2)
    UICorner_7.Parent = HueHead
    
    Library:CreateStroke(HueHead, Color3.fromRGB(0, 0, 0), 1)
    
    -- Rest of colorpicker setup...
    List.Name = "List"
    List.Parent = ColorpickerFrame
    List.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    List.BackgroundTransparency = 1.000
    List.BorderColor3 = Color3.fromRGB(0, 0, 0)
    List.BorderSizePixel = 0
    List.Position = UDim2.new(0.536, 0, 0.057, 0)
    List.Size = UDim2.new(0, 136, 0, 100)
    List.ZIndex = 101
    
    UIListLayout.Parent = List
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 7)
    
    -- Rainbow Toggle
    RainbowToggle.Name = "RainbowToggle"
    RainbowToggle.Parent = List
    RainbowToggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    RainbowToggle.BackgroundTransparency = 1.000
    RainbowToggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
    RainbowToggle.BorderSizePixel = 0
    RainbowToggle.Size = UDim2.new(0, 18, 0, 18)
    RainbowToggle.ZIndex = 102
    RainbowToggle.Font = Enum.Font.SourceSans
    RainbowToggle.Text = ""
    RainbowToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
    RainbowToggle.TextSize = 14.000
    
    UICorner_8.CornerRadius = UDim.new(0, 3)
    UICorner_8.Parent = RainbowToggle
    
    Library:CreateStroke(RainbowToggle, theme.BorderColor, 1)
    Library:AddHoverEffect(RainbowToggle)
    
    RainbowTitle.Name = "RainbowTitle"
    RainbowTitle.Parent = RainbowToggle
    RainbowTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    RainbowTitle.BackgroundTransparency = 1.000
    RainbowTitle.BorderColor3 = Color3.fromRGB(0, 0, 0)
    RainbowTitle.BorderSizePixel = 0
    RainbowTitle.Position = UDim2.new(1.461, 0, -0.056, 0)
    RainbowTitle.Size = UDim2.new(0, 82, 0, 20)
    RainbowTitle.Font = Enum.Font.SourceSansSemibold
    RainbowTitle.Text = "Rainbow"
    RainbowTitle.TextColor3 = theme.SecondaryTextColor
    RainbowTitle.TextSize = 15.000
    RainbowTitle.TextXAlignment = Enum.TextXAlignment.Left
    RainbowTitle.ZIndex = 102
    
    RainbowCheckmark.Name = "RainbowCheckmark"
    RainbowCheckmark.Parent = RainbowToggle
    RainbowCheckmark.BackgroundTransparency = 1.000
    RainbowCheckmark.BorderSizePixel = 0
    RainbowCheckmark.Position = UDim2.new(0.111, 0, 0.111, 0)
    RainbowCheckmark.Size = UDim2.new(0, 13, 0, 13)
    RainbowCheckmark.Image = "http://www.roblox.com/asset/?id=6031094667"
    RainbowCheckmark.ImageColor3 = Color3.fromRGB(0, 0, 0)
    RainbowCheckmark.Visible = false
    RainbowCheckmark.ZIndex = 103
    
    -- Speed Slider
    SpeedSlider.Name = "SpeedSlider"
    SpeedSlider.Parent = List
    SpeedSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SpeedSlider.BackgroundTransparency = 1.000
    SpeedSlider.BorderColor3 = Color3.fromRGB(0, 0, 0)
    SpeedSlider.BorderSizePixel = 0
    SpeedSlider.Size = UDim2.new(0, 136, 0, 32)
    SpeedSlider.Font = Enum.Font.SourceSansSemibold
    SpeedSlider.Text = "Speed"
    SpeedSlider.TextColor3 = theme.SecondaryTextColor
    SpeedSlider.TextSize = 15.000
    SpeedSlider.TextXAlignment = Enum.TextXAlignment.Left
    SpeedSlider.TextYAlignment = Enum.TextYAlignment.Top
    SpeedSlider.ZIndex = 102
    
    SpeedSliderBar.Name = "SpeedSliderBar"
    SpeedSliderBar.Parent = SpeedSlider
    SpeedSliderBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SpeedSliderBar.BackgroundTransparency = 1.000
    SpeedSliderBar.BorderColor3 = Color3.fromRGB(0, 0, 0)
    SpeedSliderBar.BorderSizePixel = 0
    SpeedSliderBar.Position = UDim2.new(0, 0, 0.8, 0)
    SpeedSliderBar.Size = UDim2.new(0, 120, 0, 2)
    SpeedSliderBar.ZIndex = 102
    
    Library:CreateStroke(SpeedSliderBar, theme.BorderColor, 1)
    
    SpeedFiller.Name = "SpeedFiller"
    SpeedFiller.Parent = SpeedSliderBar
    SpeedFiller.BackgroundColor3 = theme.MainColor
    SpeedFiller.BorderColor3 = Color3.fromRGB(0, 0, 0)
    SpeedFiller.BorderSizePixel = 0
    SpeedFiller.Position = UDim2.new(0, 0, -1, 0)
    SpeedFiller.Size = UDim2.new(0, 60, 0, 4)
    SpeedFiller.ZIndex = 103
    
    UICorner_9.CornerRadius = UDim.new(0, 2)
    UICorner_9.Parent = SpeedFiller
    
    SpeedHead.Name = "SpeedHead"
    SpeedHead.Parent = SpeedFiller
    SpeedHead.BackgroundColor3 = theme.AccentColor
    SpeedHead.BorderColor3 = Color3.fromRGB(0, 0, 0)
    SpeedHead.BorderSizePixel = 0
    SpeedHead.Position = UDim2.new(0.9, 0, -0.5, 0)
    SpeedHead.Size = UDim2.new(0, 10, 0, 10)
    SpeedHead.ZIndex = 104
    SpeedHead.Font = Enum.Font.SourceSans
    SpeedHead.Text = ""
    SpeedHead.TextColor3 = Color3.fromRGB(0, 0, 0)
    SpeedHead.TextSize = 14.000
    
    UICorner_10.CornerRadius = UDim.new(1, 0)
    UICorner_10.Parent = SpeedHead
    
    Library:CreateStroke(SpeedHead, theme.BorderColor, 1)
    Library:AddHoverEffect(SpeedHead)
    
    SpeedValue.Name = "SpeedValue"
    SpeedValue.Parent = SpeedSlider
    SpeedValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SpeedValue.BackgroundTransparency = 1.000
    SpeedValue.BorderColor3 = Color3.fromRGB(0, 0, 0)
    SpeedValue.BorderSizePixel = 0
    SpeedValue.AnchorPoint = Vector2.new(1, 0)
    SpeedValue.Position = UDim2.new(1, -4, 0, 0)
    SpeedValue.TextYAlignment = Enum.TextYAlignment.Center
    SpeedValue.Size = UDim2.new(0, 30, 0, 19)
    SpeedValue.Font = Enum.Font.SourceSansSemibold
    SpeedValue.Text = "5"
    SpeedValue.TextColor3 = theme.SecondaryTextColor
    SpeedValue.TextSize = 16.000
    SpeedValue.TextXAlignment = Enum.TextXAlignment.Right
    SpeedValue.ZIndex = 102
    
    -- Copy and Paste buttons
    CopyButton.Name = "CopyButton"
    CopyButton.Parent = ColorpickerFrame
    CopyButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    CopyButton.BackgroundTransparency = 1.000
    CopyButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
    CopyButton.BorderSizePixel = 0
    CopyButton.Position = UDim2.new(0.535, 0, 0.71, 0)
    CopyButton.Size = UDim2.new(0, 63, 0, 20)
    CopyButton.Font = Enum.Font.SourceSansSemibold
    CopyButton.Text = "Copy"
    CopyButton.TextColor3 = theme.TextColor
    CopyButton.TextSize = 15.000
    CopyButton.ZIndex = 101
    
    Library:CreateStroke(CopyButton, theme.BorderColor, 1)
    Library:AddHoverEffect(CopyButton)
    
    PasteButton.Name = "PasteButton"
    PasteButton.Parent = ColorpickerFrame
    PasteButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    PasteButton.BackgroundTransparency = 1.000
    PasteButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
    PasteButton.BorderSizePixel = 0
    PasteButton.Position = UDim2.new(0.762, 0, 0.71, 0)
    PasteButton.Size = UDim2.new(0, 63, 0, 20)
    PasteButton.Font = Enum.Font.SourceSansSemibold
    PasteButton.Text = "Paste"
    PasteButton.TextColor3 = theme.TextColor
    PasteButton.TextSize = 15.000
    PasteButton.ZIndex = 101
    
    Library:CreateStroke(PasteButton, theme.BorderColor, 1)
    Library:AddHoverEffect(PasteButton)
    
    -- Close button
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = ColorpickerFrame
    CloseButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.BackgroundTransparency = 1.000
    CloseButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
    CloseButton.BorderSizePixel = 0
    CloseButton.Position = UDim2.new(0.9, 0, 0.02, 0)
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Font = Enum.Font.SourceSansBold
    CloseButton.Text = "×"
    CloseButton.TextColor3 = theme.TextColor
    CloseButton.TextSize = 18.000
    CloseButton.ZIndex = 101
    
    -- Variables for colorpicker state
    local h, s, v = 0, 1, 1
    local rainbow = colorpicker._rainbow
    local rainbowSpeed = colorpicker._rainbowSpeed
    
    -- Convert current color to HSV
    local currentColor = colorpicker.Value
    if currentColor then
        h, s, v = Library:RGBtoHSV(currentColor.R, currentColor.G, currentColor.B)
    end
    
    -- Update functions
    local function updateColorpicker()
        local r, g, b = Library:HSVtoRGB(h, s, v)
        local color = Color3.fromRGB(math.floor(r * 255), math.floor(g * 255), math.floor(b * 255))
        
        -- Update hue background
        local hueR, hueG, hueB = Library:HSVtoRGB(h, 1, 1)
        HueImage.ImageColor3 = Color3.fromRGB(math.floor(hueR * 255), math.floor(hueG * 255), math.floor(hueB * 255))
        
        -- Update head positions with animations
        Library:TweenPosition(ColorpickerHead, UDim2.new(s, -6, 1-v, -6), 0.1)
        Library:TweenPosition(HueHead, UDim2.new(h, -2, -0.3, 0), 0.1)
        
        -- Update colorpicker value
        colorpicker:SetValue(color)
    end
    
    -- helper to start/stop rainbow
    local function startRainbow()
        if colorpicker._rainbowConnection then
            colorpicker._rainbowConnection:Disconnect()
        end
        colorpicker._rainbowConnection = Library:CreateConnection(RunService.Heartbeat, function()
            if colorpicker._rainbow then
                local currentH,s,v = Library:RGBtoHSV(colorpicker.Value.R, colorpicker.Value.G, colorpicker.Value.B)
                currentH = (currentH + (colorpicker._rainbowSpeed/1000)) % 1
                local r,g,b = Library:HSVtoRGB(currentH,s,v)
                local c = Color3.fromRGB(r*255,g*255,b*255)
                
                -- Update the global h value for UI synchronization
                h = currentH
                
                -- Update hue slider position to follow rainbow
                HueHead.Position = UDim2.new(h, -2, -0.3, 0)
                
                -- Update hue background
                local hueR, hueG, hueB = Library:HSVtoRGB(h, 1, 1)
                HueImage.ImageColor3 = Color3.fromRGB(math.floor(hueR * 255), math.floor(hueG * 255), math.floor(hueB * 255))
                
                colorpicker:SetValue(c)
            end
        end)
    end

    local function stopRainbow()
        if colorpicker._rainbowConnection then
            colorpicker._rainbowConnection:Disconnect()
            colorpicker._rainbowConnection = nil
        end
    end
    
    -- Color picker interactions
    local colorpickerDragging = false
    local hueDragging = false
    local speedDragging = false
    local windowDragging = false
    local dragStart = nil
    local startPos = nil
    
    Library:CreateConnection(Colorpicker.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and input.Position and Colorpicker.AbsolutePosition then
            colorpickerDragging = true
            local inputPos = Vector2.new(input.Position.X, input.Position.Y)
            local rel = inputPos - Colorpicker.AbsolutePosition
            s = math.clamp(rel.X / Colorpicker.AbsoluteSize.X, 0, 1)
            v = 1 - math.clamp(rel.Y / Colorpicker.AbsoluteSize.Y, 0, 1)
            updateColorpicker()
        end
    end)
    
    Library:CreateConnection(HueSlider.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and input.Position and HueSlider.AbsolutePosition then
            hueDragging = true
            local inputPos = Vector2.new(input.Position.X, input.Position.Y)
            local rel = inputPos - HueSlider.AbsolutePosition
            h = math.clamp(rel.X / HueSlider.AbsoluteSize.X, 0, 1)
            updateColorpicker()
        end
    end)
    
    Library:CreateConnection(SpeedHead.MouseButton1Down, function()
        speedDragging = true
    end)
    
    Library:CreateConnection(UserInputService.InputChanged, function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and input.Position then
            if colorpickerDragging then
                local inputPos = Vector2.new(input.Position.X, input.Position.Y)
                if Colorpicker and Colorpicker.AbsolutePosition then
                    local rel = inputPos - Colorpicker.AbsolutePosition
                    s = math.clamp(rel.X / Colorpicker.AbsoluteSize.X, 0, 1)
                    v = 1 - math.clamp(rel.Y / Colorpicker.AbsoluteSize.Y, 0, 1)
                    updateColorpicker()
                end
            elseif hueDragging then
                local inputPos = Vector2.new(input.Position.X, input.Position.Y)
                if HueSlider and HueSlider.AbsolutePosition then
                    local rel = inputPos - HueSlider.AbsolutePosition
                    h = math.clamp(rel.X / HueSlider.AbsoluteSize.X, 0, 1)
                    updateColorpicker()
                end
            elseif speedDragging then
                local inputPos = Vector2.new(input.Position.X, input.Position.Y)
                if SpeedSliderBar and SpeedSliderBar.AbsolutePosition then
                    local rel = inputPos - SpeedSliderBar.AbsolutePosition
                    local percent = math.clamp(rel.X / SpeedSliderBar.AbsoluteSize.X, 0, 1)
                    colorpicker._rainbowSpeed = math.floor(percent * 20) + 1
                    local barWidth = SpeedSliderBar.AbsoluteSize.X
                    Library:TweenSize(SpeedFiller, UDim2.new(0, barWidth * percent, 0, 4), 0.1)
                    Library:TweenPosition(SpeedHead, UDim2.new(0, (barWidth * percent) - 5, -0.5, 0), 0.1)
                    SpeedValue.Text = tostring(colorpicker._rainbowSpeed)
                end
            elseif windowDragging and dragStart and startPos then
                local inputPos = Vector2.new(input.Position.X, input.Position.Y)
                local delta = inputPos - dragStart
                ColorpickerFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end
    end)
    
    Library:CreateConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            colorpickerDragging = false
            hueDragging = false
            speedDragging = false
            windowDragging = false
        end
    end)
    
    -- Rainbow toggle
    Library:CreateConnection(RainbowToggle.MouseButton1Click, function()
        rainbow = not rainbow
        colorpicker._rainbow = rainbow

        if rainbow then
            Library:TweenColor(RainbowToggle, "BackgroundColor3", theme.MainColor, 0.2)
            RainbowToggle.BackgroundTransparency = 0
            Library:TweenColor(RainbowTitle, "TextColor3", theme.TextColor, 0.2)
            RainbowCheckmark.Visible = true
            startRainbow()
        else
            Library:TweenColor(RainbowToggle, "BackgroundColor3", Color3.fromRGB(255, 255, 255), 0.2)
            RainbowToggle.BackgroundTransparency = 1
            Library:TweenColor(RainbowTitle, "TextColor3", theme.SecondaryTextColor, 0.2)
            RainbowCheckmark.Visible = false
            stopRainbow()
        end
    end)
    
    -- Copy and Paste functionality
    Library:CreateConnection(CopyButton.MouseButton1Click, function()
        Library._copiedColor = colorpicker.Value
    end)
    
    Library:CreateConnection(PasteButton.MouseButton1Click, function()
        if Library._copiedColor then
            h, s, v = Library:RGBtoHSV(Library._copiedColor.R, Library._copiedColor.G, Library._copiedColor.B)
            updateColorpicker()
        end
    end)
    
    -- Close button
    Library:CreateConnection(CloseButton.MouseButton1Click, function()
        Library:TweenTransparency(ColorpickerFrame, 1, 0.2)
        wait(0.2)
        colorpicker._window = nil
        Library._currentColorpicker = nil
        ColorpickerFrame:Destroy()
    end)
    
    -- Speed value textbox
    Library:CreateConnection(SpeedValue.FocusLost, function()
        local value = tonumber(SpeedValue.Text)
        if value then
            colorpicker._rainbowSpeed = math.clamp(value, 1, 20)
            SpeedValue.Text = tostring(colorpicker._rainbowSpeed)
            local percent = (colorpicker._rainbowSpeed - 1) / 19
            local barWidth = SpeedSliderBar.AbsoluteSize.X
            if barWidth > 0 then
                Library:TweenSize(SpeedFiller, UDim2.new(0, barWidth * percent, 0, 4), 0.2)
                Library:TweenPosition(SpeedHead, UDim2.new(0, (barWidth * percent) - 5, -0.5, 0), 0.2)
            end
        end
    end)
    
    -- Make window draggable
    local DragArea = Instance.new("Frame")
    DragArea.Name = "DragArea"
    DragArea.Parent = ColorpickerFrame
    DragArea.BackgroundTransparency = 1
    DragArea.Position = UDim2.new(0, 0, 0, 0)
    DragArea.Size = UDim2.new(1, 0, 0, 30)
    DragArea.ZIndex = 99
    
    Library:CreateConnection(DragArea.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and input.Position then
            windowDragging = true
            dragStart = Vector2.new(input.Position.X, input.Position.Y)
            startPos = ColorpickerFrame.Position
        end
    end)
    
    Library:CreateConnection(UserInputService.InputChanged, function(input)
        if windowDragging and input.UserInputType == Enum.UserInputType.MouseMovement and dragStart and startPos then
            local mp = Vector2.new(input.Position.X, input.Position.Y)
            local delta = mp - dragStart
            ColorpickerFrame.Position = UDim2.new(
              startPos.X.Scale, startPos.X.Offset + delta.X,
              startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)

    -- Sync UI to saved state
    spawn(function()
        RunService.Heartbeat:Wait()

        -- rainbow toggle
        if colorpicker._rainbow then
            startRainbow()
        end
        RainbowToggle.BackgroundTransparency = colorpicker._rainbow and 0 or 1
        RainbowToggle.BackgroundColor3 = colorpicker._rainbow and theme.MainColor or Color3.fromRGB(255,255,255)
        RainbowTitle.TextColor3 = colorpicker._rainbow and theme.TextColor or theme.SecondaryTextColor
        RainbowCheckmark.Visible = colorpicker._rainbow

        -- speed slider
        local pct = (colorpicker._rainbowSpeed - 1) / 19
        local barW = SpeedSliderBar.AbsoluteSize.X
        SpeedFiller.Size = UDim2.new(0, barW * pct, 0, 4)
        SpeedHead.Position = UDim2.new(0, barW * pct - 5, -0.5, 0)
        SpeedValue.Text = tostring(colorpicker._rainbowSpeed)
    end)
    
    -- Initial update
    updateColorpicker()
    
    -- Store window reference
    colorpicker._window = ColorpickerFrame
    return ColorpickerFrame
end

-- Main Library Functions
function Library:CreateWindow(config)
    local Window = {}
    Window.Name = config.Name or "o bee city"
    Window.Pages = {}
    Window.CurrentPage = nil
    
    local theme = self:GetTheme()
    
    -- Create main GUI structure
    local coresploit = Instance.new("ScreenGui")
    local Background = Instance.new("Frame")
    local UICorner = Instance.new("UICorner")
    local Topbar = Instance.new("Frame")
    local TabsHolder = Instance.new("Frame")
    local TextLabel = Instance.new("TextLabel")
    local Roundingfiller = Instance.new("Frame")
    local UICorner_2 = Instance.new("UICorner")
    local Frame = Instance.new("Frame")
    local UnderBar = Instance.new("Frame")
    local GameName = Instance.new("TextLabel")
    local UserStatus = Instance.new("TextLabel")
    local MenuGlow = Instance.new("ImageLabel")
    local UIListLayout = Instance.new("UIListLayout")
    
    -- Keybind Mode Frame
    local KeybindModeFrame = Instance.new("Frame")
    local Frame_2 = Instance.new("Frame")
    local TextButton = Instance.new("TextButton")
    local TextButton_2 = Instance.new("TextButton")
    local TextButton_3 = Instance.new("TextButton")
    local UIListLayout_7 = Instance.new("UIListLayout")
    local TextLabel_4 = Instance.new("TextLabel")
    local Frame_3 = Instance.new("Frame")
    local UICorner_28 = Instance.new("UICorner")

    -- Properties with theme colors
    coresploit.Name = "coresploit"
    coresploit.Parent = LocalPlayer:WaitForChild("PlayerGui")
    coresploit.Enabled = true
    coresploit.ZIndexBehavior = Enum.ZIndexBehavior.Global

    local overlay = Instance.new("ScreenGui")
    overlay.Name = "coresploitOverlay"
    overlay.Parent = LocalPlayer.PlayerGui
    overlay.ZIndexBehavior = Enum.ZIndexBehavior.Global
    overlay.DisplayOrder = 1
    Library.OverlayGui = overlay

    Background.Name = "Background"
    Background.Parent = coresploit
    Background.BackgroundColor3 = theme.BackgroundColor
    Background.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Background.BorderSizePixel = 0
    Background.Position = UDim2.new(0.5, -235, 0.5, -290)
    Background.Size = UDim2.new(0, 470, 0, 581)
    
    -- Add fade-in animation
    Background.BackgroundTransparency = 1
    self:TweenTransparency(Background, 0, 0.5)
    
    Library:CreateStroke(Background, theme.BorderColor, 1)

    UICorner.CornerRadius = UDim.new(0, 3)
    UICorner.Parent = Background

    Topbar.Name = "Topbar"
    Topbar.Parent = Background
    Topbar.BackgroundColor3 = theme.SecondaryColor
    Topbar.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Topbar.BorderSizePixel = 0
    Topbar.Position = UDim2.new(0, 0, 0.0103270225, 0)
    Topbar.Size = UDim2.new(0, 470, 0, 30)

    TabsHolder.Name = "TabsHolder"
    TabsHolder.Parent = Topbar
    TabsHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TabsHolder.BackgroundTransparency = 1.000
    TabsHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
    TabsHolder.BorderSizePixel = 0
    TabsHolder.Position = UDim2.new(0.506383002, 0, -0.17647095, 0)
    TabsHolder.Size = UDim2.new(0, 232, 0, 36)

    UIListLayout.Parent = TabsHolder
    UIListLayout.FillDirection = Enum.FillDirection.Horizontal
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 8)

    TextLabel.Parent = Topbar
    TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.BackgroundTransparency = 1.000
    TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
    TextLabel.BorderSizePixel = 0
    TextLabel.Position = UDim2.new(0.0245389901, 0, -0.200000003, 0)
    TextLabel.Size = UDim2.new(0, 120, 0, 32)
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.Text = Window.Name
    TextLabel.TextColor3 = theme.MainColor
    TextLabel.TextSize = 14.000
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left

    Roundingfiller.Name = "Roundingfiller"
    Roundingfiller.Parent = Topbar
    Roundingfiller.BackgroundColor3 = theme.SecondaryColor
    Roundingfiller.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Roundingfiller.BorderSizePixel = 0
    Roundingfiller.ClipsDescendants = true
    Roundingfiller.Position = UDim2.new(0, 0, -0.209804028, 0)
    Roundingfiller.Size = UDim2.new(0, 470, 0, 7)
    Roundingfiller.ZIndex = 1

    UICorner_2.CornerRadius = UDim.new(0, 3)
    UICorner_2.Parent = Roundingfiller

    Frame.Parent = Topbar
    Frame.BackgroundColor3 = theme.AccentColor
    Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Frame.BorderSizePixel = 0
    Frame.Position = UDim2.new(0, 0, 0.95686239, 0)
    Frame.Size = UDim2.new(0, 469, 0, 1)

    UnderBar.Name = "UnderBar"
    UnderBar.Parent = Background
    UnderBar.BackgroundColor3 = theme.SecondaryColor
    UnderBar.BorderColor3 = Color3.fromRGB(0, 0, 0)
    UnderBar.BorderSizePixel = 0
    UnderBar.Position = UDim2.new(0.00212765951, 0, 0.963855445, 0)
    UnderBar.Size = UDim2.new(0, 468, 0, 21)
    
    Library:CreateStroke(UnderBar, theme.BorderColor, 1)

    GameName.Name = "GameName"
    GameName.Parent = UnderBar
    GameName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    GameName.BackgroundTransparency = 1.000
    GameName.BorderColor3 = Color3.fromRGB(0, 0, 0)
    GameName.BorderSizePixel = 0
    GameName.Position = UDim2.new(0, 5, 0, 0)
    GameName.Size = UDim2.new(0, 300, 0, 21)
    GameName.Font = Enum.Font.SourceSansSemibold
    GameName.Text = (game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name or "Unknown")
    GameName.TextColor3 = theme.MainColor
    GameName.TextSize = 14.000
    GameName.TextXAlignment = Enum.TextXAlignment.Left

    UserStatus.Name = "UserStatus"
    UserStatus.Parent = UnderBar
    UserStatus.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    UserStatus.BackgroundTransparency = 1.000
    UserStatus.BorderColor3 = Color3.fromRGB(0, 0, 0)
    UserStatus.BorderSizePixel = 0
    UserStatus.Position = UDim2.new(0.786324799, 0, 0, 0)
    UserStatus.Size = UDim2.new(0, 94, 0, 21)
    UserStatus.Font = Enum.Font.SourceSansSemibold
    UserStatus.Text = "User"
    UserStatus.TextColor3 = theme.MainColor
    UserStatus.TextSize = 14.000
    UserStatus.TextXAlignment = Enum.TextXAlignment.Right

    MenuGlow.Name = "MenuGlow"
    MenuGlow.Parent = Background
    MenuGlow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    MenuGlow.BackgroundTransparency = 1.000
    MenuGlow.BorderColor3 = Color3.fromRGB(0, 0, 0)
    MenuGlow.BorderSizePixel = 0
    MenuGlow.Position = UDim2.new(-0.047340557, 0, -0.0366644785, 0)
    MenuGlow.Size = UDim2.new(0, 513, 0, 623)
    MenuGlow.ZIndex = 1
    MenuGlow.Image = "rbxassetid://18245826428"
    MenuGlow.ImageColor3 = theme.MainColor
    MenuGlow.ImageTransparency = self.Settings.GlowEnabled and 0.740 or 1
    MenuGlow.ScaleType = Enum.ScaleType.Slice
    MenuGlow.SliceCenter = Rect.new(21, 21, 79, 79)

    -- Keybind Mode Frame
    KeybindModeFrame.Name = "KeybindModeFrame"
    KeybindModeFrame.Parent = Background
    KeybindModeFrame.BackgroundColor3 = theme.SecondaryColor
    KeybindModeFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
    KeybindModeFrame.BorderSizePixel = 0
    KeybindModeFrame.Position = UDim2.new(0.351444304, 0, 0.550614119, 0)
    KeybindModeFrame.Size = UDim2.new(0, 98, 0, 68)
    KeybindModeFrame.Visible = false
    KeybindModeFrame.ZIndex = 3
    Library:CreateStroke(KeybindModeFrame, theme.BorderColor, 1)

    Frame_2.Parent = KeybindModeFrame
    Frame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Frame_2.BackgroundTransparency = 1.000
    Frame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Frame_2.BorderSizePixel = 0
    Frame_2.Position = UDim2.new(0.0379588865, 0, 0.26470542, 0)
    Frame_2.Size = UDim2.new(0, 96, 0, 50)

    TextButton.Parent = Frame_2
    TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.BackgroundTransparency = 1.000
    TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
    TextButton.BorderSizePixel = 0
    TextButton.Position = UDim2.new(0, 0, 0.0399999991, 0)
    TextButton.Size = UDim2.new(0, 88, 0, 14)
    TextButton.ZIndex = 3
    TextButton.Font = Enum.Font.SourceSansSemibold
    TextButton.Text = "Hold"
    TextButton.TextColor3 = theme.TextColor
    TextButton.TextSize = 14.000
    TextButton.TextXAlignment = Enum.TextXAlignment.Left

    TextButton_2.Parent = Frame_2
    TextButton_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TextButton_2.BackgroundTransparency = 1.000
    TextButton_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
    TextButton_2.BorderSizePixel = 0
    TextButton_2.Position = UDim2.new(0, 0, 0.00722045917, 0)
    TextButton_2.Size = UDim2.new(0, 88, 0, 14)
    TextButton_2.ZIndex = 3
    TextButton_2.Font = Enum.Font.SourceSansSemibold
    TextButton_2.Text = "Toggle"
    TextButton_2.TextColor3 = theme.SecondaryTextColor
    TextButton_2.TextSize = 14.000
    TextButton_2.TextXAlignment = Enum.TextXAlignment.Left

    TextButton_3.Parent = Frame_2
    TextButton_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TextButton_3.BackgroundTransparency = 1.000
    TextButton_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
    TextButton_3.BorderSizePixel = 0
    TextButton_3.Position = UDim2.new(0.0500000007, 0, 0.144117743, 0)
    TextButton_3.Size = UDim2.new(0, 88, 0, 14)
    TextButton_3.ZIndex = 3
    TextButton_3.Font = Enum.Font.SourceSansSemibold
    TextButton_3.Text = "Always"
    TextButton_3.TextColor3 = theme.SecondaryTextColor
    TextButton_3.TextSize = 14.000
    TextButton_3.TextXAlignment = Enum.TextXAlignment.Left

    UIListLayout_7.Parent = Frame_2
    UIListLayout_7.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout_7.Padding = UDim.new(0, 2)

    TextLabel_4.Parent = KeybindModeFrame
    TextLabel_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel_4.BackgroundTransparency = 1.000
    TextLabel_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
    TextLabel_4.BorderSizePixel = 0
    TextLabel_4.Position = UDim2.new(0.0379588865, 0, -0.00705898507, 0)
    TextLabel_4.Size = UDim2.new(0, 94, 0, 18)
    TextLabel_4.Font = Enum.Font.SourceSansSemibold
    TextLabel_4.Text = "Mode"
    TextLabel_4.TextColor3 = theme.MainColor
    TextLabel_4.TextSize = 14.000
    TextLabel_4.TextXAlignment = Enum.TextXAlignment.Left
    TextLabel_4.ZIndex = 50

    Frame_3.Parent = TextLabel_4
    Frame_3.BackgroundColor3 = theme.AccentColor
    Frame_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Frame_3.BorderSizePixel = 0
    Frame_3.Position = UDim2.new(-0.0531914905, 0, 0.944444418, 0)
    Frame_3.Size = UDim2.new(0, 100, 0, 1)

    UICorner_28.CornerRadius = UDim.new(0, 3)
    UICorner_28.Parent = KeybindModeFrame

    -- Add hover effects to keybind buttons
    -- Library:AddHoverEffect(TextButton)
    -- Library:AddHoverEffect(TextButton_2)
    -- Library:AddHoverEffect(TextButton_3)
    
    -- Store references
    Window.GUI = coresploit
    Window.Background = Background
    Window.TabsHolder = TabsHolder
    Window.KeybindModeFrame = KeybindModeFrame
    Window.KeybindModeButtons = {TextButton, TextButton_2, TextButton_3}
    Library.GUI = coresploit
    Library.Pages = Window.Pages -- Store reference to pages
    
    -- Make draggable with smooth animation
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    Library:CreateConnection(Background.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Background.Position
            
            -- Add visual feedback
            self:TweenColor(Background, "BackgroundColor3", Color3.new(
                theme.BackgroundColor.R * 1.1,
                theme.BackgroundColor.G * 1.1,
                theme.BackgroundColor.B * 1.1
            ), 0.1)
        end
    end)
    
    Library:CreateConnection(UserInputService.InputChanged, function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            Background.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    Library:CreateConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            -- Reset visual feedback
            self:TweenColor(Background, "BackgroundColor3", theme.BackgroundColor, 0.1)
        end
    end)
    
    -- Menu toggle functionality
    Library:CreateConnection(UserInputService.InputBegan, function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == self.Settings.MenuKeybind or input.UserInputType == self.Settings.MenuKeybind then
            local isVisible = coresploit.Enabled
            coresploit.Enabled = not isVisible
            
            if not isVisible then
                -- Fade in animation
                Background.BackgroundTransparency = 1
                self:TweenTransparency(Background, 0, 0.3)
            end
        end
    end)
    
    -- Start rainbow mode if enabled
    if self.Settings.RainbowMode then
        self:StartRainbowMode()
    end
    
    -- Page functions
    function Window:CreatePage(config)
        local Page = {}
        Page.Name = config.Name or "Tab"
        Page.Window = Window
        Page.Sections = {}
        Page.Active = false
        
        local theme = Library:GetTheme()
        
        -- Create tab button
        local title = Instance.new("TextLabel")
        local SelectedLine = Instance.new("Frame")
        local LineGlow = Instance.new("Frame")
        local UIGradient = Instance.new("UIGradient")
        
        title.Name = "title"
        title.Parent = TabsHolder
        title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        title.BackgroundTransparency = 1.000
        title.BorderColor3 = Color3.fromRGB(0, 0, 0)
        title.BorderSizePixel = 0
        title.Size = UDim2.new(0, 50, 0, 32)
        title.Font = Enum.Font.SourceSansSemibold
        title.Text = Page.Name
        title.TextColor3 = theme.SecondaryTextColor
        title.TextSize = 14.000
        
        SelectedLine.Name = "SelectedLine"
        SelectedLine.Parent = title
        SelectedLine.BackgroundColor3 = theme.MainColor
        SelectedLine.BorderColor3 = Color3.fromRGB(0, 0, 0)
        SelectedLine.BorderSizePixel = 0
        SelectedLine.Position = UDim2.new(-0.0599999987, 0, 1, 0)
        SelectedLine.Size = UDim2.new(0, 55, 0, 2)
        SelectedLine.Visible = false
        
        LineGlow.Name = "LineGlow"
        LineGlow.Parent = title
        LineGlow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        LineGlow.BackgroundTransparency = 0.900
        LineGlow.BorderColor3 = Color3.fromRGB(0, 0, 0)
        LineGlow.BorderSizePixel = 0
        LineGlow.Position = UDim2.new(-0.06,  0, -0.022, 0)
        LineGlow.Size     = UDim2.new( 0,   55,   0,   32)
        LineGlow.Visible = false
        LineGlow.ZIndex = 10
        
        UIGradient.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, theme.MainColor), 
            ColorSequenceKeypoint.new(1.00, theme.MainColor)
        }
        UIGradient.Rotation = 90
        UIGradient.Transparency = NumberSequence.new{
            NumberSequenceKeypoint.new(0.00, 1.00), 
            NumberSequenceKeypoint.new(0.00, 0.00), 
            NumberSequenceKeypoint.new(1.00, 0.00)
        }
        UIGradient.Parent = LineGlow
        
        -- Add hover effect to tab
        -- Library:AddHoverEffect(title, Color3.new(0, 0, 0), Color3.new(0, 0, 0))
        
        -- Create page content areas
        local Section1 = Instance.new("Frame")
        local Section2 = Instance.new("Frame")
        
        -- Section 1 (Left) - Convert to ScrollingFrame
        Section1.Name = "Section1"
        Section1.Parent = Background
        Section1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Section1.BackgroundTransparency = 1.000
        Section1.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Section1.BorderSizePixel = 0
        Section1.Position = UDim2.new(0.0127659574, 0, 0.0730183199, 0)
        Section1.Size = UDim2.new(0, 225, 0, 480) -- Reduced from 520 to 480
        Section1.Visible = false
        
        -- Make it a scrolling frame
        local ScrollingFrame1 = Instance.new("ScrollingFrame")
        ScrollingFrame1.Name = "ScrollingFrame1"
        ScrollingFrame1.Parent = Section1
        ScrollingFrame1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        ScrollingFrame1.BackgroundTransparency = 1.000
        ScrollingFrame1.BorderColor3 = Color3.fromRGB(0, 0, 0)
        ScrollingFrame1.BorderSizePixel = 0
        ScrollingFrame1.Size = UDim2.new(1, 0, 1, 0)
        ScrollingFrame1.ScrollBarThickness = 2
        ScrollingFrame1.ScrollBarImageColor3 = theme.MainColor
        ScrollingFrame1.AutomaticCanvasSize = Enum.AutomaticSize.Y
        ScrollingFrame1.CanvasSize = UDim2.new(0, 0, 0, 0)
        
        -- Add list layout to ScrollingFrame1 for auto-sizing
        local Section1Layout = Instance.new("UIListLayout")
        Section1Layout.Parent = ScrollingFrame1
        Section1Layout.SortOrder = Enum.SortOrder.LayoutOrder
        Section1Layout.Padding = UDim.new(0, 10)
        Section1Layout.FillDirection = Enum.FillDirection.Vertical
        
        -- Add padding to ScrollingFrame1
        local Section1Padding = Instance.new("UIPadding")
        Section1Padding.PaddingBottom = UDim.new(0, 20)
        Section1Padding.PaddingTop = UDim.new(0, 5)
        Section1Padding.Parent = ScrollingFrame1
        
        -- Section 2 (Right) - Convert to ScrollingFrame
        Section2.Name = "Section2"
        Section2.Parent = Background
        Section2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Section2.BackgroundTransparency = 1.000
        Section2.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Section2.BorderSizePixel = 0
        Section2.Position = UDim2.new(0.510638297, 0, 0.0730183199, 0)
        Section2.Size = UDim2.new(0, 225, 0, 480) -- Reduced from 520 to 480
        Section2.Visible = false
        
        -- Make it a scrolling frame
        local ScrollingFrame2 = Instance.new("ScrollingFrame")
        ScrollingFrame2.Name = "ScrollingFrame2"
        ScrollingFrame2.Parent = Section2
        ScrollingFrame2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        ScrollingFrame2.BackgroundTransparency = 1.000
        ScrollingFrame2.BorderColor3 = Color3.fromRGB(0, 0, 0)
        ScrollingFrame2.BorderSizePixel = 0
        ScrollingFrame2.Size = UDim2.new(1, 0, 1, 0)
        ScrollingFrame2.ScrollBarThickness = 2
        ScrollingFrame2.ScrollBarImageColor3 = theme.MainColor
        ScrollingFrame2.AutomaticCanvasSize = Enum.AutomaticSize.Y
        ScrollingFrame2.CanvasSize = UDim2.new(0, 0, 0, 0)
        
        -- Add list layout to ScrollingFrame2 for auto-sizing
        local Section2Layout = Instance.new("UIListLayout")
        Section2Layout.Parent = ScrollingFrame2
        Section2Layout.SortOrder = Enum.SortOrder.LayoutOrder
        Section2Layout.Padding = UDim.new(0, 10)
        Section2Layout.FillDirection = Enum.FillDirection.Vertical
        
        -- Add padding to ScrollingFrame2
        local Section2Padding = Instance.new("UIPadding")
        Section2Padding.PaddingBottom = UDim.new(0, 20)
        Section2Padding.PaddingTop = UDim.new(0, 5)
        Section2Padding.Parent = ScrollingFrame2
        
        
        Page.Section1 = Section1
        Page.Section2 = Section2
        Page.ScrollingFrame1 = ScrollingFrame1
        Page.ScrollingFrame2 = ScrollingFrame2
        Page.TabButton = title
        Page.SelectedLine = SelectedLine
        Page.LineGlow = LineGlow

        
        -- Tab click handler with simple animation
        Library:CreateConnection(title.InputBegan, function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                Window:SetPage(Page)
            end
        end)
        
        function Page:SetActive(active)
            Page.Active = active
            local theme = Library:GetTheme()
            
            if active then
                Library:TweenColor(title, "TextColor3", theme.MainColor, 0.2)
                SelectedLine.Visible = true
                LineGlow.Visible = true
                Section1.Visible = true
                Section2.Visible = true
                
                -- Animate selected line
                SelectedLine.Size = UDim2.new(0, 0, 0, 2)
                Library:TweenSize(SelectedLine, UDim2.new(0, 55, 0, 2), 0.3)
            else
                Library:TweenColor(title, "TextColor3", theme.SecondaryTextColor, 0.2)
                SelectedLine.Visible = false
                LineGlow.Visible = false
                Section1.Visible = false
                Section2.Visible = false
            end
        end
        
        function Page:CreateSection(config)
            local Section = {}
            Section.Name = config.Name or "Section"
            Section.Side = config.Side or "left"
            Section.Page = Page
            Section.Elements = {}
            
            local parentFrame = Section.Side == "left" and 
                (Page.ScrollingFrame1 or Section1) or 
                (Page.ScrollingFrame2 or Section2)
            local theme = Library:GetTheme()
            
            -- Create section with enhanced styling
            local SectionFrame = Instance.new("Frame")
            local UICorner = Instance.new("UICorner")
            local Title = Instance.new("Frame")
            local Roundingfiller = Instance.new("Frame")
            local UICorner_2 = Instance.new("UICorner")
            local TitleLabel = Instance.new("TextLabel")
            local SectionHolder = Instance.new("Frame")
            local UIListLayout = Instance.new("UIListLayout")
            
            SectionFrame.Name = "SectionFrame"
            SectionFrame.Parent = parentFrame
            SectionFrame.BackgroundColor3 = theme.BackgroundColor
            SectionFrame.BackgroundTransparency = 0.000
            SectionFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
            SectionFrame.BorderSizePixel = 0
            SectionFrame.Size = UDim2.new(1, 0, 0, 300)
            
            UICorner.CornerRadius = UDim.new(0, 3)
            UICorner.Parent = SectionFrame
            
            Title.Name = "Title"
            Title.Parent = SectionFrame
            Title.BackgroundColor3 = theme.SecondaryColor
            Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
            Title.BorderSizePixel = 0
            Title.Position = UDim2.new(0, 0, 0.0219435729, 0)
            Title.Size = UDim2.new(0, 225, 0, 15)
            
            Library:CreateStroke(Title, theme.BorderColor, 1)
            
            Roundingfiller.Name = "Roundingfiller"
            Roundingfiller.Parent = Title
            Roundingfiller.BackgroundColor3 = theme.SecondaryColor
            Roundingfiller.BorderColor3 = Color3.fromRGB(0, 0, 0)
            Roundingfiller.BorderSizePixel = 0
            Roundingfiller.Position = UDim2.new(0, 0, -0.48, 0)
            Roundingfiller.Size = UDim2.new(0, 225, 0, 10)

            UICorner_2.CornerRadius = UDim.new(0, 3)
            UICorner_2.Parent = Roundingfiller
            
            TitleLabel.Parent = Title
            TitleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            TitleLabel.BackgroundTransparency = 1.000
            TitleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
            TitleLabel.BorderSizePixel = 0
            TitleLabel.Position = UDim2.new(0.0279069766, 0, -0.466666669, 0)
            TitleLabel.Size = UDim2.new(0, 79, 0, 22)
            TitleLabel.Font = Enum.Font.SourceSansSemibold
            TitleLabel.Text = Section.Name
            TitleLabel.TextColor3 = theme.MainColor
            TitleLabel.TextSize = 15.000
            TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
            
            SectionHolder.Name = "SectionHolder"
            SectionHolder.Parent = SectionFrame
            SectionHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SectionHolder.BackgroundTransparency = 1.000
            SectionHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
            SectionHolder.BorderSizePixel = 0
            SectionHolder.Position = UDim2.new(0.0149999997, 0, 0.0877742916, 0)
            SectionHolder.Size = UDim2.new(0, 216, 0, 283)
            
            UIListLayout.Parent = SectionHolder
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout.Padding = UDim.new(0, 7)
            
            Section.Frame = SectionFrame
            Section.SectionHolder = SectionHolder
            
            -- Enhanced Toggle Element
            function Section:CreateToggle(config)
                local Toggle = {}
                Toggle.Name = config.Name or "Toggle"
                Toggle.Default = config.Default or false
                Toggle.Flag = config.Flag or Toggle.Name
                Toggle.Callback = config.Callback or function() end
                Toggle.Value = Toggle.Default
                
                local theme = Library:GetTheme()
                
                local ToggleButton = Instance.new("TextButton")
                local UICorner = Instance.new("UICorner")
                local title = Instance.new("TextLabel")
                local checkmark = Instance.new("ImageLabel")
                
                ToggleButton.Name = "ToggleButton"
                ToggleButton.Parent = SectionHolder
                ToggleButton.BackgroundColor3 = Toggle.Default and theme.MainColor or Color3.fromRGB(255, 255, 255)
                ToggleButton.BackgroundTransparency = Toggle.Default and 0 or 1
                ToggleButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
                ToggleButton.BorderSizePixel = 0
                ToggleButton.Size = UDim2.new(0, 18, 0, 18)
                ToggleButton.ZIndex = 1
                ToggleButton.Font = Enum.Font.SourceSans
                ToggleButton.Text = ""
                ToggleButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                ToggleButton.TextSize = 14.000
                
                UICorner.CornerRadius = UDim.new(0, 3)
                UICorner.Parent = ToggleButton
                
                Library:CreateStroke(ToggleButton, theme.BorderColor, 1)
                
                title.Name = "title"
                title.Parent = ToggleButton
                title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                title.BackgroundTransparency = 1.000
                title.BorderColor3 = Color3.fromRGB(0, 0, 0)
                title.BorderSizePixel = 0
                title.Position = UDim2.new(1.46110022, 0, -0.055555556, 0)
                title.Size = UDim2.new(0, 120, 0, 20)
                title.Font = Enum.Font.SourceSansSemibold
                title.Text = Toggle.Name
                title.TextColor3 = Toggle.Default and theme.TextColor or theme.SecondaryTextColor
                title.TextSize = 15.000
                title.TextXAlignment = Enum.TextXAlignment.Left
                
                checkmark.Name = "checkmark"
                checkmark.Parent = ToggleButton
                checkmark.BackgroundTransparency = 1.000
                checkmark.BorderSizePixel = 0
                checkmark.Position = UDim2.new(0.111111112, 0, 0.111111112, 0)
                checkmark.Size = UDim2.new(0, 13, 0, 13)
                checkmark.Image = "http://www.roblox.com/asset/?id=6031094667"
                checkmark.ImageColor3 = Color3.fromRGB(0, 0, 0)
                checkmark.Visible = Toggle.Default
                
                function Toggle:SetValue(value)
                    Toggle.Value = value
                    Library.Flags[Toggle.Flag] = value
                    
                    local theme = Library:GetTheme()
                    
                    if value then
                        Library:TweenColor(ToggleButton, "BackgroundColor3", theme.MainColor, 0.2)
                        ToggleButton.BackgroundTransparency = 0
                        Library:TweenColor(title, "TextColor3", theme.TextColor, 0.2)
                        checkmark.Visible = true
                    else
                        Library:TweenColor(ToggleButton, "BackgroundColor3", Color3.fromRGB(255, 255, 255), 0.2)
                        ToggleButton.BackgroundTransparency = 1
                        Library:TweenColor(title, "TextColor3", theme.SecondaryTextColor, 0.2)
                        checkmark.Visible = false
                    end
                    
                    Toggle.Callback(value)
                end
                
                function Toggle:AddColorpicker(config)
                    local Colorpicker = {}
                    Colorpicker.Name = config.Name or "Color"
                    Colorpicker.Default = config.Default or Color3.fromRGB(255, 0, 0)
                    Colorpicker.Flag = config.Flag or Toggle.Flag .. "_Color"
                    Colorpicker.Callback = config.Callback or function() end
                    Colorpicker.Value = Colorpicker.Default
                    
                    local ColorpickerButton = Instance.new("TextButton")
                    local UICorner = Instance.new("UICorner")
                    
                    ColorpickerButton.Name = "ColorpickerBinded"
                    ColorpickerButton.Parent = ToggleButton
                    ColorpickerButton.BackgroundColor3 = Colorpicker.Default
                    ColorpickerButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    ColorpickerButton.BorderSizePixel = 0
                    ColorpickerButton.Position = UDim2.new(10.2222223, 0, 0.111111112, 0)
                    ColorpickerButton.Size = UDim2.new(0, 32, 0, 13)
                    ColorpickerButton.Font = Enum.Font.SourceSans
                    ColorpickerButton.Text = ""
                    ColorpickerButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                    ColorpickerButton.TextSize = 14.000
                    
                    UICorner.CornerRadius = UDim.new(0, 3)
                    UICorner.Parent = ColorpickerButton
                    
                    Library:CreateStroke(ColorpickerButton, theme.BorderColor, 1)
                    
                    function Colorpicker:SetValue(color)
                        Colorpicker.Value = color
                        Library.Flags[Colorpicker.Flag] = color
                        Library:TweenColor(ColorpickerButton, "BackgroundColor3", color, 0.2)
                        Colorpicker.Callback(color)
                    end
                    
                    Library:CreateConnection(ColorpickerButton.MouseButton1Click, function()
                        Library:CreateColorpickerWindow(Colorpicker)
                    end)
                    
                    Colorpicker:SetValue(Colorpicker.Default)
                    Library.Elements[Colorpicker.Flag] = Colorpicker
                    return Colorpicker
                end
                
                function Toggle:AddKeybind(config)
                    local Keybind = {}
                    Keybind.Name = config.Name or "Keybind"
                    Keybind.Default = config.Default or "None"
                    Keybind.Flag = config.Flag or Toggle.Flag .. "_Keybind"
                    Keybind.Callback = config.Callback or function() end
                    Keybind.Value = Keybind.Default
                    Keybind.Mode = "Toggle"
                    Keybind.Listening = false
                    
                    local TextService = game:GetService("TextService")
                    local MIN_W = 20
                    local H_PADDING = 8
                    local V_PADDING = 0
                    
                    local KeybindBox = Instance.new("TextButton")
                    
                    KeybindBox.Name = "KeybindBinded"
                    KeybindBox.Parent = ToggleButton
                    KeybindBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    KeybindBox.BackgroundTransparency = 1.000
                    KeybindBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    KeybindBox.BorderSizePixel = 0
                    KeybindBox.AnchorPoint = Vector2.new(1, 0.5)
                    KeybindBox.Position = UDim2.new(1, 197, 0.5, V_PADDING)
                    KeybindBox.Size = UDim2.new(0, MIN_W, 0, 20)
                    KeybindBox.Font = Enum.Font.SourceSansSemibold
                    KeybindBox.Text = Keybind.Default
                    KeybindBox.TextColor3 = theme.TextColor
                    KeybindBox.TextSize = 15.000
                    KeybindBox.TextScaled = false
                    KeybindBox.AutoButtonColor = false
                    
                    Library:CreateStroke(KeybindBox, theme.BorderColor, 1)
                    
                    -- Key name mapping
                    local KeyNames = {
                        [Enum.KeyCode.LeftShift] = "LShift",
                        [Enum.KeyCode.RightShift] = "RShift",
                        [Enum.KeyCode.LeftControl] = "LCtrl",
                        [Enum.KeyCode.RightControl] = "RCtrl",
                        [Enum.KeyCode.LeftAlt] = "LAlt",
                        [Enum.KeyCode.RightAlt] = "RAlt",
                        [Enum.KeyCode.Space] = "Space",
                        [Enum.KeyCode.Return] = "Enter",
                        [Enum.KeyCode.BackSlash] = "\\",
                        [Enum.KeyCode.Slash] = "/",
                        [Enum.KeyCode.Period] = ".",
                        [Enum.KeyCode.Comma] = ",",
                        [Enum.KeyCode.Semicolon] = ";",
                        [Enum.KeyCode.Quote] = "'",
                        [Enum.KeyCode.LeftBracket] = "[",
                        [Enum.KeyCode.RightBracket] = "]",
                        [Enum.KeyCode.Minus] = "-",
                        [Enum.KeyCode.Equals] = "=",
                        [Enum.KeyCode.Backquote] = "`",
                        [Enum.KeyCode.Tab] = "Tab",
                        [Enum.KeyCode.CapsLock] = "Caps",
                        [Enum.UserInputType.MouseButton1] = "MB1",
                        [Enum.UserInputType.MouseButton2] = "MB2",
                        [Enum.UserInputType.MouseButton3] = "MB3"
                    }
                    
                    function Keybind:SetValue(key)
                        Keybind.Value = key
                        Library.Flags[Keybind.Flag] = key
                        
                        local displayName = "None"
                        if key and key ~= "None" then
                            if KeyNames[key] then
                                displayName = KeyNames[key]
                            elseif typeof(key) == "EnumItem" then
                                displayName = key.Name
                            else
                                displayName = tostring(key)
                            end
                        end
                        
                        KeybindBox.Text = displayName
                        
                        local bounds = TextService:GetTextSize(
                            displayName,
                            15,
                            Enum.Font.SourceSansSemibold,
                            Vector2.new(1e5, 20)
                        )
                        local newWidth = math.max(MIN_W, bounds.X + H_PADDING*2)
                        
                        Library:TweenSize(KeybindBox, UDim2.new(0, newWidth, 0, 20), 0.2)
                        
                        Keybind.Callback(key)
                    end
                    
                    Library:CreateConnection(KeybindBox.MouseButton1Click, function()
                        if not Keybind.Listening then
                            Keybind.Listening = true
                            KeybindBox.Text = "..."
                            Library:TweenColor(KeybindBox, "TextColor3", theme.SecondaryTextColor, 0.2)
                            
                            local connection
                            connection = Library:CreateConnection(UserInputService.InputBegan, function(input2, gameProcessed)
                                if gameProcessed then return end
                                
                                local key = nil
                                if input2.UserInputType == Enum.UserInputType.Keyboard then
                                    key = input2.KeyCode
                                elseif input2.UserInputType == Enum.UserInputType.MouseButton1 or 
                                       input2.UserInputType == Enum.UserInputType.MouseButton2 or 
                                       input2.UserInputType == Enum.UserInputType.MouseButton3 then
                                    key = input2.UserInputType
                                end
                                
                                if key then
                                    Keybind:SetValue(key)
                                    Library:TweenColor(KeybindBox, "TextColor3", theme.TextColor, 0.2)
                                    Keybind.Listening = false
                                    connection:Disconnect()
                                end
                            end)
                        end
                    end)
                    
                    Library:CreateConnection(KeybindBox.MouseButton2Click, function()
                        Window.KeybindModeFrame.Visible = true
                        Window.KeybindModeFrame.Position = UDim2.new(0, Mouse.X - Window.Background.AbsolutePosition.X, 0, Mouse.Y - Window.Background.AbsolutePosition.Y)
                        
                        -- Add fade-in animation
                        Window.KeybindModeFrame.BackgroundTransparency = 1
                        Library:TweenTransparency(Window.KeybindModeFrame, 0, 0.2)
                        
                        for i, btn in pairs(Window.KeybindModeButtons) do
                            Library:CreateConnection(btn.MouseButton1Click, function()
                                Keybind.Mode = btn.Text
                                Library:TweenTransparency(Window.KeybindModeFrame, 1, 0.2)
                                wait(0.2)
                                Window.KeybindModeFrame.Visible = false
                                
                                -- Update button colors
                                for j, b in pairs(Window.KeybindModeButtons) do
                                    if b == btn then
                                        Library:TweenColor(b, "TextColor3", theme.TextColor, 0.2)
                                    else
                                        Library:TweenColor(b, "TextColor3", theme.SecondaryTextColor, 0.2)
                                    end
                                end
                            end)
                        end
                    end)
                    
                    Keybind:SetValue(Keybind.Default)
                    Library.Elements[Keybind.Flag] = Keybind
                    return Keybind
                end
                
                Library:CreateConnection(ToggleButton.MouseButton1Click, function()
                    Toggle:SetValue(not Toggle.Value)
                end)
                
                Toggle:SetValue(Toggle.Default)
                Library.Elements[Toggle.Flag] = Toggle
                return Toggle
            end
            
            -- Enhanced Slider Element
            function Section:CreateSlider(config)
                local Slider = {}
                Slider.Name = config.Name or "Slider"
                Slider.Min = config.Min or 0
                Slider.Max = config.Max or 100
                Slider.Default = config.Default or 0
                Slider.Flag = config.Flag or Slider.Name
                Slider.Callback = config.Callback or function() end
                Slider.Value = Slider.Default
                
                local theme = Library:GetTheme()
                
                local SliderFrame = Instance.new("TextLabel")
                local SliderBar = Instance.new("Frame")
                local Filler = Instance.new("Frame")
                local UICorner = Instance.new("UICorner")
                local SliderHead = Instance.new("TextButton")
                local UICorner_2 = Instance.new("UICorner")
                local SliderValue = Instance.new("TextBox")
                
                SliderFrame.Name = "Slider"
                SliderFrame.Parent = SectionHolder
                SliderFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderFrame.BackgroundTransparency = 1.000
                SliderFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                SliderFrame.BorderSizePixel = 0
                SliderFrame.Size = UDim2.new(0, 215, 0, 32)
                SliderFrame.Font = Enum.Font.SourceSansSemibold
                SliderFrame.Text = Slider.Name
                SliderFrame.TextColor3 = theme.SecondaryTextColor
                SliderFrame.TextSize = 15.000
                SliderFrame.TextXAlignment = Enum.TextXAlignment.Left
                SliderFrame.TextYAlignment = Enum.TextYAlignment.Top
                
                SliderBar.Name = "Slider"
                SliderBar.Parent = SliderFrame
                SliderBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderBar.BackgroundTransparency = 1.000
                SliderBar.BorderColor3 = Color3.fromRGB(0, 0, 0)
                SliderBar.BorderSizePixel = 0
                SliderBar.Position = UDim2.new(0, 0, 0.800000012, 0)
                SliderBar.Size = UDim2.new(0, 214, 0, 2)
                
                Library:CreateStroke(SliderBar, theme.BorderColor, 1)
                
                Filler.Name = "Filler"
                Filler.Parent = SliderBar
                Filler.BackgroundColor3 = theme.MainColor
                Filler.BorderColor3 = Color3.fromRGB(0, 0, 0)
                Filler.BorderSizePixel = 0
                Filler.Position = UDim2.new(0, 0, -4, 7)
                Filler.Size = UDim2.new(0, 70, 0, 4)
                Filler.ZIndex = 2
                
                UICorner.CornerRadius = UDim.new(0, 2)
                UICorner.Parent = Filler
                
                SliderHead.Name = "SliderHead"
                SliderHead.Parent = Filler
                SliderHead.BackgroundColor3 = theme.AccentColor
                SliderHead.BorderColor3 = Color3.fromRGB(0, 0, 0)
                SliderHead.BorderSizePixel = 0
                SliderHead.Position = UDim2.new(0.899999976, 0, -0.75, 0)
                SliderHead.Size = UDim2.new(0, 10, 0, 10)
                SliderHead.ZIndex = 2
                SliderHead.Font = Enum.Font.SourceSans
                SliderHead.Text = ""
                SliderHead.TextColor3 = Color3.fromRGB(0, 0, 0)
                SliderHead.TextSize = 14.000
                
                UICorner_2.CornerRadius = UDim.new(1, 0)
                UICorner_2.Parent = SliderHead
                
                Library:CreateStroke(SliderHead, theme.BorderColor, 1)
                
                SliderValue.Name = "SliderValue"
                SliderValue.Parent = SliderFrame
                SliderValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderValue.BackgroundTransparency = 1.000
                SliderValue.BorderColor3 = Color3.fromRGB(0, 0, 0)
                SliderValue.BorderSizePixel = 0
                SliderValue.Position = UDim2.new(0.764534891, 0, 0, 0)
                SliderValue.Size = UDim2.new(0, 50, 0, 19)
                SliderValue.Font = Enum.Font.SourceSansSemibold
                SliderValue.PlaceholderColor3 = theme.SecondaryTextColor
                SliderValue.PlaceholderText = tostring(Slider.Default)
                SliderValue.Text = ""
                SliderValue.TextColor3 = theme.SecondaryTextColor
                SliderValue.TextSize = 16.000
                SliderValue.TextXAlignment = Enum.TextXAlignment.Right
                
                function Slider:SetValue(value)
                    value = math.clamp(value, Slider.Min, Slider.Max)
                    Slider.Value = value
                    Library.Flags[Slider.Flag] = value
                    
                    local theme = Library:GetTheme()
                    
                    local percent = (value - Slider.Min) / (Slider.Max - Slider.Min)
                    local fillWidth = 214 * percent
                    
                    Library:TweenSize(Filler, UDim2.new(0, fillWidth, 0, 4), 0.1)
                    Library:TweenPosition(SliderHead, UDim2.new(0, fillWidth - 5, -0.75, 0), 0.1)
                    Library:TweenColor(Filler, "BackgroundColor3", theme.MainColor, 0.1)
                    
                    SliderValue.Text = tostring(value)
                    
                    Slider.Callback(value)
                end
                
                local dragging = false
                Library:CreateConnection(SliderHead.MouseButton1Down, function()
                    dragging = true
                    Library:TweenSize(SliderHead, UDim2.new(0, 12, 0, 12), 0.1)
                end)
                
                Library:CreateConnection(UserInputService.InputEnded, function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        if dragging then
                            Library:TweenSize(SliderHead, UDim2.new(0, 10, 0, 10), 0.1)
                        end
                        dragging = false
                    end
                end)
                
                Library:CreateConnection(UserInputService.InputChanged, function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local percent = math.clamp((Mouse.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                        local value = Slider.Min + (Slider.Max - Slider.Min) * percent
                        Slider:SetValue(math.floor(value * 1000) / 1000)
                    end
                end)
                
                Library:CreateConnection(SliderValue.FocusLost, function()
                    local value = tonumber(SliderValue.Text)
                    if value then
                        Slider:SetValue(value)
                    end
                end)
                
                Slider:SetValue(Slider.Default)
                Library.Elements[Slider.Flag] = Slider
                return Slider
            end
            
            -- Enhanced Dropdown Element
            function Section:CreateDropdown(config)
                local Dropdown = {}
                Dropdown.Name = config.Name or "Dropdown"
                Dropdown.Options = config.Options or {"Option1", "Option2", "Option3"}
                Dropdown.Default = config.Default or (config.Multi and {} or "None")
                Dropdown.Flag = config.Flag or Dropdown.Name
                Dropdown.Callback = config.Callback or function() end
                Dropdown.Value = Dropdown.Default
                Dropdown.Multi = config.Multi or false
                Dropdown.Open = false
                
                local theme = Library:GetTheme()
                
                local DropdownButton = Instance.new("TextButton")
                local Arrow = Instance.new("ImageLabel")
                local DropdownHolder = Instance.new("Frame")
                local UICorner = Instance.new("UICorner")
                local UIListLayout = Instance.new("UIListLayout")
                
                DropdownButton.Name = "Dropdown"
                DropdownButton.Parent = SectionHolder
                DropdownButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownButton.BackgroundTransparency = 1.000
                DropdownButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
                DropdownButton.BorderSizePixel = 0
                DropdownButton.Size = UDim2.new(0, 215, 0, 20)
                DropdownButton.ZIndex = 2
                DropdownButton.Font = Enum.Font.SourceSansSemibold
                DropdownButton.Text = " " .. (Dropdown.Multi and table.concat(Dropdown.Default, ", ") or tostring(Dropdown.Default))
                DropdownButton.TextColor3 = theme.TextColor
                DropdownButton.TextSize = 15.000
                DropdownButton.TextXAlignment = Enum.TextXAlignment.Left
                
                Library:CreateStroke(DropdownButton, theme.BorderColor, 1)
                
                Arrow.Name = "Arrow"
                Arrow.Parent = DropdownButton
                Arrow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Arrow.BackgroundTransparency = 1.000
                Arrow.BorderSizePixel = 0
                Arrow.Position = UDim2.new(0.906976759, 0, 0, 0)
                Arrow.Size = UDim2.new(0, 20, 0, 20)
                Arrow.Image = "http://www.roblox.com/asset/?id=6034818372"
                Arrow.ImageColor3 = theme.SecondaryTextColor
                
                DropdownHolder.Name = "DropdownHolder"
                DropdownHolder.Parent = DropdownButton
                DropdownHolder.BackgroundColor3 = theme.AccentColor
                DropdownHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                DropdownHolder.BorderSizePixel = 0
                DropdownHolder.Position = UDim2.new(0, 0, 1.35000002, 0)
                DropdownHolder.Size = UDim2.new(0, 215, 0, 54)
                DropdownHolder.ZIndex = 10
                DropdownHolder.Visible = false
                
                UICorner.CornerRadius = UDim.new(0, 2)
                UICorner.Parent = DropdownHolder
                
                Library:CreateStroke(DropdownHolder, theme.BorderColor, 1)
                
                UIListLayout.Parent = DropdownHolder
                UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                UIListLayout.Padding = UDim.new(0, 1)
                
                Dropdown.Button = DropdownButton
                Dropdown.Holder = DropdownHolder
                Dropdown.UIListLayout = UIListLayout
                Dropdown.Arrow = Arrow
                
              function Dropdown:SetValue(value)
                -- guard against “no actual change”
                if self.Value == value then
                  -- only update visuals (no callback)
                  self.Button.Text = " " .. tostring(value)
                  Library:TweenColor(self.Arrow, "ImageColor3", Library:GetTheme().SecondaryTextColor, 0.2)
                  return
                end
            
                -- store the new value
                self.Value = value
                Library.Flags[self.Flag] = value
            
                -- update UI
                self.Button.Text = " " .. tostring(value)
                Library:TweenColor(self.Arrow, "ImageColor3", Library:GetTheme().SecondaryTextColor, 0.2)
            
                -- only now fire the user‑supplied callback
                self.Callback(value)
              end
                            
                function Dropdown:Refresh()
                    for _, child in ipairs(self.Holder:GetChildren()) do
                        if child:IsA("TextLabel") then child:Destroy() end
                    end
                    
                    for _, option in ipairs(self.Options) do
                        local OptionLabel = Instance.new("TextLabel")
                        OptionLabel.Name = "Option"
                        OptionLabel.Parent = self.Holder
                        OptionLabel.BackgroundTransparency = 1
                        OptionLabel.Size = UDim2.new(0,215,0,16)
                        OptionLabel.Font = Enum.Font.SourceSansSemibold
                        OptionLabel.TextSize = 14
                        OptionLabel.TextXAlignment = Enum.TextXAlignment.Left
                        OptionLabel.Text = " " .. option
                        OptionLabel.Active = true
                        OptionLabel.ZIndex = self.Holder.ZIndex + 1
                        
                        -- Check if option is selected
                        local isSelected = self.Multi
                            and table.find(self.Value, option)
                            or (not self.Multi and self.Value == option)
                        
                        -- Set initial appearance
                        if isSelected then
                            OptionLabel.TextColor3 = theme.MainColor
                            OptionLabel.Text = "       " .. option
                        else
                            OptionLabel.TextColor3 = theme.SecondaryTextColor
                            OptionLabel.Text = " " .. option
                        end
                        
                        -- Simple hover effect for option
                        Library:CreateConnection(OptionLabel.MouseEnter, function()
                            if not isSelected then
                                Library:TweenColor(OptionLabel, "TextColor3", theme.TextColor, 0.1)
                            end
                        end)
                        
                        Library:CreateConnection(OptionLabel.MouseLeave, function()
                            if not isSelected then
                                Library:TweenColor(OptionLabel, "TextColor3", theme.SecondaryTextColor, 0.1)
                            end
                        end)
                        
                        Library:CreateConnection(OptionLabel.InputBegan, function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                if self.Multi then
                                    local selected = self.Value or {}
                                    if type(selected) ~= "table" then
                                        selected = {}
                                    end
                                    
                                    local index = table.find(selected, option)
                                    if index then
                                        table.remove(selected, index)
                                        OptionLabel.Text = " " .. option
                                        Library:TweenColor(OptionLabel, "TextColor3", theme.SecondaryTextColor, 0.2)
                                        isSelected = false
                                    else
                                        table.insert(selected, option)
                                        OptionLabel.Text = "       " .. option
                                        Library:TweenColor(OptionLabel, "TextColor3", theme.MainColor, 0.2)
                                        isSelected = true
                                    end
                                    self:SetValue(selected)
                                else
                                    -- Update all options to unselected first
                                    for _, child in pairs(self.Holder:GetChildren()) do
                                        if child:IsA("TextLabel") and child.Name == "Option" then
                                            child.Text = " " .. child.Text:gsub("^%s*", "")
                                            Library:TweenColor(child, "TextColor3", theme.SecondaryTextColor, 0.2)
                                        end
                                    end
                                    
                                    -- Update selected option
                                    OptionLabel.Text = "       " .. option
                                    Library:TweenColor(OptionLabel, "TextColor3", theme.MainColor, 0.2)
                                    isSelected = true
                                    
                                    self:SetValue(option)
                                end
                            end
                        end)
                    end
                    
                    local contentH = self.UIListLayout.AbsoluteContentSize.Y
                    self.Holder.Size = UDim2.new(0, self.Holder.Size.X.Offset, 0, contentH)
                end
                
                function Dropdown:OpenMenu()
                    if self.Open then return end
                    self.Open = true
                    
                    -- Rotate arrow
                    Library:Tween(self.Arrow, {Rotation = 180}, 0.2):Play()
                    
                    self.Holder.Parent = Library.OverlayGui
                    self.Holder.ZIndex = 50
                    
                    -- Refresh to get current state
                    self:Refresh()
                    
                    local p, s = self.Button.AbsolutePosition, self.Button.AbsoluteSize
                    self.Holder.Position = UDim2.new(0, p.X, 0, p.Y + s.Y + 5)
                    
                    -- Fade in animation
                    self.Holder.BackgroundTransparency = 1
                    self.Holder.Visible = true
                    Library:TweenTransparency(self.Holder, 0, 0.2)
                    
                    -- Scale in animation
                    self.Holder.Size = UDim2.new(0, 0, 0, 0)
                    local targetSize = UDim2.new(0, 215, 0, math.max(self.UIListLayout.AbsoluteContentSize.Y, 20))
                    Library:TweenSize(self.Holder, targetSize, 0.2)
                    
                    self._outsideConn = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                        if gameProcessed or input.UserInputType ~= Enum.UserInputType.MouseButton1 then
                            return
                        end
                        
                        local mx, my = UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y
                        local hp, hs = self.Holder.AbsolutePosition, self.Holder.AbsoluteSize
                        local bp, bs = self.Button.AbsolutePosition, self.Button.AbsoluteSize
                        
                        local inHolder = mx >= hp.X and mx <= hp.X+hs.X and my >= hp.Y and my <= hp.Y+hs.Y
                        local inButton = mx >= bp.X and mx <= bp.X+bs.X and my >= bp.Y and my <= bp.Y+bs.Y
                        
                        if not (inHolder or inButton) then
                            self:Close()
                        end
                    end)
                    
                    table.insert(Library.OpenDropdowns, self)
                end
                
                function Dropdown:Close()
                    if not self.Open then return end
                    self.Open = false
                    
                    -- Rotate arrow back
                    Library:Tween(self.Arrow, {Rotation = 0}, 0.2):Play()
                    
                    -- Fade out animation
                    Library:TweenTransparency(self.Holder, 1, 0.2)
                    Library:TweenSize(self.Holder, UDim2.new(0, 0, 0, 0), 0.2)
                    
                    wait(0.2)
                    self.Holder.Visible = false
                    self.Holder.Parent = SectionHolder
                    self.Holder.Position = UDim2.new(0, 0, 1.35, 0)
                    
                    if self._outsideConn then
                        self._outsideConn:Disconnect()
                        self._outsideConn = nil
                    end
                    
                    for i, dd in ipairs(Library.OpenDropdowns) do
                        if dd == self then
                            table.remove(Library.OpenDropdowns, i)
                            break
                        end
                    end
                end
                
                Library:CreateConnection(DropdownButton.MouseButton1Click, function()
                    if Dropdown.Open then
                        Dropdown:Close()
                    else
                        Dropdown:OpenMenu()
                    end
                end)
                
                Dropdown:Refresh()
                Dropdown:SetValue(Dropdown.Default)
                Library.Elements[Dropdown.Flag] = Dropdown
                return Dropdown
            end
            
            -- Enhanced Colorpicker Element
            function Section:CreateColorpicker(config)
                local Colorpicker = {}
                Colorpicker.Name = config.Name or "Color"
                Colorpicker.Default = config.Default or Color3.fromRGB(0, 251, 255)
                Colorpicker.Flag = config.Flag or Colorpicker.Name
                Colorpicker.Callback = config.Callback or function() end
                Colorpicker.Value = Colorpicker.Default
                
                local theme = Library:GetTheme()
                
                local ColorpickerFrame = Instance.new("TextLabel")
                local ColorpickerButton = Instance.new("TextButton")
                local UICorner = Instance.new("UICorner")
                
                ColorpickerFrame.Name = "Colorpicker"
                ColorpickerFrame.Parent = SectionHolder
                ColorpickerFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ColorpickerFrame.BackgroundTransparency = 1.000
                ColorpickerFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                ColorpickerFrame.BorderSizePixel = 0
                ColorpickerFrame.Size = UDim2.new(0, 215, 0, 20)
                ColorpickerFrame.Font = Enum.Font.SourceSansSemibold
                ColorpickerFrame.Text = Colorpicker.Name
                ColorpickerFrame.TextColor3 = theme.SecondaryTextColor
                ColorpickerFrame.TextSize = 15.000
                ColorpickerFrame.TextXAlignment = Enum.TextXAlignment.Left
                
                ColorpickerButton.Name = "ColorpickerAlone"
                ColorpickerButton.Parent = ColorpickerFrame
                ColorpickerButton.BackgroundColor3 = Colorpicker.Default
                ColorpickerButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
                ColorpickerButton.BorderSizePixel = 0
                ColorpickerButton.Position = UDim2.new(0.851162791, 0, 0.14799957, 0)
                ColorpickerButton.Size = UDim2.new(0, 32, 0, 13)
                ColorpickerButton.Font = Enum.Font.SourceSans
                ColorpickerButton.Text = ""
                ColorpickerButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                ColorpickerButton.TextSize = 14.000
                
                UICorner.CornerRadius = UDim.new(0, 3)
                UICorner.Parent = ColorpickerButton
                
                Library:CreateStroke(ColorpickerButton, theme.BorderColor, 1)
                
                function Colorpicker:SetValue(color)
                    Colorpicker.Value = color
                    Library.Flags[Colorpicker.Flag] = color
                    Library:TweenColor(ColorpickerButton, "BackgroundColor3", color, 0.2)
                    Colorpicker.Callback(color)
                end
                
                Library:CreateConnection(ColorpickerButton.MouseButton1Click, function()
                    Library:CreateColorpickerWindow(Colorpicker)
                end)
                
                Colorpicker:SetValue(Colorpicker.Default)
                Library.Elements[Colorpicker.Flag] = Colorpicker
                return Colorpicker
            end
            
            -- Enhanced Keybind Element
            function Section:CreateKeybind(config)
                local Keybind = {}
                Keybind.Name = config.Name or "Keybind"
                Keybind.Default = config.Default or "None"
                Keybind.Flag = config.Flag or Keybind.Name
                Keybind.Callback = config.Callback or function() end
                Keybind.Value = Keybind.Default
                Keybind.Listening = false
                
                local theme = Library:GetTheme()
                local TextService = game:GetService("TextService")
                local MIN_W = 20
                local H_PADDING = 8
                local V_PADDING = 0
                
                local KeybindFrame = Instance.new("TextLabel")
                local KeybindBox = Instance.new("TextButton")
                
                KeybindFrame.Name = "Keybind"
                KeybindFrame.Parent = SectionHolder
                KeybindFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                KeybindFrame.BackgroundTransparency = 1.000
                KeybindFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                KeybindFrame.BorderSizePixel = 0
                KeybindFrame.Size = UDim2.new(0, 215, 0, 20)
                KeybindFrame.Font = Enum.Font.SourceSansSemibold
                KeybindFrame.Text = Keybind.Name
                KeybindFrame.TextColor3 = theme.SecondaryTextColor
                KeybindFrame.TextSize = 15.000
                KeybindFrame.TextXAlignment = Enum.TextXAlignment.Left
                
                KeybindBox.Name = "KeybindAlone"
                KeybindBox.Parent = KeybindFrame
                KeybindBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                KeybindBox.BackgroundTransparency = 1.000
                KeybindBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
                KeybindBox.BorderSizePixel = 0
                KeybindBox.AnchorPoint = Vector2.new(1, 0.5)
                KeybindBox.Position = UDim2.new(1, -0, 0.5, V_PADDING)
                KeybindBox.Size = UDim2.new(0, MIN_W, 0, 20)
                KeybindBox.Font = Enum.Font.SourceSansSemibold
                KeybindBox.Text = Keybind.Default
                KeybindBox.TextColor3 = theme.TextColor
                KeybindBox.TextSize = 15.000
                KeybindBox.TextScaled = false
                KeybindBox.AutoButtonColor = false
                
                Library:CreateStroke(KeybindBox, theme.BorderColor, 1)
                
                local KeyNames = {
                    [Enum.KeyCode.LeftShift] = "LShift",
                    [Enum.KeyCode.RightShift] = "RShift",
                    [Enum.KeyCode.LeftControl] = "LCtrl",
                    [Enum.KeyCode.RightControl] = "RCtrl",
                    [Enum.KeyCode.LeftAlt] = "LAlt",
                    [Enum.KeyCode.RightAlt] = "RAlt",
                    [Enum.KeyCode.Space] = "Space",
                    [Enum.KeyCode.Return] = "Enter",
                    [Enum.KeyCode.BackSlash] = "\\",
                    [Enum.KeyCode.Slash] = "/",
                    [Enum.KeyCode.Period] = ".",
                    [Enum.KeyCode.Comma] = ",",
                    [Enum.KeyCode.Semicolon] = ";",
                    [Enum.KeyCode.Quote] = "'",
                    [Enum.KeyCode.LeftBracket] = "[",
                    [Enum.KeyCode.RightBracket] = "]",
                    [Enum.KeyCode.Minus] = "-",
                    [Enum.KeyCode.Equals] = "=",
                    [Enum.KeyCode.Backquote] = "`",
                    [Enum.KeyCode.Tab] = "Tab",
                    [Enum.KeyCode.CapsLock] = "Caps",
                    [Enum.UserInputType.MouseButton1] = "MB1",
                    [Enum.UserInputType.MouseButton2] = "MB2",
                    [Enum.UserInputType.MouseButton3] = "MB3"
                }
                
                function Keybind:SetValue(key)
                    Keybind.Value = key
                    Library.Flags[Keybind.Flag] = key
                    
                    local displayName = "None"
                    if key and key ~= "None" then
                        if KeyNames[key] then
                            displayName = KeyNames[key]
                        elseif typeof(key) == "EnumItem" then
                            displayName = key.Name
                        else
                            displayName = tostring(key)
                        end
                    end
                    
                    KeybindBox.Text = displayName
                    
                    local bounds = TextService:GetTextSize(
                        displayName,
                        15,
                        Enum.Font.SourceSansSemibold,
                        Vector2.new(1e5, 20)
                    )
                    local newWidth = math.max(MIN_W, bounds.X + H_PADDING*2)
                    
                    Library:TweenSize(KeybindBox, UDim2.new(0, newWidth, 0, 20), 0.2)
                    
                    Keybind.Callback(key)
                end
                
                Library:CreateConnection(KeybindBox.MouseButton1Click, function()
                    if not Keybind.Listening then
                        Keybind.Listening = true
                        KeybindBox.Text = "..."
                        Library:TweenColor(KeybindBox, "TextColor3", theme.SecondaryTextColor, 0.2)
                        
                        local connection
                        connection = Library:CreateConnection(UserInputService.InputBegan, function(input2, gameProcessed)
                            if gameProcessed then return end
                            
                            local key = nil
                            if input2.UserInputType == Enum.UserInputType.Keyboard then
                                key = input2.KeyCode
                            elseif input2.UserInputType == Enum.UserInputType.MouseButton1 or 
                                   input2.UserInputType == Enum.UserInputType.MouseButton2 or 
                                   input2.UserInputType == Enum.UserInputType.MouseButton3 then
                                key = input2.UserInputType
                            end
                            
                            if key then
                                Keybind:SetValue(key)
                                Library:TweenColor(KeybindBox, "TextColor3", theme.TextColor, 0.2)
                                Keybind.Listening = false
                                connection:Disconnect()
                            end
                        end)
                    end
                end)
                
                Keybind:SetValue(Keybind.Default)
                Library.Elements[Keybind.Flag] = Keybind
                return Keybind
            end
            
            -- Enhanced Button Element
            function Section:CreateButton(config)
                local Button = {}
                Button.Name = config.Name or "Button"
                Button.Callback = config.Callback or function() end
                
                local theme = Library:GetTheme()
                
                local ButtonFrame = Instance.new("TextButton")
                local UICorner = Instance.new("UICorner")
                
                ButtonFrame.Name = "Button"
                ButtonFrame.Parent = SectionHolder
                ButtonFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ButtonFrame.BackgroundTransparency = 1.000
                ButtonFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                ButtonFrame.BorderSizePixel = 0
                ButtonFrame.Size = UDim2.new(0, 100, 0, 30)
                ButtonFrame.Font = Enum.Font.SourceSansSemibold
                ButtonFrame.Text = Button.Name
                ButtonFrame.TextColor3 = theme.TextColor
                ButtonFrame.TextSize = 15.000
                
                UICorner.CornerRadius = UDim.new(0, 3)
                UICorner.Parent = ButtonFrame
                
                Library:CreateStroke(ButtonFrame, theme.BorderColor, 1)
                
                Library:CreateConnection(ButtonFrame.MouseButton1Click, function()
                    Button.Callback()
                end)
                
                return Button
            end
            
            -- Enhanced Label Element
            function Section:CreateLabel(config)
                local Label = {}
                Label.Name = config.Name or "Label"
                Label.Text = config.Text or Label.Name
                
                local theme = Library:GetTheme()
                
                local LabelFrame = Instance.new("TextLabel")
                
                LabelFrame.Name = "Label"
                LabelFrame.Parent = SectionHolder
                LabelFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                LabelFrame.BackgroundTransparency = 1.000
                LabelFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                LabelFrame.BorderSizePixel = 0
                LabelFrame.Size = UDim2.new(0, 215, 0, 20)
                LabelFrame.Font = Enum.Font.SourceSansSemibold
                LabelFrame.Text = Label.Text
                LabelFrame.TextColor3 = theme.SecondaryTextColor
                LabelFrame.TextSize = 15.000
                
                function Label:SetText(text)
                    Label.Text = text
                    -- Add fade effect when text changes
                    Library:TweenTransparency(LabelFrame, 0.5, 0.1)
                    wait(0.1)
                    LabelFrame.Text = text
                    Library:TweenTransparency(LabelFrame, 0, 0.1)
                end
                
                return Label
            end
            
            -- Enhanced Divider Element
            function Section:CreateDivider(config)
                local Divider = {}
                Divider.Name = config.Name or "Divider"
                
                local theme = Library:GetTheme()
                
                local DividerFrame = Instance.new("Frame")
                local UICorner = Instance.new("UICorner")
                
                DividerFrame.Name = "Divider"
                DividerFrame.Parent = SectionHolder
                DividerFrame.BackgroundColor3 = theme.MainColor
                DividerFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                DividerFrame.BorderSizePixel = 0
                DividerFrame.Size = UDim2.new(0, 215, 0, 3)
                
                UICorner.CornerRadius = UDim.new(0, 3)
                UICorner.Parent = DividerFrame
                
                -- Store reference for theme updates
                Divider.Frame = DividerFrame
                
                -- Add glow effect
                local glowEffect = Instance.new("UIGradient")
                glowEffect.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                    ColorSequenceKeypoint.new(0.5, theme.MainColor),
                    ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))
                }
                glowEffect.Transparency = NumberSequence.new{
                    NumberSequenceKeypoint.new(0, 0.5),
                    NumberSequenceKeypoint.new(0.5, 0),
                    NumberSequenceKeypoint.new(1, 0.5)
                }
                glowEffect.Parent = DividerFrame
                
                -- Add to elements for theme updates
                Library.Elements[Divider.Name .. "_divider"] = Divider
                
                function Divider:SetValue(value)
                    local theme = Library:GetTheme()
                    Library:TweenColor(DividerFrame, "BackgroundColor3", theme.MainColor, 0.2)
                    
                    -- Update gradient colors
                    glowEffect.Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                        ColorSequenceKeypoint.new(0.5, theme.MainColor),
                        ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))
                    }
                end
                
                return Divider
            end
            
            -- Enhanced Config Element
            function Section:CreateConfig(config)
                local Config = {}
                Config.Name = config.Name or "Config Manager"
                
                local theme = Library:GetTheme()
                
                local ConfigFrame = Instance.new("Frame")
                local ConfigTitle = Instance.new("TextLabel")
                local ConfigList = Instance.new("ScrollingFrame")
                local UIListLayout = Instance.new("UIListLayout")
                local ButtonsFrame = Instance.new("Frame")
                local SaveButton = Instance.new("TextButton")
                local LoadButton = Instance.new("TextButton")
                local DeleteButton = Instance.new("TextButton")
                local RenameButton = Instance.new("TextButton")
                local SaveAsFrame = Instance.new("Frame")
                local SaveAsTextBox = Instance.new("TextBox")
                local SaveAsButton = Instance.new("TextButton")
                local RenameFrame = Instance.new("Frame")
                local RenameTextBox = Instance.new("TextBox")
                local RenameConfirmButton = Instance.new("TextButton")
                
                ConfigFrame.Name = "ConfigFrame"
                ConfigFrame.Parent = SectionHolder
                ConfigFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ConfigFrame.BackgroundTransparency = 1.000
                ConfigFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                ConfigFrame.BorderSizePixel = 0
                ConfigFrame.Size = UDim2.new(0, 215, 0, 220)
                
                ConfigTitle.Name = "ConfigTitle"
                ConfigTitle.Parent = ConfigFrame
                ConfigTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ConfigTitle.BackgroundTransparency = 1.000
                ConfigTitle.BorderColor3 = Color3.fromRGB(0, 0, 0)
                ConfigTitle.BorderSizePixel = 0
                ConfigTitle.Position = UDim2.new(0, 0, 0, 0)
                ConfigTitle.Size = UDim2.new(0, 215, 0, 20)
                ConfigTitle.Font = Enum.Font.SourceSansSemibold
                ConfigTitle.Text = Config.Name
                ConfigTitle.TextColor3 = theme.SecondaryTextColor
                ConfigTitle.TextSize = 15.000
                ConfigTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                ConfigList.Name = "ConfigList"
                ConfigList.Parent = ConfigFrame
                ConfigList.BackgroundColor3 = theme.SecondaryColor
                ConfigList.BorderColor3 = Color3.fromRGB(0, 0, 0)
                ConfigList.BorderSizePixel = 0
                ConfigList.Position = UDim2.new(0, 0, 0.11, 0)
                ConfigList.Size = UDim2.new(1, -4, 0, 120)
                ConfigList.CanvasSize = UDim2.new(0, 0, 0, 0)
                ConfigList.ScrollBarThickness = 4
                ConfigList.ScrollBarImageColor3 = theme.MainColor
                ConfigList.AutomaticCanvasSize = Enum.AutomaticSize.Y
                
                local configListCorner = Instance.new("UICorner")
                configListCorner.CornerRadius = UDim.new(0, 3)
                configListCorner.Parent = ConfigList
                
                Library:CreateStroke(ConfigList, theme.BorderColor, 1)
                
                UIListLayout.Parent = ConfigList
                UIListLayout.SortOrder = Enum.SortOrder.Name
                UIListLayout.Padding = UDim.new(0, 2)
                
                ButtonsFrame.Name = "ButtonsFrame"
                ButtonsFrame.Parent = ConfigFrame
                ButtonsFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ButtonsFrame.BackgroundTransparency = 1.000
                ButtonsFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                ButtonsFrame.BorderSizePixel = 0
                ButtonsFrame.Position = UDim2.new(0, 0, 0.68, 0)
                ButtonsFrame.Size = UDim2.new(0, 215, 0, 35)
                
                -- Enhanced config buttons
                local buttons = {
                    {SaveButton, "Save", 0},
                    {LoadButton, "Load", 55},
                    {DeleteButton, "Delete", 110},
                    {RenameButton, "Rename", 165}
                }
                
                for i, buttonData in ipairs(buttons) do
                    local button, text, xPos = buttonData[1], buttonData[2], buttonData[3]
                    
                    button.Name = text .. "Button"
                    button.Parent = ButtonsFrame
                    button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    button.BackgroundTransparency = 1.000
                    button.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    button.BorderSizePixel = 0
                    button.Position = UDim2.new(0, xPos, 0, 0)
                    button.Size = UDim2.new(0, 50, 0, 25)
                    button.Font = Enum.Font.SourceSansSemibold
                    button.Text = text
                    button.TextColor3 = theme.TextColor
                    button.TextSize = 14.000
                    
                    local buttonCorner = Instance.new("UICorner")
                    buttonCorner.CornerRadius = UDim.new(0, 3)
                    buttonCorner.Parent = button
                    
                    Library:CreateStroke(button, theme.BorderColor, 1)
                end
                
                SaveAsFrame.Name = "SaveAsFrame"
                SaveAsFrame.Parent = ConfigFrame
                SaveAsFrame.BackgroundColor3 = theme.AccentColor
                SaveAsFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                SaveAsFrame.BorderSizePixel = 0
                SaveAsFrame.Position = UDim2.new(0, 0, 0.85, 0)
                SaveAsFrame.Size = UDim2.new(0, 215, 0, 25)
                SaveAsFrame.Visible = false
                
                local saveAsCorner = Instance.new("UICorner")
                saveAsCorner.CornerRadius = UDim.new(0, 3)
                saveAsCorner.Parent = SaveAsFrame
                
                Library:CreateStroke(SaveAsFrame, theme.BorderColor, 1)
                
                SaveAsTextBox.Name = "SaveAsTextBox"
                SaveAsTextBox.Parent = SaveAsFrame
                SaveAsTextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SaveAsTextBox.BackgroundTransparency = 1.000
                SaveAsTextBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
                SaveAsTextBox.BorderSizePixel = 0
                SaveAsTextBox.Position = UDim2.new(0, 5, 0, 0)
                SaveAsTextBox.Size = UDim2.new(0, 150, 0, 25)
                SaveAsTextBox.Font = Enum.Font.SourceSansSemibold
                SaveAsTextBox.PlaceholderText = "Config name..."
                SaveAsTextBox.PlaceholderColor3 = theme.SecondaryTextColor
                SaveAsTextBox.Text = ""
                SaveAsTextBox.TextColor3 = theme.TextColor
                SaveAsTextBox.TextSize = 14.000
                SaveAsTextBox.TextXAlignment = Enum.TextXAlignment.Left
                
                SaveAsButton.Name = "SaveAsButton"
                SaveAsButton.Parent = SaveAsFrame
                SaveAsButton.BackgroundColor3 = theme.MainColor
                SaveAsButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
                SaveAsButton.BorderSizePixel = 0
                SaveAsButton.Position = UDim2.new(0, 160, 0, 2)
                SaveAsButton.Size = UDim2.new(0, 50, 0, 21)
                SaveAsButton.Font = Enum.Font.SourceSansSemibold
                SaveAsButton.Text = "Save"
                SaveAsButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                SaveAsButton.TextSize = 14.000
                
                local saveAsButtonCorner = Instance.new("UICorner")
                saveAsButtonCorner.CornerRadius = UDim.new(0, 3)
                saveAsButtonCorner.Parent = SaveAsButton
                
                RenameFrame.Name = "RenameFrame"
                RenameFrame.Parent = ConfigFrame
                RenameFrame.BackgroundColor3 = theme.AccentColor
                RenameFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                RenameFrame.BorderSizePixel = 0
                RenameFrame.Position = UDim2.new(0, 0, 0.85, 0)
                RenameFrame.Size = UDim2.new(0, 215, 0, 25)
                RenameFrame.Visible = false
                
                local renameCorner = Instance.new("UICorner")
                renameCorner.CornerRadius = UDim.new(0, 3)
                renameCorner.Parent = RenameFrame
                
                Library:CreateStroke(RenameFrame, theme.BorderColor, 1)
                
                RenameTextBox.Name = "RenameTextBox"
                RenameTextBox.Parent = RenameFrame
                RenameTextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                RenameTextBox.BackgroundTransparency = 1.000
                RenameTextBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
                RenameTextBox.BorderSizePixel = 0
                RenameTextBox.Position = UDim2.new(0, 5, 0, 0)
                RenameTextBox.Size = UDim2.new(0, 150, 0, 25)
                RenameTextBox.Font = Enum.Font.SourceSansSemibold
                RenameTextBox.PlaceholderText = "New name..."
                RenameTextBox.PlaceholderColor3 = theme.SecondaryTextColor
                RenameTextBox.Text = ""
                RenameTextBox.TextColor3 = theme.TextColor
                RenameTextBox.TextSize = 14.000
                RenameTextBox.TextXAlignment = Enum.TextXAlignment.Left
                
                RenameConfirmButton.Name = "RenameConfirmButton"
                RenameConfirmButton.Parent = RenameFrame
                RenameConfirmButton.BackgroundColor3 = theme.MainColor
                RenameConfirmButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
                RenameConfirmButton.BorderSizePixel = 0
                RenameConfirmButton.Position = UDim2.new(0, 160, 0, 2)
                RenameConfirmButton.Size = UDim2.new(0, 50, 0, 21)
                RenameConfirmButton.Font = Enum.Font.SourceSansSemibold
                RenameConfirmButton.Text = "Rename"
                RenameConfirmButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                RenameConfirmButton.TextSize = 14.000
                
                local renameButtonCorner = Instance.new("UICorner")
                renameButtonCorner.CornerRadius = UDim.new(0, 3)
                renameButtonCorner.Parent = RenameConfirmButton
                
                Config.SelectedConfig = nil
                
                function Config:RefreshList()
                    for _, child in ipairs(ConfigList:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    local configs = Library:GetConfigs()
                    
                    for _, configName in ipairs(configs) do
                        local ConfigButton = Instance.new("TextButton")
                        
                        ConfigButton.Name = configName
                        ConfigButton.Parent = ConfigList
                        ConfigButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        ConfigButton.BackgroundTransparency = 1.000
                        ConfigButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        ConfigButton.BorderSizePixel = 0
                        ConfigButton.Size = UDim2.new(1, -8, 0, 20)
                        ConfigButton.Font = Enum.Font.SourceSansSemibold
                        ConfigButton.Text = " " .. configName
                        ConfigButton.TextColor3 = theme.TextColor
                        ConfigButton.TextSize = 14.000
                        ConfigButton.TextXAlignment = Enum.TextXAlignment.Left
                        
                        local configButtonCorner = Instance.new("UICorner")
                        configButtonCorner.CornerRadius = UDim.new(0, 3)
                        configButtonCorner.Parent = ConfigButton
                        
                        Library:CreateConnection(ConfigButton.MouseButton1Click, function()
                            -- Deselect all other configs
                            for _, child in ipairs(ConfigList:GetChildren()) do
                                if child:IsA("TextButton") then
                                    Library:TweenTransparency(child, 1, 0.2)
                                    Library:TweenColor(child, "TextColor3", theme.TextColor, 0.2)
                                end
                            end
                            
                            -- Select this config
                            Library:TweenTransparency(ConfigButton, 0.2, 0.2)
                            Library:TweenColor(ConfigButton, "BackgroundColor3", theme.MainColor, 0.2)
                            Library:TweenColor(ConfigButton, "TextColor3", Color3.fromRGB(0, 0, 0), 0.2)
                            Config.SelectedConfig = configName
                        end)
                    end
                end
                
                function Config:HideAllFrames()
                    if SaveAsFrame.Visible then
                        Library:TweenTransparency(SaveAsFrame, 1, 0.2)
                        wait(0.2)
                        SaveAsFrame.Visible = false
                    end
                    if RenameFrame.Visible then
                        Library:TweenTransparency(RenameFrame, 1, 0.2)
                        wait(0.2)
                        RenameFrame.Visible = false
                    end
                end
                
                Library:CreateConnection(SaveButton.MouseButton1Click, function()
                    Config:HideAllFrames()
                    SaveAsFrame.Visible = true
                    SaveAsFrame.BackgroundTransparency = 1
                    Library:TweenTransparency(SaveAsFrame, 0, 0.2)
                    SaveAsTextBox:CaptureFocus()
                end)
                
                Library:CreateConnection(LoadButton.MouseButton1Click, function()
                    if Config.SelectedConfig then
                        local success, message = Library:LoadConfig(Config.SelectedConfig)
                        if success then
                            print("✅ Config loaded successfully:", Config.SelectedConfig)
                        else
                            warn("❌ Failed to load config:", Config.SelectedConfig, "-", message)
                        end
                    else
                        warn("❌ No config selected")
                    end
                end)
                
                Library:CreateConnection(DeleteButton.MouseButton1Click, function()
                    if Config.SelectedConfig then
                        local success = Library:DeleteConfig(Config.SelectedConfig)
                        if success then
                            print("✅ Config deleted successfully:", Config.SelectedConfig)
                            Config.SelectedConfig = nil
                            Config:RefreshList()
                        else
                            warn("❌ Failed to delete config:", Config.SelectedConfig)
                        end
                    else
                        warn("❌ No config selected")
                    end
                end)
                
                Library:CreateConnection(RenameButton.MouseButton1Click, function()
                    if Config.SelectedConfig then
                        Config:HideAllFrames()
                        RenameFrame.Visible = true
                        RenameFrame.BackgroundTransparency = 1
                        Library:TweenTransparency(RenameFrame, 0, 0.2)
                        RenameTextBox.Text = Config.SelectedConfig
                        RenameTextBox:CaptureFocus()
                    end
                end)
                
                Library:CreateConnection(SaveAsButton.MouseButton1Click, function()
                    local configName = SaveAsTextBox.Text:gsub("%s+", "_")
                    if configName ~= "" then
                        local success, message = Library:SaveConfig(configName)
                        if success then
                            print("✅ Config saved successfully:", configName)
                            SaveAsTextBox.Text = ""
                            Config:HideAllFrames()
                            Config:RefreshList()
                        else
                            warn("❌ Failed to save config:", configName, "-", message)
                        end
                    else
                        warn("❌ Config name cannot be empty")
                    end
                end)
                
                Library:CreateConnection(RenameConfirmButton.MouseButton1Click, function()
                    local newName = RenameTextBox.Text:gsub("%s+", "_")
                    if newName ~= "" and Config.SelectedConfig then
                        local success = Library:RenameConfig(Config.SelectedConfig, newName)
                        if success then
                            print("✅ Config renamed successfully from", Config.SelectedConfig, "to", newName)
                            Config.SelectedConfig = newName
                            RenameTextBox.Text = ""
                            Config:HideAllFrames()
                            Config:RefreshList()
                        else
                            warn("❌ Failed to rename config from", Config.SelectedConfig, "to", newName)
                        end
                    else
                        if not Config.SelectedConfig then
                            warn("❌ No config selected")
                        else
                            warn("❌ New name cannot be empty")
                        end
                    end
                end)
                
                Library:CreateConnection(SaveAsTextBox.FocusLost, function(enterPressed)
                    if enterPressed then
                        SaveAsButton.MouseButton1Click:Fire()
                    end
                end)
                
                Library:CreateConnection(RenameTextBox.FocusLost, function(enterPressed)
                    if enterPressed then
                        RenameConfirmButton.MouseButton1Click:Fire()
                    end
                end)
                
                Config:RefreshList()
                return Config
            end
            
            -- Settings Elements for Settings Tab
            function Section:CreateThemeDropdown()
                local ThemeDropdown = self:CreateDropdown({
                    Name = "Theme",
                    Options = {"Default", "Dark", "Light", "Red", "Green", "Orange"},
                    Default = Library.CurrentTheme,
                    Flag = "Theme",
                    Callback = function(theme)
                        Library:SetTheme(theme)
                    end
                })
                themeDropdown.SkipRefresh = true
                return ThemeDropdown
            end
            
            function Section:CreateMenuKeybind()
                local MenuKeybind = self:CreateKeybind({
                    Name = "Menu Keybind",
                    Default = "Insert",
                    Flag = "MenuKeybind",
                    Callback = function(key)
                        -- Convert string back to EnumItem if needed
                        if type(key) == "string" then
                            if key == "Insert" then
                                key = Enum.KeyCode.Insert
                            elseif key == "Delete" then
                                key = Enum.KeyCode.Delete
                            elseif key == "Home" then
                                key = Enum.KeyCode.Home
                            elseif key == "End" then
                                key = Enum.KeyCode.End
                            elseif key == "F1" then
                                key = Enum.KeyCode.F1
                            elseif key == "F2" then
                                key = Enum.KeyCode.F2
                            elseif key == "F3" then
                                key = Enum.KeyCode.F3
                            elseif key == "F4" then
                                key = Enum.KeyCode.F4
                            elseif key == "F5" then
                                key = Enum.KeyCode.F5
                            elseif key == "F6" then
                                key = Enum.KeyCode.F6
                            elseif key == "F7" then
                                key = Enum.KeyCode.F7
                            elseif key == "F8" then
                                key = Enum.KeyCode.F8
                            elseif key == "F9" then
                                key = Enum.KeyCode.F9
                            elseif key == "F10" then
                                key = Enum.KeyCode.F10
                            elseif key == "F11" then
                                key = Enum.KeyCode.F11
                            elseif key == "F12" then
                                key = Enum.KeyCode.F12
                            elseif key:len() == 1 then
                                key = Enum.KeyCode[key:upper()]
                            end
                        end
                        Library.Settings.MenuKeybind = key
                    end
                })
                return MenuKeybind
            end
            
            function Section:CreateAnimationSpeed()
                local AnimationSpeed = self:CreateSlider({
                    Name = "Animation Speed",
                    Min = 0.1,
                    Max = 1,
                    Default = Library.Settings.AnimationSpeed,
                    Flag = "AnimationSpeed",
                    Callback = function(value)
                        Library.Settings.AnimationSpeed = value
                    end
                })
                return AnimationSpeed
            end
            
            function Section:CreateSoundToggle()
                local SoundToggle = self:CreateToggle({
                    Name = "Sound Effects",
                    Default = Library.Settings.SoundEnabled,
                    Flag = "SoundEnabled",
                    Callback = function(value)
                        Library.Settings.SoundEnabled = value
                    end
                })
                return SoundToggle
            end
            
            function Section:CreateHoverEffectsToggle()
                local HoverEffectsToggle = self:CreateToggle({
                    Name = "Hover Effects",
                    Default = Library.Settings.HoverEffects,
                    Flag = "HoverEffects",
                    Callback = function(value)
                        Library.Settings.HoverEffects = value
                    end
                })
                return HoverEffectsToggle
            end
            
            function Section:CreateRainbowToggle()
                local RainbowToggle = self:CreateToggle({
                    Name = "Rainbow Mode",
                    Default = Library.Settings.RainbowMode,
                    Flag = "RainbowMode",
                    Callback = function(value)
                        Library.Settings.RainbowMode = value
                        if value then
                            Library:StartRainbowMode()
                        else
                            if Library.RainbowConnection then
                                Library.RainbowConnection:Disconnect()
                                Library.RainbowConnection = nil
                            end
                            Library:UpdateThemeForAllElements()
                        end
                    end
                })
                
                local RainbowSpeed = RainbowToggle:AddSlider({
                    Name = "Rainbow Speed",
                    Min = 1,
                    Max = 10,
                    Default = Library.Settings.RainbowSpeed,
                    Flag = "RainbowSpeed",
                    Callback = function(value)
                        Library.Settings.RainbowSpeed = value
                    end
                })
                
                return RainbowToggle
            end
            
            function Section:CreateUIColorpicker()
                local UIColorpicker = self:CreateColorpicker({
                    Name = "UI Color",
                    Default = Library:GetTheme().MainColor,
                    Flag = "UIColor",
                    Callback = function(color)
                        local theme = Library:GetTheme()
                        theme.MainColor = color
                        Library:UpdateThemeForAllElements()
                    end
                })
                return UIColorpicker
            end
            
            table.insert(Page.Sections, Section)
            
            -- Update section background color immediately
            SectionFrame.BackgroundColor3 = theme.BackgroundColor
            
            return Section
        end
        
        table.insert(Window.Pages, Page)
        -- Also store in Library.Pages for theme updates
        Library.Pages = Window.Pages
        return Page
    end
    
    function Window:SetPage(page)
        if Window.CurrentPage then
            Window.CurrentPage:SetActive(false)
        end
        Window.CurrentPage = page
        page:SetActive(true)
        
        -- Close any open dropdowns when switching pages
        for _, dropdown in ipairs(Library.OpenDropdowns) do
            if dropdown.Close then
                dropdown:Close()
            end
        end
        Library.OpenDropdowns = {}
    end
    
    -- Set first page as default
    spawn(function()
        wait(0.1)
        if #Window.Pages > 0 then
            Window:SetPage(Window.Pages[1])
        end
    end)
    
    -- Load theme preference
    spawn(function()
        wait(0.5)
        local success, _ = Library:LoadConfig("_theme_preference")
        if success then
            Library:UpdateThemeForAllElements()
        end
    end)
    
    return Window
end

function Library:Destroy()
    -- Stop all animations
    for _, animation in pairs(self.Animations) do
        if animation then
            animation:Cancel()
        end
    end
    
    -- Disconnect all connections
    for _, connection in pairs(self.Connections) do
        if connection then
            connection:Disconnect()
        end
    end
    
    -- Stop rainbow mode
    if self.RainbowConnection then
        self.RainbowConnection:Disconnect()
    end
    
    -- Destroy GUIs
    if self.GUI then
        self.GUI:Destroy()
    end
    if self.OverlayGui then
        self.OverlayGui:Destroy()
    end
    
    -- Clear tables
    self.Connections = {}
    self.Animations = {}
    self.OpenDropdowns = {}
    self.Elements = {}
    self.Pages = {}
    self.Flags = {}
end

return Library
